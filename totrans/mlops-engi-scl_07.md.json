["```py\nrange(len(a_list))\n```", "```py\nmtx = [[3 * j + i for i in range(3)] for j in range(3)]\nprint(mtx[1][2])\n```", "```py\n[[0, 1, 2],\n [3, 4, 5],\n [6, 7, 8]]\n```", "```py\nimport torch as pt        ❶\nalpha = pt.tensor(42)     ❷\nalpha\n```", "```py\ntensor(42)\n```", "```py\nalpha.type()\n```", "```py\ntorch.LongTensor\n```", "```py\nalpha.dtype\n```", "```py\ntorch.int64\n```", "```py\nalpha.item()\n```", "```py\nalpha.shape\n```", "```py\nlen(alpha.shape)\n```", "```py\narr = pt.tensor([1, 1, 2, 3, 5])\narr.shape\n```", "```py\nmtx = pt.tensor([ [  2,   4,  16,  32,  64],\n                  [  3,   9,  27,  81, 243]] )\n```", "```py\npt.tensor([  [  2,   4,  16,  32,  64],\n             [  3,   9,  27,  81, 243],\n             [  4,  16,  64, 256]        ])\n```", "```py\nValueError: expected sequence of length 5 at dim 1 (got 4)\n```", "```py\npt.zeros( [2, 3] )\n```", "```py\ntensor([[0., 0., 0.],\n        [0., 0., 0.]])\n```", "```py\npt.zeros( [2, 3] ).shape\n```", "```py\ntorch.Size([2, 3])\n```", "```py\npt.ones(10)\n```", "```py\ntensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])\n```", "```py\ntensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]])\n```", "```py\npt.ones(10, dtype=pt.int64)\n```", "```py\ntensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n```", "```py\npt.manual_seed(42)\n```", "```py\npt.randn(3,3)\n```", "```py\ntensor([[ 0.3367,  0.1288,  0.2345],\n        [ 0.2303, -1.1229, -0.1863],\n        [ 2.2082, -0.6380,  0.4617]])\n```", "```py\npt.normal(100, 10, [3, 3])\n```", "```py\ntensor([[102.6735, 105.3490, 108.0936],\n        [111.1029,  83.1020,  90.1104],\n        [109.5797, 113.2214, 108.1719]])\n```", "```py\npt.randint(0, 10, [3, 3])\n```", "```py\ntensor([[9, 6, 2],\n        [0, 6, 2],\n        [7, 9, 7]])\n```", "```py\npt.arange(10)\n```", "```py\ntensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\npt.arange(1, 13, 2)\n```", "```py\ntensor([ 1,  3,  5,  7,  9, 11])\n```", "```py\npt.linspace(0, 10, 5)\n```", "```py\ntensor([ 0.0000,  2.5000,  5.0000,  7.5000, 10.0000])\n```", "```py\npt.arange(10) + 1\n```", "```py\ntensor([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])\n```", "```py\npt.arange(10) + 1\n```", "```py\npt.arange(10) + pt.tensor(1)\n```", "```py\na = pt.arange(10)\nid(a), id(a + 1)\n```", "```py\na = pt.arange(10)\nid(a), id(a.add_(1))\n```", "```py\na = pt.arange(10)\nb = pt.ones(10)\n```", "```py\ntensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\ntensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])\n```", "```py\ntensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])\n```", "```py\na = pt.ones([2, 5])\nb = pt.ones(5)\n```", "```py\ntensor([[2., 2., 2., 2., 2.],\n        [2., 2., 2., 2., 2.]])\n```", "```py\ndef can_broadcast(a, b):\n  return all( [x == y or x == 1 or y == 1 \\\n    for x, y in zip( a.shape[::-1], b.shape[::-1] ) ])\n```", "```py\nimport timeit\nsizes = [2 ** i for i in range(1, 28)]\n\npylist = [ timeit.timeit(lambda: [i + 1 for i in list(range(size))],\n                          number = 10) for size in sizes ]\n```", "```py\npytorch = [ timeit.timeit(lambda: pt.tensor(list(range(size))) + 1,\n                          number = 10) for size in sizes ]\n```", "```py\nratio = [pylist[i] / pytorch[i] for i in range(len(pylist))]\n```"]