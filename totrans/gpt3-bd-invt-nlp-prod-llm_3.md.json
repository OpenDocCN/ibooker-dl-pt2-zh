["```py\npip install chronological\n```", "```py\nMy second-grader asked me what this passage means:\n\"\"\"\nOlive oil is a liquid fat obtained from olives (the fruit of *Olea europaea*; \nfamily Oleaceae)...\n\"\"\"\nI rephrased it for him, in plain language a second-grader can understand:\n\"\"\"\n```", "```py\n# Importing Dependencies\nfrom chronological import read_prompt, cleaned_completion, main\n```", "```py\n# Takes in the training prompt and returns the completed response \nasync def summarization_example(): \n    # Takes in a text file(summarize_for_a_2nd_grader) as the input prompt\n    prompt_summarize = read_prompt('summarize_for_a_2nd_grader')    \n    # Calling the completion method along with the specific GPT-3 parameters\n    completion_summarize = await cleaned_completion(prompt_summarize, \n    max_tokens=100, engine=\"davinci\", temperature=0.5, top_p=1, \n    frequency_penalty=0.2, stop=[\"\\n\\n\"])\n    # Return the completion response\n    return completion_summarize\n```", "```py\n# Designing the end-to-end async workflow, capable of running multiple prompts \n# in parallel  \nasync def workflow():\n    # Making async call to the summarization function\n    text_summ_example = await summarization_example()\n    # Printing the result in console\n    print('-------------------------')\n    print('Basic Example Response: {0}'.format(text_summ_example))\n    print('-------------------------')\n# invoke Chronology by using the main function to run the async workflow\nmain(workflow)\n```", "```py\npython text_summarization.py\n```", "```py\n-------------------------\nBasic Example Response: Olive oil is a liquid fat that comes from olives. \nOlives grow on a tree called an olive tree. The olive tree is the most common \ntree in the Mediterranean. People use the oil to cook with, to put on their \nsalads, and as a fuel for lamps.\n-------------------------\n```", "```py\ngo mod init gogpt\n```", "```py\ngo get github.com/sashabaranov/go-gpt3\ngo get: added github.com/sashabaranov/go-gpt3 v0.0.0-20210606183212-2be4a268a894\n```", "```py\n# Calling the package main\npackage main\n# Importing Dependencies\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"context\"\n    gogpt \"github.com/sashabaranov/go-gpt3\"\n)\n```", "```py\nfunc main() {\n    c := gogpt.NewClient(\"OPENAI-API-KEY\")\n    ctx := context.Background()    \n    prompt, err := ioutil.ReadFile(\"prompts/summarize_for_a_2nd_grader.txt\")\n    req := gogpt.CompletionRequest{\n        MaxTokens: 100,\n        Temperature: 0.5,\n        TopP: 1.0,\n        Stop: []string{\"\\n\\n\"},\n        FrequencyPenalty: 0.2,\n        Prompt: string(prompt),\n    }\n    resp, err := c.CreateCompletion(ctx, \"davinci\", req)\n    if err != nil {\n        return\n    }\n\n    fmt.Println(\"-------------------------\")\n    fmt.Println(resp.Choices[0].Text)\n    fmt.Println(\"-------------------------\")\n}\n```", "```py\ngo run text_summarization.go\n```", "```py\n-------------------------\nOlive oil is a liquid fat that comes from olives. Olives grow on a tree called an \nolive tree. The olive tree is the most common tree in the Mediterranean. People \nuse the oil to cook with, to put on their salads, and as a fuel for lamps.\n-------------------------\n```", "```py\npackage example;\n\n// Importing Dependencies \nimport java.util.*;  \nimport java.io.*;\nimport com.theokanning.openai.OpenAiService;\nimport com.theokanning.openai.completion.CompletionRequest;\nimport com.theokanning.openai.engine.Engine;\n```", "```py\nclass OpenAiApiExample {\n    public static void main(String... args) throws FileNotFoundException {\n\n        String token = \"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\";\n        OpenAiService service = new OpenAiService(token);\n```", "```py\n// Reading the training prompt from the prompts folder\nFile file = new File(\"D:\\\\GPT-3 Book\\\\Programming with GPT-3\\\\GPT-3 \nJava\\\\example\\\\src\\\\main\\\\java\\\\example\\\\prompts\\\\\nsummarize_for_a_2nd_grader.txt\");\n\nScanner sc = new Scanner(file);\n\n// we just need to use \\\\Z as delimiter\nsc.useDelimiter(\"\\\\Z\");\n\n// pp is the string consisting of the training prompt\nString pp = sc.next();\n```", "```py\n// Creating a list of strings to used as stop sequence\nList<String> li = new ArrayList<String>();    \nli.add(\"\\n\\n\"''\");\n// Creating a completion request with the API parameters\nCompletionRequest completionRequest = CompletionRequest.builder().prompt(pp)\n.maxTokens(100).temperature(0.5).topP(1.0).frequencyPenalty(0.2).stop(li)\n.echo(true).build();\n// Using the service object to fetch the completion response \nservice.createCompletion(\"davinci\",completionRequest).getChoices().forEach\n(System.out::println);\n```", "```py\n./gradlew example:run\n```", "```py\npython --version\n```", "```py\ngit clone https://github.com/Shubhamsaboo/kairos_gpt3\n```", "```py\n(env) kairos_gpt3\\GPT-3 Sandbox\\email_generation>\n```", "```py\n(env) kairos_gpt3\\GPT-3 Sandbox\\email_generation> pip install -r requirements.txt\n```", "```py\n(env) kairos_gpt3\\GPT-3 Sandbox\\email_generation> streamlit run gpt_app.py\n```"]