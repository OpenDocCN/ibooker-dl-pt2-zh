["```py\n[16, 4]\n```", "```py\n[16/(16+4), 4/(16+4)] = [0.8, 0.2]\n```", "```py\nimport numpy as np\nimport tensorflow as tf\n```", "```py\nx = np.random.normal(size=[1,4]).astype('float32')\n\ninit = tf.keras.initializers.RandomNormal()\n\nw1 = tf.Variable(init(shape=[4,3])) \nb1 = tf.Variable(init(shape=[1,3])) \n\nw2 = tf.Variable(init(shape=[3,2])) \nb2 = tf.Variable(init(shape=[1,2])) \n```", "```py\n@tf.function\ndef forward(x, W, b, act):\n    return act(tf.matmul(x,W)+b)\n```", "```py\n# Computing h\nh = forward(x, w1, b1, tf.nn.sigmoid)\n\n# Computing y\ny = forward(h, w2, b2, tf.nn.softmax)\n\nprint(y)\n```", "```py\ntf.Tensor([[0.4912673 0.5087327]], shape=(1, 2), dtype=float32)\n```", "```py\nimport numpy as np                                  ❶\nimport tensorflow as tf                             ❶\n\nx = np.random.normal(size=[1,4]).astype('float32')  ❷\n\ninit = tf.keras.initializers.RandomNormal()         ❸\n\nw1 = tf.Variable(init(shape=[4,3]))                 ❹\nb1 = tf.Variable(init(shape=[1,3]))                 ❹\n\nw2 = tf.Variable(init(shape=[3,2]))                 ❹\nb2 = tf.Variable(init(shape=[1,2]))                 ❹\n\n@tf.function                                        ❺\ndef forward(x, W, b, act):                          ❻\n    return act(tf.matmul(x,W)+b)                    ❻\n\nh = forward(x, w1, b1, tf.nn.sigmoid)               ❼\n\ny = forward(h, w2, b2, tf.nn.softmax)               ❽\n\nprint(y)\n```", "```py\ndef log_io(func):\n    def wrapper(*args, **kwargs):\n        print(\"args: \", args)\n        print(“kwargs: “, kwargs)\n        out = func(*args, **kwargs)\n        print(\"return: \", out)\n    return wrapper\n\n@log_io\ndef easy_math(x, y):\n    return x + y + ( x * y)\n\nres = easy_math(2,3)\n```", "```py\nargs:  (2, 3)\nkwargs:  {}\nreturn:  11\n```", "```py\n# A\nimport tensorflow as tf\n# B\ndef f1(x, y, z):\n    return tf.math.add(tf.matmul(x, y) , z)\n#C\nw = f1(x, y, z)\n```", "```py\ntf.Variable(initial_value=None, trainable=None, dtype=None)\n```", "```py\nimport tensorflow as tf\nimport numpy as np\n```", "```py\nv1 = tf.Variable(tf.constant(2.0, shape=[4]), dtype='float32')\nprint(v1)\n\n>>> <tf.Variable 'Variable:0' shape=(4,) dtype=float32, numpy=array([2., 2., 2., 2.], dtype=float32)>\n```", "```py\nv2 = tf.Variable(np.ones(shape=[4,3]), dtype='float32')\nprint(v2)\n\n>>> <tf.Variable 'Variable:0' shape=(4, 3) dtype=float32, numpy=\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]], dtype=float32)>\n```", "```py\nv3 = tf.Variable(tf.keras.initializers.RandomNormal()(shape=[3,4,5]), dtype='float32')\nprint(v3)\n\n>>> <tf.Variable 'Variable:0' shape=(3, 4, 5) dtype=float32, numpy=\narray([[[-0.00599647, -0.04389469, -0.03364765, -0.0044175 ,\n          0.01199682],\n        [ 0.05423453, -0.02812728, -0.00572744, -0.08236874,\n         -0.07564012],\n        [ 0.0283042 , -0.05198685,  0.04385028,  0.02636188,\n          0.02409425],\n        [-0.04051876,  0.03284673, -0.00593955,  0.04204708,\n         -0.05000611]],\n\n       ...\n\n       [[-0.00781542, -0.03068716,  0.04313354, -0.08717368,\n          0.07951441],\n        [ 0.00467467,  0.00154883, -0.03209472, -0.00158945,\n          0.03176221],\n        [ 0.0317267 ,  0.00167555,  0.02544901, -0.06183815,\n          0.01649506],\n        [ 0.06924769,  0.02057942,  0.01060928, -0.00929202,\n          0.04461157]]], dtype=float32)>\n```", "```py\narr = v1.numpy()\n```", "```py\nprint(arr) \n```", "```py\n>>> [2\\. 2\\. 2\\. 2.]\n```", "```py\nv = tf.Variable(np.zeros(shape=[4,3]), dtype='float32')\n```", "```py\nv = v[0,2].assign(1)\n```", "```py\n>>> [[0\\. 0\\. 1.]\n     [0\\. 0\\. 0.]\n     [0\\. 0\\. 0.]\n     [0\\. 0\\. 0.]]\n```", "```py\nv = v[2:, :2].assign([[3,3],[3,3]])\n```", "```py\n>>> [[0\\. 0\\. 1.]\n     [0\\. 0\\. 0.]\n     [3\\. 3\\. 0.]\n     [3\\. 3\\. 0.]]\n```", "```py\n1 2 3\n4 3 2\n```", "```py\n[\n [1,3,5,7],\n [2,4,6,8]\n]\n```", "```py\n[\n  [\n    [[1],[2]],\n    [[2],[3]],\n    [[3],[4]]\n  ],\n  [\n    [[1],[2]],\n    [[2],[3]],\n    [[3],[4]]\n  ]\n]\n```", "```py\nv = tf.Variable(np.ones(shape=[4,3]), dtype='float32')\nb = v * 3.0\n```", "```py\n>>> EagerTensor\n```", "```py\nassert isinstance(b, tf.Tensor)\n```", "```py\na = tf.constant(2, shape=[4], dtype='float32')\nb = tf.constant(3, shape=[4], dtype='float32')\nc = tf.add(a,b)\n```", "```py\n>>> [5\\. 5\\. 5\\. 5]\n```", "```py\nassert isinstance(c, tf.Tensor)\n```", "```py\na = tf.constant(2, shape=[4], dtype='float32')\na = a[0].assign(2.0)\n```", "```py\n---------------------------------------------------------------------------\n\nAttributeError                            Traceback (most recent call last)\n\n<ipython-input-19-6e4e6e519741> in <module>()\n      1 a = tf.constant(2, shape=[4], dtype='float32')\n----> 2 a = a[0].assign(2.0)\n\nAttributeError: 'tensorflow.python.framework.ops.EagerTensor' object has no attribute 'assign'\n```", "```py\nimport tensorflow as tf\nimport numpy as np\n\na = tf.constant(4, shape=[4], dtype='float32')\nb = tf.constant(2, shape=[4], dtype='float32')\n```", "```py\nprint(a)\nprint(b)\n```", "```py\n>>> tf.Tensor([4\\. 4\\. 4\\. 4.], shape=(4,), dtype=float32)\n>>> tf.Tensor([2\\. 2\\. 2\\. 2.], shape=(4,), dtype=float32)\n```", "```py\nc = a+b\nprint(c)\n```", "```py\n>>> tf.Tensor([6\\. 6\\. 6\\. 6.], shape=(4,), dtype=float32)\n```", "```py\ne = a*b\nprint(e)\n```", "```py\n>>> tf.Tensor([8\\. 8\\. 8\\. 8.], shape=(4,), dtype=float32)\n```", "```py\na = tf.constant([[1,2,3],[4,5,6]])\nb = tf.constant([[5,4,3],[3,2,1]])\n```", "```py\nequal_check = (a==b)\nprint(equal_check)\n```", "```py\n>>> tf.Tensor(\n    [[False False  True]\n     [False False False]], shape=(2, 3), dtype=bool) \n```", "```py\nleq_check = (a<=b)\nprint(leq_check)\n```", "```py\n>>> tf.Tensor(\n    [[ True  True  True]\n     [False False False]], shape=(2, 3), dtype=bool)\n```", "```py\na = tf.constant(np.random.normal(size=[5,4,3]), dtype='float32')\n```", "```py\n>>> tf.Tensor(\n    [[[-0.7665215   0.9611947   1.456347  ]\n      [-0.52979267 -0.2647674  -0.57217133]\n      [-0.7511135   2.2282166   0.6573406 ]\n      [-1.1323775   0.3301812   0.1310132 ]]\n     ...\n     [[ 0.42760614  0.17308706 -0.90879506]\n      [ 0.5347165   2.569637    1.3013649 ]\n      [ 0.95198756 -0.74183583 -1.2316796 ]\n      [-0.03830088  1.1367576  -1.2704859 ]]], shape=(5, 4, 3), dtype=float32)\n```", "```py\nred_a1 = tf.reduce_sum(a)\n```", "```py\n>>> -4.504758\n```", "```py\nred_a2 = tf.reduce_prod(a, axis=0)\n```", "```py\n>>> [[-0.04612858  0.45068324  0.02033644]\n     [-0.27674386 -0.03757533 -0.33719817]\n     [-1.4913832  -2.1016302  -0.39335614]\n     [-0.00213956  0.14960718  0.01671476]]\n```", "```py\nred_a3 = tf.reduce_min(a, axis=[0,1])\n```", "```py\n>>> [-1.6531237 -1.6245098 -1.4723392]\n```", "```py\n# Reducing with keepdims=False\nred_a1 = tf.reduce_min(a, axis=1)\nprint(red_a1.shape)\n```", "```py\n>>> [5,3]\n\n# Reducing with keepdims=True\nred_a2 = tf.reduce_min(a, axis=1, keepdims=True)\nprint(red_a2.shape)\n```", "```py\n>>> red_a2.shape = [5,1,3]\n```", "```py\n0.5 0.2 0.7\n0.2 0.3 0.4\n0.9 0.1 0.1\n```", "```py\nfrom PIL import Image                                          ❶\nimport tensorflow as tf\nimport numpy as np\n\nx_rgb = np.array(Image.open(\"baboon.jpg\")).astype('float32')   ❷\nx_rgb = tf.constant(x_rgb)                                     ❸\n\ngrays = tf.constant([[0.3], [0.59] ,[0.11]])                   ❹\n\nx = tf.matmul(x_rgb, grays)                                    ❺\nx = tf.squeeze(x)                                              ❻\n```", "```py\ny = tf.constant(x)\n```", "```py\nfilter = tf.Variable(np.array([[-1,-1,-1],[-1,8,-1],[-1,-1,-1]]).astype('float32'))\n```", "```py\ny_reshaped = tf.reshape(y, [1,512,512,1])\nfilter_reshaped = tf.reshape(filter, [3,3,1,1])\n```", "```py\ny_conv = tf.nn.convolution(y_reshaped, filter_reshaped)\n```", "```py\nz_avg = tf.nn.avg_pool(y_conv, (1,2,2,1), strides=(1,2,2,1), padding='VALID')\nz_max = tf.nn.max_pool(y_conv, (1,2,2,1), strides=(1,2,2,1), padding='VALID')\n```", "```py\nz_avg = tf.nn.avg_pool(y_conv, (1,2,2,1), strides=(1,2,2,1), padding='VALID')\nz_max = tf.nn.max_pool(y_conv, (1,2,2,1), strides=(1,2,2,1), padding='VALID')\n```", "```py\nz_avg = np.squeeze(z_avg.numpy())\nz_max = np.squeeze(z_max.numpy())\n```", "```py\nimg_reshaped = tf.reshape(img, [1,256,256,1])\nf_reshaped = tf.reshape(f, [5,5,1,1])\ny = tf.nn.convolution(img_reshaped, f_reshaped)\n```"]