["```py\nclass Asset:\n    def __init__(self, asset_id, asset_type, manufacturer, model, purchase_date, warranty_end_date, location):\n        self.asset_id = asset_id\n        self.asset_type = asset_type\n        self.manufacturer = manufacturer\n        self.model = model\n        self.purchase_date = purchase_date\n        self.warranty_end_date = warranty_end_date\n        self.location = location\n        self.assigned_to = None\n        self.status = 'Available'\n\n    def assign_to_user(self, user):\n        self.assigned_to = user\n        self.status = 'Assigned'\n\n    def unassign(self):\n        self.assigned_to = None\n        self.status = 'Available'\n\n    def get_details(self):\n        details = f \"Asset ID: {self.asset_id}\\n\"\n        details += f\"Type: {self.asset_type}\\n\"\n        details += f\"Manufacturer: {self.manufacturer}\\n\"\n        details += f\"Model: {self.model}\\n\"\n        details += f \"Purchase Date: {self.purchase_date}\\n\"\n        details += f \"Warranty End Date: {self.warranty_end_date}\\n\"\n        details += f\"Location: {self.location}\\n\"\n        details += f \"Assigned To: {self.assigned_to}\\n\"\n        details += f\"Status: {self.status}\\n\"\n        return details\n```", "```py\nfrom flask import Flask, request, jsonify\nfrom asset import Asset, AssetManager\n\napp = Flask(__name__)\nasset_manager = AssetManager()\n\n# Get all assets\n@app.route('/assets', methods=['GET'])\ndef get_assets():\n    assets = [asset.__dict__ for asset in asset_manager.assets]\n    return jsonify({'assets': assets})\n\n# Get an asset by ID\n@app.route('/assets/<string:asset_id>', methods=['GET'])\ndef get_asset(asset_id):\n    asset = asset_manager.get_asset_by_id(asset_id)\n    if asset:\n        return jsonify(asset.__dict__)\n    else:\n        return jsonify({'error': 'Asset not found'})\n\nif __name__ == '__main__':\n   app.run(debug=True)\n\n```", "```py\nclick==8.0.3\nFlask==2.1.1\nimportlib-metadata==4.8.1\nitsdangerous==2.0.1\nJinja2==3.0.2\nMarkupSafe==2.0.1\ntyping-extensions==3.10.0.2\nWerkzeug==2.0.1\nzipp==3.6.0\n```", "```py\nclass AssetManager:\n    def __init__(self):\n        self.assets = []\n\n    def add_asset(self, asset):\n        self.assets.append(asset)\n\n    def remove_asset(self, asset_id):\n        for asset in self.assets:\n            if asset.asset_id == asset_id:\n                self.assets.remove(asset)\n                return True\n        return False\n\n    def get_asset_by_id(self, asset_id):\n        for asset in self.assets:\n            if asset.asset_id == asset_id:\n                return asset\n        return None\n\n    def assign_asset(self, asset_id, user):\n        asset = self.get_asset_by_id(asset_id)\n        if asset and asset.status == 'Available':\n            asset.assign_to_user(user)\n            return True\n        return False\n\n    def unassign_asset(self, asset_id):\n        asset = self.get_asset_by_id(asset_id)\n        if asset and asset.status == 'Assigned':\n            asset.unassign()\n            return True\n        return False\n\n    def get_available_assets(self):\n        return [asset for asset in self.assets if asset.status == 'Available']\n\n    def get_assigned_assets(self):\n        return [asset for asset in self.assets if asset.status == 'Assigned']\n```", "```py\nfrom flask import Flask, request, jsonify\nfrom asset import Asset\nfrom asset_manager import AssetManager\n\napp = Flask(__name__)\nasset_manager = AssetManager()\nâ€¦\n```", "```py\napp = FastAPI()\nasset_manager = AssetManager()\n\nclass AssetIn(BaseModel):\n    asset_id: str\n    asset_type: str\n    manufacturer: str\n    model: str\n    purchase_date: str\n    warranty_end_date: str\n    location: str\n\nclass AssetOut(BaseModel):\n    asset_id: str\n    asset_type: str\n    manufacturer: str\n    model: str\n    purchase_date: str\n    warranty_end_date: str\n    location: str\n    assigned_to: str\n    status: str\n\n@app.get(\"/assets/{asset_id}\", response_model=AssetOut)\nasync def get_asset(asset_id: str):\n    asset = asset_manager.get_asset_by_id(asset_id)\n    if asset:\n        return asset\n    else:\n        return {\"message\": \"Asset not found\"}\n```", "```py\nfrom typing import Optional\n\nclass Asset:\n    def __init__(self, asset_id: str, asset_type: str, manufacturer: str, model: str, purchase_date: str, warranty_end_date: str, location: str):\n        self.asset_id = asset_id\n        self.asset_type = asset_type\n        self.manufacturer = manufacturer\n        self.model = model\n        self.purchase_date = purchase_date\n        self.warranty_end_date = warranty_end_date\n        self.location = location\n        self.assigned_to: Optional[str] = None\n        self.status: str = 'Available'\n\n    def assign_to_user(self, user: str):\n        self.assigned_to = user\n        self.status = 'Assigned'\n\n    def unassign(self):\n        self.assigned_to = None\n        self.status = 'Available'\n\n    def get_details(self):\n        details = f \"Asset ID: {self.asset_id}\\n\"\n        details += f\"Type: {self.asset_type}\\n\"\n        details += f\"Manufacturer: {self.manufacturer}\\n\"\n        details += f\"Model: {self.model}\\n\"\n        details += f \"Purchase Date: {self.purchase_date}\\n\"\n        details += f \"Warranty End Date: {self.warranty_end_date}\\n\"\n        details += f\"Location: {self.location}\\n\"\n        details += f \"Assigned To: {self.assigned_to}\\n\"\n        details += f\"Status: {self.status}\\n\"\n        return details\n```", "```py\nfrom typing import List, Optional\nfrom asset import Asset\n\nclass AssetManager:\n    def __init__(self):\n        self.assets: List[Asset] = []\n\n    def add_asset(self, asset: Asset):\n        self.assets.append(asset)\n```", "```py\n    def remove_asset(self, asset_id: str) -> bool:\n        for asset in self.assets:\n            if asset.asset_id == asset_id:\n                self.assets.remove(asset)\n                return True\n        return False\n```", "```py\n    def get_asset_by_id(self, asset_id: str) -> Optional[Asset]:\n        for asset in self.assets:\n            if asset.asset_id == asset_id:\n                return asset\n        return None\n\n    def assign_asset(self, asset_id: str, user: str) -> bool:\n        for asset in self.assets:\n            if asset.asset_id == asset_id:\n                if asset.status == 'Available':\n                    asset.assign_to_user(user)\n                    return True\n                else:\n                    return False\n        return False\n\n    def unassign_asset(self, asset_id: str) -> bool:\n        for asset in self.assets:\n            if asset.asset_id == asset_id:\n                if asset.status == 'Assigned':\n                    asset.unassign()\n                    return True\n                else:\n                    return False\n        return False\n```", "```py\n    def get_available_assets(self) -> List[Asset]:\n        return [asset for asset in self.assets if asset.status == 'Available']\n\n    def get_assigned_assets(self) -> List[Asset]:\n        return [asset for asset in self.assets if asset.status == 'Assigned']\n\n    def get_all_assets(self) -> List[Asset]:\n        return self.assets\n```", "```py\nfastapi==0.70.0\nuvicorn==0.15.0\npydantic==1.8.2\n```", "```py\n@app.get(\"/assets/\", response_model=List[AssetOut])\nasync def get_assets():\n    assets = asset_manager.get_all_assets()\n    return assets\n```", "```py\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"asset_id\": \"12345\", \"asset_type\": \"Laptop\", \"manufacturer\": \"Dell\", \"model\": \"Latitude 5400\", \"purchase_date\": \"2022-01-01\", \"warranty_end_date\": \"2023-01-01\", \"location\": \"New York\"}' http://localhost:8000/assets/\n```", "```py\ndef to_dict(self):\n        return {\n            \"asset_id\": self.asset_id,\n            \"asset_type\": self.asset_type,\n            \"manufacturer\": self.manufacturer,\n            \"model\": self.model,\n            \"purchase_date\": self.purchase_date,\n            \"warranty_end_date\": self.warranty_end_date,\n            \"location\": self.location,\n            \"assigned_to\": self.assigned_to,\n            \"status\": self.status\n        }\n```", "```py\n\n@app.get(\"/assets/\", response_model=List[AssetOut])\nasync def get_assets():\n    assets = asset_manager.get_all_assets()\n    return JSONResponse(content=[asset.to_dict() for asset in assets])\n\n@app.post(\"/assets/\")\nasync def add_asset(asset: AssetIn):\n    new_asset = Asset(asset.asset_id, asset.asset_type, asset.manufacturer, asset.model, asset.purchase_date, asset.warranty_end_date, asset.location)\n    asset_manager.add_asset(new_asset)\n    return {\"message\": \"Asset added successfully\"}\n\n@app.delete(\"/assets/{asset_id}\")\nasync def remove_asset(asset_id: str):\n    if asset_manager.remove_asset(asset_id):\n        return {\"message\": \"Asset removed successfully\"}\n    else:\n        return {\"message\": \"Asset not found\"}\n\n@app.get(\"/assets/{asset_id}\", response_model=AssetOut)\nasync def get_asset(asset_id: str):\n    asset = asset_manager.get_asset_by_id(asset_id)\n    if asset:\n        return JSONResponse(content=asset.to_dict())\n    else:\n        return {\"message\": \"Asset not found\"}\n\n@app.put(\"/assets/{asset_id}/assign\")\nasync def assign_asset(asset_id: str, user: str):\n    if asset_manager.assign_asset(asset_id, user):\n        return {\"message\": \"Asset assigned successfully\"}\n    else:\n        return {\"message\": \"Asset not available\"}\n\n@app.put(\"/assets/{asset_id}/unassign\")\nasync def unassign_asset(asset_id: str):\n    if asset_manager.unassign_asset(asset_id):\n        return {\"message\": \"Asset unassigned successfully\"}\n    else:\n        return {\"message\": \"Asset not assigned\"}\n\n@app.get(\"/assets/available/\", response_model=List[AssetOut])\nasync def get_available_assets():\n    assets = asset_manager.get_available_assets()\n    return JSONResponse(content=[asset.to_dict() for asset in assets])\n\n@app.get(\"/assets/assigned/\", response_model=List[AssetOut])\nasync def get_assigned_assets():\n    assets = asset_manager.get_assigned_assets()\n    return JSONResponse(content=[asset.to_dict() for asset in assets])\n```", "```py\n# Create a class named Asset\n# Add the following attributes: id, asset_type, manufacturer, model, purchase_date, purchase_price, warranty_end_date, location, and status. \n# The class should have a function named get_details that returns a string that is the concatenation of all attributes.\n# The class should have a function named to_dict that returns a dictionary of all attributes.\n```", "```py\n# Create a class named Asset\n# Add the following attributes: id, asset_type, manufacturer, model, purchase_date, purchase_price, warranty_end_date, location, and status. \n# The class should have a function named get_details that returns a string that is the concatenation of all attributes.\n# The class should have a function named to_dict that returns a dictionary of all attributes.\n\nclass Asset:\n    def __init__(self):\n        self.id = None\n        self.asset_type = None\n        self.manufacturer = None\n        self.model = None\n        self.purchase_date = None\n        self.purchase_price = None\n        self.warranty_end_date = None\n        self.location = None\n        self.status = None\n\n    def get_details(self):\n        return f\"{self.id}, {self.asset_type}, {self.manufacturer}, {self.model}, {self.purchase_date}, {self.purchase_price}, {self.warranty_end_date}, {self.location}, {self.status}\"\n\n    def to_dict(self): \n        return {\n            \"id\": self.id,\n            \"asset_type\": self.asset_type,\n            \"manufacturer\": self.manufacturer,\n            \"model\": self.model,\n            \"purchase_date\": self.purchase_date,\n            \"purchase_price\": self.purchase_price,\n            \"warranty_end_date\": self.warranty_end_date,\n            \"location\": self.location,\n            \"status\": self.status\n        }\n```", "```py\n# Create a class called AssetManager that will allow us to store and retrieve assets.\n```", "```py\n# Create a class called AssetManager that will allow us to store and retrieve assets.\n\nclass AssetManager:\n    def __init__(self):\n        self.assets = []\n\n    def add_asset(self, asset):\n        self. Assets.append(asset)\n\n    def get_assets(self):\n        return self. assets\n\n    def get_asset(self, asset_id):\n        for asset in self.assets:\n            if asset.id == asset_id:\n                return asset\n        return None\n\n    def update_asset(self, asset_id, asset):\n        for index, asset in enumerate(self.assets):\n            if asset.id == asset_id:\n                self.assets[index] = asset\n                return True\n        return False\n\n    def delete_asset(self, asset_id):\n        for index, asset in enumerate(self.assets):\n            if asset.id == asset_id:\n                del self.assets[index]\n                return True\n        return False\n```", "```py\n# Create a FastAPI app that allows CRUD operations on the Asset class.\n```", "```py\n# generate a requirements.txt file for this project\nfastapi==0.63.0\nuvicorn==0.13.4\npydantic==1.7.3\nstarlette==0.13.6\n```", "```py\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"id\": \"12345\", \"asset_type\": \"Laptop,\" \"manufacturer\": \"Dell\", \"model\": \"Latitude 5400\", \"purchase_date\": \"2022-01-01\", \"warrenty_expiration\": \"2023-01-01\", \"location\": \"New York\", \"status\": \"Available\", \"purchase_price\": \"1000.00\"}' http://localhost:8000/assets/\n```", "```py\n# Create a class named Asset\n# Add the following attributes: id, asset_type, manufacturer, model, purchase_date, purchase_price, warranty_end_date, location, and status. \n# The class should have a function named get_details that returns a string that is the concatenation of all attributes.\n# The class should have a function named to_dict that returns a dictionary of all attributes.\n```", "```py\n# Create a class named Asset\n# Add the following attributes: id, asset_type, manufacturer, model, purchase_date, purchase_price, warranty_end_date, location, and status.\n# The class should have a function named get_details that returns a string which is the concatenation of all attributes.\n# The class should have a function named to_dict that returns a dictionary of all attributes.\n\nclass Asset():\n    def __init__(self, id, asset_type, manufacturer, model, purchase_date, purchase_price, warranty_end_date, location, status):\n        self.id = id\n        self.asset_type = asset_type\n        self.manufacturer = manufacturer\n        self.model = model\n        self.purchase_date = purchase_date\n        self.purchase_price = purchase_price\n        self.warranty_end_date = warranty_end_date\n        self.location = location\n        self.status = status\n\n    def get_details(self):\n        return f\"{self.id}, {self.asset_type}, {self.manufacturer}, {self.model}, {self.purchase_date}, {self.purchase_price}, {self.warranty_end_date}, {self.location}, {self.status}\"\n\n    def to_dict(self):\n        return {\"id\": self.id, \"asset_type\": self.asset_type, \"manufacturer\": self.manufacturer, \"model\": self.model, \"purchase_date\": self.purchase_date, \"purchase_price\": self.purchase_price, \"warranty_end_date\": self.warranty_end_date, \"location\": self.location, \"status\": self.status}\n```"]