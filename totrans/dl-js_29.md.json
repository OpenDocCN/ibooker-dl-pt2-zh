["```js\nconst model = await tf.loadLayersModel(                                    ***1***\n    'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json'); ***1***\nconst x = tf.randomUniform([1, 4]);                                        ***2***\nfor (let i = 0; i < 3; ++i) {\n  const y = model.predict(x);\n  y.print();\n  console.log(`# of tensors: ${tf.memory().numTensors}` );                 ***3***\n}\n```", "```js\nTensor\n     [[0.4286409, 0.4692867, 0.1020722],]\n# of tensors: 14\nTensor\n     [[0.4286409, 0.4692867, 0.1020722],]\n# of tensors: 15\nTensor\n     [[0.4286409, 0.4692867, 0.1020722],]\n# of tensors: 16\n```", "```js\nfor (let i = 0; i < 3; ++i) {\n  const y = model.predict(x);\n  y.print();\n  tf.dispose(y);                                          ***1***\n  console.log(`# of tensors: ${tf.memory().numTensors}` );\n}\n```", "```js\nfor (let i = 0; i < 3; ++i) {\n  tf.tidy(() => {                          ***1***\n    const y = model.predict(x);\n    y.print();\n    console.log(`# of tensors: ${tf.memory().numTensors}` );\n  });\n}\n```", "```js\nconst model = await tf.loadLayersModel(\n    'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\nconst x = tf.randomUniform([1, 4]);\nfor (let i = 0; i < 3; ++i) {\n  const winningIndex =\n           model.predict(x).argMax().dataSync()[0];\n  console.log(`winning index: ${winningIndex}`);\n  console.log(`# of tensors: ${tf.memory().numTensors}` );\n}\n```", "```js\nwinning index: 0\n# of tensors: 15\nwinning index: 0\n# of tensors: 17\nwinning index: 0\n# of tensors: 19\n```", "```js\n   const winningIndex =\n       model.predict(x).argMax().dataSync()[0];\n```", "```js\nconst model = await tf.loadLayersModel(\n    'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\nconst x = tf.randomUniform([1, 4]);\nfor (let i = 0; i < 3; ++i) {\n  tf.tidy(() => {                                                  ***1***\n    const winningIndex = model.predict(x).argMax().dataSync()[0];\n    console.log(`winning index: ${winningIndex}`);\n    console.log(`# of tensors: ${tf.memory().numTensors}` );       ***1***\n  });\n}\n```", "```js\nfunction normalize(x) {\n  const mean = x.mean();\n  const sd = x.norm(2);\n  return x.sub(mean).div(sd);\n}\n```", "```js\nfunction normalize(x) {\n  return tf.tidy(() => {\n    const mean = x.mean();\n    const sd = x.norm(2);\n    return x.sub(mean).div(sd);\n       });\n}\n```"]