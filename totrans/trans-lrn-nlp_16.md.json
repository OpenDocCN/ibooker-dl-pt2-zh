["```py\nimport tensorflow as tf                                                   ❶\n\ntf.compat.v1.disable_eager_execution()                                    ❷\n\nx = tf.compat.v1.placeholder(tf.float32, name = \"x\")                      ❸\ny = tf.compat.v1.placeholder(tf.float32, name = \"y\")\n\nz = tf.multiply(x, y) # Define vector product graph\ngradient = tf.gradients(z,[x, y],grad_ys=tf.eye(2))                       ❹\n\nwith tf.compat.v1.Session() as session:                                   ❺\n    z = session.run(z, feed_dict={x: [[1., 1.]], y: [[5.], [5.]]})        ❻\n    zG = session.run(gradient,feed_dict={x: [[1.,1.]], y: [[5.],[5.]]})   ❼\n\nprint(\"Product:\")                                                         ❽\nprint(z)                       \nprint(\"\\n\\n\")                  \nprint(\"Gradient of Product:\")  \nprint(zG)                      \nprint(\"\\n\\n\")                  \n```", "```py\nProduct:\n[[5\\. 5.]\n [5\\. 5.]]\n\nGradient of Product:\n[array([[5., 5.]], dtype=float32), array([[1.],\n       [1.]], dtype=float32)]\n```", "```py\nimport tensorflow as tf\n\nx = tf.convert_to_tensor([[1., 1.]])            ❶\ny = tf.convert_to_tensor([[5.], [5.]])          ❷\n\nwith tf.GradientTape() as g:                    ❸\n    g.watch(x)\n    z = tf.multiply(x, y)\n    dz_dx = g.gradient(z, x, output_gradients=tf.eye(2))\n\nwith tf.GradientTape() as g:                    ❹\n    g.watch(y)\n    z = tf.multiply(x, y)\n    dz_dy = g.gradient(z, y, output_gradients=tf.eye(2))\n\nprint(\"Dot Product:\")                           ❺\nprint(z)\nprint(\"\\n\\n\")\nprint(\"Gradient of Product (dz_dx):\")\nprint(dz_dx)\nprint(\"\\n\\n\")\nprint(\"Gradient of Product (dz_dy):\")\nprint(dz_dy)\n```", "```py\nimport torch                                                               ❶\nfrom torch.autograd import grad                                            ❷\nimport numpy as np # tensors will be built from numpy arrays\n\nx = torch.from_numpy(np.array([[1., 1.]]))                                 ❸\ny = torch.from_numpy(np.array([[5.], [5.]]))                               ❹\n\nx.requires_grad = True                                                     ❺\ny.requires_grad = True\n\nz = torch.mul(x, y)                                                        ❻\n\nzGx = grad(outputs=z, inputs=x,grad_outputs=torch.eye(2),retain_graph=True)❼\nzGy = grad(outputs=z, inputs=y,grad_outputs=torch.eye(2))                  ❽\n\nprint(\"Dot Product\")                                                       ❾\nprint(z)\nprint(\"Gradient of Product(dz_dx)\")\nprint(zGx)\nprint(\"\\n\\n\")\nprint(\"Gradient of Product (dz_dy):\")\nprint(zGy)\n```"]