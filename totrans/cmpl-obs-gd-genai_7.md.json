["```py\nwget <url>\n```", "```py\npandoc -o tesla_10k.pdf --pdf-engine=xelatex tesla_10k.md\n```", "```py\npip install langchain[all]\npip install google-search-results\n```", "```py\npip install langchain --upgrade\n```", "```py\nos.environ['OPENAI_API_KEY'] = \"sk-xxx\"\nos.environ['SERPAPI_API_KEY'] = \"xxx\"\n\nfrom langchain.agents import AgentType, initialize_agent, load_tools\nfrom langchain.llms import OpenAI\n\n# The language model we're going to use to control the agent:\nllm = OpenAI(temperature=0)\n\n# The tools we'll give the Agent access to.\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)\n\n# Initialize an agent\nagent = initialize_agent(tools, llm, \\\n\tagent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\n\nagent.run(\"How many technology-related books has David Clinton \\\n\tpublished? What is the most common topic?\")\n```", "```py\nos.environ['OPENAI_API_KEY'] = \"sk-xxx\"\nos.environ['SERPAPI_API_KEY'] = \"xxx\"\n```", "```py\nfrom langchain.agents import AgentType, initialize_agent, load_tools\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(temperature=0)\n```", "```py\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)\n\nagent = initialize_agent(tools, llm, \\\n\tagent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\n```", "```py\nagent.run(\"How many technology-related books has David Clinton \\\n\tpublished? What is the most common topic?\")\n```", "```py\nimport os\nos.environ['OPENAI_API_KEY'] = \"sk-xxx\"\n\nfrom pydantic import BaseModel, Field\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents import Tool\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import FAISS\nfrom langchain.document_loaders import PyPDFLoader\nfrom langchain.chains import RetrievalQA\n```", "```py\nclass DocumentInput(BaseModel):\n    question: str = Field()\nllm = ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo-0613\")\n```", "```py\ntools = []\nfiles = [\n    {\n        \"name\": \"alphabet-earnings\",\n        \"path\": \"https://abc.xyz/investor/static/pdf/2023Q1\\\n           _alphabet_earnings_release.pdf\",\n    },\n    {\n        \"name\": \"Cisco-earnings\",\n        \"path\": \"https://d18rn0p25nwr6d.cloudfront.net/CIK-00\\\n           00858877/5b3c172d-f7a3-4ecb-b141-03ff7af7e068.pdf\",\n    },\n    {\n        \"name\": \"IBM-earnings\",\n        \"path\": \"https://www.ibm.com/investor/att/pdf/IBM_\\\n           Annual_Report_2022.pdf\",\n    },\n]\n```", "```py\nfor file in files:\n    loader = PyPDFLoader(file[\"path\"])\n    pages = loader.load_and_split()\n    text_splitter = CharacterTextSplitter(chunk_size=1000, \\\n       chunk_overlap=0)\n    docs = text_splitter.split_documents(pages)\n    embeddings = OpenAIEmbeddings()\n    retriever = FAISS.from_documents(docs, embeddings).as_retriever()\n\n    # Wrap retrievers in a Tool\n    tools.append(\n        Tool(\n            args_schema=DocumentInput,\n            name=file[\"name\"],\n            func=RetrievalQA.from_chain_type(llm=llm, \\\n               retriever=retriever),\n        )\n    )\n```", "```py\nllm = ChatOpenAI(\n    temperature=0,\n    model=\"gpt-3.5-turbo-0613\",\n)\n\nagent = initialize_agent(\n    agent=AgentType.OPENAI_FUNCTIONS,\n    tools=tools,\n    llm=llm,\n    verbose=True,\n)\n\nagent({\"input\": \"Based on these SEC filing documents, identify \\\n\twhich of these three companies - Alphabet, IBM, and Cisco \\\n\t- has the greatest short-term debt levels and which has the \\\n\thighest research and development costs.\"})\n```", "```py\nfrom moviepy.editor import VideoFileClip\n\n# Define the input video file path\ninput_file = \"4k-video.mp4\"\n\n# Define the output video file path\noutput_file = \"1080p-video.mp4\"\n\n# Load the video clip\nclip = VideoFileClip(input_file)\n\n# Set the target resolution to 1080p\ntarget_resolution = (1920, 1080)\n\n# Resize the video clip to the target resolution\nresized_clip = clip.resize(target_resolution)\n\n# Write the resized clip to the output file\nresized_clip.write_videofile(output_file, codec=\"libx264\", \\\n\taudio_codec=\"aac\")\n```", "```py\npip install moviepy\n```"]