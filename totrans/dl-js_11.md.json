["```js\ngit clone https://github.com/tensorflow/tfjs-examples.git\ncd tfjs-examples/mnist\nyarn && yarn watch\n```", "```js\nfunction createConvModel() {\n  const model = tf.sequential();\n\n  model.add(tf.layers.conv2d({                                       ***1***\n    inputShape: [IMAGE_H, IMAGE_W, 1],                               ***1***\n    kernelSize: 3,                                                   ***1***\n    filters: 16,                                                     ***1***\n    activation: 'relu'                                               ***1***\n  }));                                                               ***1***\n  model.add(tf.layers.maxPooling2d({                                 ***2***\n    poolSize: 2,                                                     ***2***\n      strides: 2                                                     ***2***\n  }));                                                               ***2***\n\n  model.add(tf.layers.conv2d({                                       ***3***\n    kernelSize: 3, filters: 32, activation: 'relu'}));               ***3***\n  model.add(tf.layers.maxPooling2d({poolSize: 2, strides: 2}));\n\n  model.add(tf.layers.flatten());                                    ***4***\n  model.add(tf.layers.dense({\n    units: 64,\n    activation:'relu'\n  }));\n  model.add(tf.layers.dense({units: 10, activation: 'softmax'}));    ***5***\n  model.summary();                                                   ***6***\n  return model;\n}\n```", "```js\nmodel.add(tf.layers.maxPooling2d({poolSize: 2, strides: 2}));\n```", "```js\nmodel.add(tf.layers.conv2d(\n    {kernelSize: 3, filters: 32, activation: 'relu'}));\nmodel.add(tf.layers.maxPooling2d({poolSize: 2, strides: 2}));\n```", "```js\nmodel.add(tf.layers.flatten());\n```", "```js\n   model.add(tf.layers.dense({units: 64, activation: 'relu'}));\n   model.add(tf.layers.dense({units: 10, activation: 'softmax'}));\n```", "```js\n  const optimizer = 'rmsprop';\n  model.compile({\n    optimizer,\n    loss: 'categoricalCrossentropy',\n    metrics: ['accuracy']\n  });\n\n  const batchSize = 320;\n  const validationSplit = 0.15;\n  await model.fit(trainData.xs, trainData.labels, {\n    batchSize,\n    validationSplit,\n    epochs: trainEpochs,\n    callbacks: {\n      onBatchEnd: async (batch, logs) => {     ***1***\n        trainBatchCount++;\n        ui.logStatus(\n            `Training... (` +\n            `${(trainBatchCount / totalNumBatches * 100).toFixed(1)}%` +\n            ` complete). To stop training, refresh or close page.`);\n        ui.plotLoss(trainBatchCount, logs.loss, 'train');\n        ui.plotAccuracy(trainBatchCount, logs.acc, 'train');\n      },\n      onEpochEnd: async (epoch, logs) => {\n        valAcc = logs.val_acc;\n        ui.plotLoss(trainBatchCount, logs.val_loss, 'validation');\n        ui.plotAccuracy(trainBatchCount, logs.val_acc, 'validation');\n      }\n    }\n  });\n\n  const testResult = model.evaluate(\n      testData.xs, testData.labels);           ***2***\n```", "```js\n function createDenseModel() {\n  const model = tf.sequential();\n  model.add(tf.layers.flatten({inputShape: [IMAGE_H, IMAGE_W, 1]}));\n  model.add(tf.layers.dense({units: 42, activation: 'relu'}));\n  model.add(tf.layers.dense({units: 10, activation: 'softmax'}));\n  model.summary();\n  return model;\n}\n```", "```js\n_________________________________________________________________\nLayer (type)                 Output shape              Param #\n=================================================================\nflatten_Flatten1 (Flatten)   [null,784]                0\n_________________________________________________________________\ndense_Dense1 (Dense)         [null,42]                 32970\n_________________________________________________________________\ndense_Dense2 (Dense)         [null,10]                 430\n=================================================================\nTotal params: 33400\nTrainable params: 33400\nNon-trainable params: 0\n_________________________________________________________________\n```", "```js\nlet x = tf.tensor4d(imageDataArray, [1, 28, 28, 1]);\n```", "```js\nlet x = tf.tensor4d(imageDataArray, [numImages, 28, 28, 1]);\n```", "```js\n<img id=\"my-image\" src=\"foo.jpg\"></img>\n```", "```js\nlet x = tf.browser.fromPixels(\n         document.getElementById('my-image')).asType('float32');\n```", "```js\nx = tf.image.resizeBilinear(x, [newHeight, newWidth]);\n```", "```js\nx = x.expandDims();\n```", "```js\nx = x.div(255);\n```", "```js\n  const testExamples = 100;\n  const examples = data.getTestData(testExamples);\n\n  tf.tidy(() => {                                    ***1***\n    const output = model.predict(examples.xs);\n\n    const axis = 1;\n    const labels = Array.from(examples.labels.argMax(axis).dataSync());\n    const predictions = Array.from(\n        output.argMax(axis).dataSync());             ***2***\n\n    ui.showTestResults(examples, predictions, labels);\n  });\n```", "```js\nconst axis = 1;\nconst labels = Array.from(examples.labels.argMax(axis).dataSync());\n```", "```js\ngit clone https://github.com/tensorflow/tfjs-examples.git\ncd tfjs-examples/mnist-node\n```", "```js\nnode main.js\n```", "```js\n    require('@tensorflow/tfjs-node');\n    ```", "```js\n    require('@tensorflow/tfjs-node-gpu');\n    ```", "```js\n    node main.js\n    ```", "```js\nconst model = tf.sequential();\nmodel.add(tf.layers.conv2d({\n  inputShape: [28, 28, 1],\n  filters: 32,\n  kernelSize: 3,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.conv2d({\n  filters: 32,\n  kernelSize: 3,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.maxPooling2d({poolSize: [2, 2]}));\nmodel.add(tf.layers.conv2d({\n  filters: 64,\n  kernelSize: 3,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.conv2d({\n  filters: 64,\n  kernelSize: 3,\n  activation: 'relu',\n}));\nmodel.add(tf.layers.maxPooling2d({poolSize: [2, 2]}));\nmodel.add(tf.layers.flatten());\nmodel.add(tf.layers.dropout({rate: 0.25}));                    ***1***\nmodel.add(tf.layers.dense({units: 512, activation: 'relu'}));\nmodel.add(tf.layers.dropout({rate: 0.5}));\nmodel.add(tf.layers.dense({units: 10, activation: 'softmax'}));\n\nmodel.summary();\nmodel.compile({\n  optimizer: 'rmsprop',\n  loss: 'categoricalCrossentropy',\n  metrics: ['accuracy'],\n});\n```", "```js\n_________________________________________________________________\nLayer (type)                 Output shape              Param #\n=================================================================\nconv2d_Conv2D1 (Conv2D)      [null,26,26,32]           320\n_________________________________________________________________\nconv2d_Conv2D2 (Conv2D)      [null,24,24,32]           9248\n_________________________________________________________________\nmax_pooling2d_MaxPooling2D1  [null,12,12,32]           0\n_________________________________________________________________\nconv2d_Conv2D3 (Conv2D)      [null,10,10,64]           18496\n_________________________________________________________________\nconv2d_Conv2D4 (Conv2D)      [null,8,8,64]             36928\n_________________________________________________________________\nmax_pooling2d_MaxPooling2D2  [null,4,4,64]             0\n_________________________________________________________________\nflatten_Flatten1 (Flatten)   [null,1024]               0\n_________________________________________________________________\ndropout_Dropout1 (Dropout)   [null,1024]               0\n_________________________________________________________________\ndense_Dense1 (Dense)         [null,512]                524800\n_________________________________________________________________\ndropout_Dropout2 (Dropout)   [null,512]                0\n_________________________________________________________________\ndense_Dense2 (Dense)         [null,10]                 5130\n=================================================================\nTotal params: 594922\nTrainable params: 594922\nNon-trainable params: 0\n_________________________________________________________________\n```", "```js\n  await model.fit(trainImages, trainLabels, {\n    epochs,\n    batchSize,\n    validationSplit\n  });\n\n  const {images: testImages, labels: testLabels} = data.getTestData();\n  const evalOutput = model.evaluate                                     ***1***\n      testImages, testLabels);\n  console.log('\\nEvaluation result:');\n  console.log(\n      `  Loss = ${evalOutput[0].dataSync()[0].toFixed(3)}; `+\n      `Accuracy = ${evalOutput[1].dataSync()[0].toFixed(3)}`);\n```", "```js\n  if (modelSavePath != null) {\n    await model.save(`file://${modelSavePath}`);\n    console.log(`Saved model to path: ${modelSavePath}`);\n  }\n```", "```js\nls -lh /tmp/tfjs-node-mnist\n```", "```js\n-rw-r--r-- 1 user group 4.6K Aug 14 10:38 model.json\n     -rw-r--r-- 1 user group 2.3M Aug 14 10:38 weights.bin\n```", "```js\nconst loadedModel = await tf.loadLayersModel('file:///tmp/tfjs-node-mnist');\n```", "```js\nconst loadedModel =\n    await tf.loadLayersModel('http:///localhost/my/models/model.json');\n```", "```js\n    const loadedModel = await tf.loadLayersModel('models/model.json');\n    ```", "```js\n        const loadedModel = await tf.loadLayersModel(tf.io.browserHTTPRequest(\n          'http://foo.bar/path/to/model.json',\n          {credentials: 'include', headers: {'key_1': 'value_1'}}));\n    ```", "```js\ngit clone https://github.com/tensorflow/tfjs-models.git\ncd speech-commands/training/browser-fft\n```", "```js\nfunction createModel(inputShape: tf.Shape, numClasses: number) {\n  const model = tf.sequential();\n  model.add(tf.layers.conv2d({                                           ***1***\n    filters: 8,\n    kernelSize: [2, 8],\n    activation: 'relu',\n    inputShape\n  }));\n  model.add(tf.layers.maxPooling2d({poolSize: [2, 2], strides: [2, 2]}));\n  model.add(      tf.layers.conv2d({\n        filters: 32,\n        kernelSize: [2, 4],\n        activation: 'relu'\n      }));\n  model.add(tf.layers.maxPooling2d({poolSize: [2, 2], strides: [2, 2]}));\n  model.add(\n      tf.layers.conv2d({\n        filters: 32,\n        kernelSize: [2, 4],\n        activation: 'relu'\n      }));\n  model.add(tf.layers.maxPooling2d({poolSize: [2, 2], strides: [2, 2]}));\n  model.add(\n      tf.layers.conv2d({\n        filters: 32,\n        kernelSize: [2, 4],\n        activation: 'relu'\n      }));\n  model.add(tf.layers.maxPooling2d({poolSize: [2, 2], strides: [1, 2]}));\n  model.add(tf.layers.flatten());                                        ***2***\n  model.add(tf.layers.dropout({rate: 0.25}));                            ***3***\n  model.add(tf.layers.dense({units: 2000, activation: 'relu'}));\n  model.add(tf.layers.dropout({rate: 0.5}));\n  model.add(tf.layers.dense({units: numClasses, activation: 'softmax'}));\n\n  model.compile({                                                        ***4***\n    loss: 'categoricalCrossentropy',\n    optimizer: tf.train.sgd(0.01),\n    metrics: ['accuracy']\n  });\n  model.summary();\n  return model;\n}\n```", "```js\ncurl -fSsL https://storage.googleapis.com/learnjs-data/speech-\n     commands/speech-commands-data- v0.02-browser.tar.gz  -o speech-commands-\n     data-v0.02-browser.tar.gz &&\ntar xzvf speech-commands-data-v0.02-browser.tar.gz\n```", "```js\nyarn\nyarn train \\\n    speech-commands-data-browser/ \\\n    /tmp/speech-commands-model/\n```", "```js\n      yarn train \\\n        --gpu \\\n        speech-commands-data-browser/ \\\n        /tmp/speech-commands-model/\n```", "```js\ngit clone https://github.com/tensorflow/tfjs-models.git\ncd tfjs-models/speech-commands\nyarn && yarn publish-local\ncd demo\nyarn && yarn link-local && yarn watch\n```", "```js\nimport * as SpeechCommands from\n    '@tensorflow-models/speech-commands';               ***1***\n\nconst recognizer =\n    SpeechCommands.create('BROWSER_FFT');               ***2***\n\nconsole.log(recognizer.wordLabels());                   ***3***\n\nrecognizer.listen(result => {                           ***4***\n  let maxIndex;\n  let maxScore = -Infinity;\n  result.scores.forEach((score, i) => {                 ***5***\n    if (score > maxScore) {                             ***6***\n      maxIndex = i;\n      maxScore = score;\n    }\n  });\n  console.log(`Detected word ${recognizer.wordLabels()[maxIndex]}`);\n}, {\n  probabilityThreshold: 0.75\n});\n\nsetTimeout(() => recognizer.stopStreaming(), 10e3);     ***7***\n```"]