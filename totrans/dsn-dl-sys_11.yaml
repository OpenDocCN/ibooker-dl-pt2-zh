- en: Appendix A. A “hello world” deep learning system
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 一个“你好世界”深度学习系统
- en: This book is about teaching design principles for building a deep learning system
    that fits your own situation. But you may be wondering what a deep learning system
    even looks like. Or how, why, and when people can use a system like this in practice.
    These are all great questions at this stage.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是关于教授构建适合自己情况的深度学习系统的设计原则。但你可能会想知道一个深度学习系统看起来是什么样子。或者人们在实践中如何、为什么以及何时使用这样一个系统。这些都是现阶段很好的问题。
- en: We believe the best method for learning new ideas, skills, and approaches is
    by doing—by getting your hands on some examples and seeing what you can do with
    them. To help you, we built a mini deep learning system and a code lab for you
    to play with. Playing around in this “hello world” deep learning system should
    help you build the knowledge base for understanding the concepts and principles
    introduced in this book. To make this sample system easy to digest, we focus on
    the key components of a deep learning system, such as dataset management (DM)
    and model training and serving. The entire mini system can be set up easily on
    your local system with a bash script, and its components are discussed in detail
    in the later chapters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信学习新思想、技能和方法的最佳方法是通过实践——通过获取一些示例并看看你能做些什么。为了帮助你，我们建立了一个迷你深度学习系统和一个代码实验室供你使用。在这个“你好世界”深度学习系统中玩耍应该有助于你建立理解本书介绍的概念和原则的知识库。为了使这个示例系统易于理解，我们侧重于深度学习系统的关键组件，如数据集管理（DM）和模型训练与服务。整个迷你系统可以通过一个
    bash 脚本轻松设置在你的本地系统上，并且它的组件在后面的章节中会详细讨论。
- en: In this appendix, we will first take a tour of our sample system and then run
    the lab exercise to let you experience the most common user activities in a deep
    learning system, including dataset ingestion, model training, and model serving.
    Although our sample system is extremely simplified, it covers all the basics of
    a deep learning system. By reading this appendix, you will not only gain a practical
    understanding of how a basic deep learning system is organized and how it functions,
    but you will also have a holistic view of the sample services that are discussed
    in the rest of the book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个附录中，我们将首先参观我们的示例系统，然后进行实验室练习，让你体验深度学习系统中最常见的用户活动，包括数据集摄入、模型训练和模型服务。虽然我们的示例系统非常简化，但它涵盖了深度学习系统的所有基础知识。通过阅读这个附录，你不仅会获得一个关于基本深度学习系统是如何组织和运作的实践理解，而且还会对本书其余部分讨论的示例服务有一个全面的了解。
- en: A.1 Introducing the “hello world” deep learning system
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.1 介绍“你好世界”深度学习系统
- en: 'The quickest way to understand a software system is from the user’s perspective.
    So in this introduction section, we will first look at the users of a deep learning
    system: the personas and their responsibilities. Then we will dive into system
    design, the major components, and the user workflows.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户的角度来理解软件系统的最快方法。因此，在这个介绍部分，我们首先将看看深度学习系统的用户：人物角色及其责任。然后，我们将深入探讨系统设计、主要组件和用户工作流程。
- en: A.1.1 Personas
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.1.1 人物角色
- en: 'To keep the complexity to a minimum, our sample mini deep learning system only
    has four *personas*, or *roles*: data engineer, data scientist/researcher, system
    developer, and deep learning application developer. We pick these four roles because
    they are the minimum personnel needed to keep a deep learning system functioning.
    The role definition and job description of each persona in this “hello world”
    system are listed in the following sections.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将复杂性降到最低，我们的示例迷你深度学习系统只有四个*人物角色*，或*角色*：数据工程师、数据科学家/研究员、系统开发人员和深度学习应用程序开发人员。我们选择了这四个角色，因为它们是保持深度学习系统运行所需的最少人员。在这个“你好世界”系统中，每个角色的角色定义和工作描述在以下各节中列出。
- en: Note The role responsibilities described here are oversimplified because we
    want to concentrate on the most fundamental workflows of a deep learning system.
    For more detailed definitions of the personas and roles involved in a deep learning
    system, please refer to section 1.1.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 这里描述的角色责任是过于简化的，因为我们想集中在深度学习系统的最基本工作流程上。关于深度学习系统中涉及的人物角色和职责的更详细定义，请参阅第 1.1
    节。
- en: A.1.2 Data engineers
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.1.2 数据工程师
- en: Data engineers are responsible for collecting, processing, and storing the raw
    data for deep learning training. We have a DM service in this mini system to store
    datasets for model training. Data engineers will use this service to upload the
    raw training data. In our lab exercise, we prepared some intent classification
    datasets for you to experience this process.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据工程师负责收集、处理和存储用于深度学习训练的原始数据。在这个小系统中，我们有一个 DM 服务用于存储用于模型训练的数据集。数据工程师将使用此服务上传原始训练数据。在我们的实验中，我们准备了一些意图分类数据集，供您体验此过程。
- en: A.1.3 Data scientists/researchers
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.1.3 数据科学家/研究人员。
- en: Data scientists or researchers develop training algorithms and produce models
    that meet business requirements. They are the *customers* of the model training
    infrastructure in a deep learning system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家或研究人员开发具有满足业务要求的模型训练算法和模型。它们是深度学习系统中模型训练基础设施的“客户”。
- en: Our example system contains a training service to run model training code. In
    the lab, we prebuilt an intent classification training code for you to experience
    the model training execution.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例系统包含一个训练服务，用于运行模型训练代码。在实验中，我们为你预先构建了一个意图分类训练代码，以体验模型训练执行。
- en: A.1.4 System developer
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.1.4 系统开发人员。
- en: System developers build the entire deep learning system and maintain it to make
    sure all the machine learning activities are functioning well. Their activities
    include dataset uploading, model training, and model serving.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 系统开发人员构建整个深度学习系统并维护它，以确保所有的机器学习活动都正常运行。他们的活动包括数据集上传、模型训练和模型服务。
- en: A.1.5 Deep learning application developers
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.1.5 深度学习应用开发人员。
- en: Deep learning application developers utilize deep learning models to build commercial
    products, such as chatbots, self-driving software, and facial recognition mobile
    apps. These applications are the most important customers of any deep learning
    system because they create the business impact (revenue) for the models produced
    by the system. In our lab, you will have the opportunity to imagine yourself as
    a chatbot customer by running a script to send requests to the prediction service
    and categorize your message.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习应用开发人员利用深度学习模型构建商业产品，如聊天机器人、自动驾驶软件和人脸识别移动应用程序。这些应用程序是任何深度学习系统的最重要的客户，因为它们为系统产生的模型创造业务影响（收入）。在我们的实验中，你将有机会想象自己是聊天机器人的客户，通过运行脚本向预测服务发送请求并分类你的消息。
- en: A.1.6 Sample system overview
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.1.6 样例系统概述。
- en: 'Our mini deep learning system consists of four services and one storage system:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的小型深度学习系统由四个服务和一个存储系统组成：
- en: '*Data service*—Designed for storing and fetching dataset'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据服务* — 用于存储和获取数据集。'
- en: '*Model training service*—Designed for running model training code'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*模型训练服务* - 用于运行模型训练代码。'
- en: '*Metadata store service*—Designed for storing model metadata, such as model
    name, model version, and model algorithm'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*元数据存储服务* — 用于存储模型元数据，如模型名称、模型版本和模型算法。'
- en: '*Prediction service*—Designed to execute models to process customer’s prediction
    requests'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*预测服务* — 设计用于执行模型以处理客户的预测请求。'
- en: '*MinIO storage*—Designed to run on your local computer as an object storage
    similar to Amazon S3'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*MinIO 存储* — 旨在在您的本地计算机上运行，作为与 Amazon S3 类似的对象存储。'
- en: Almost all these services have their own chapters in this book, so we will be
    able to study them in more detail. For now, we just want to provide you with the
    high-level overview you’ll need to comprehend the user scenarios and lab exercises
    later in the book. Figure A.1 illustrates the major components of the sample system
    (the four services and the storage system) along with their interdependencies.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有这些服务在本书中都有自己的章节，因此我们将能够更详细地研究它们。现在，我们只想提供你需要理解后面的用户场景和实验的高级概述。图 A.1 说明了样例系统（四个服务和存储系统）的主要组成部分及其相互依赖关系。
- en: '![](../Images/A-1.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/A-1.png)'
- en: Figure A.1 The design overview of the sample deep learning system
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A.1 所示是样例深度学习系统的设计概述。
- en: 'Along with the four services and storage (in rectangular boxes), you’ll notice
    lots of directed arrows between these boxes. These arrows show the interdependencies
    of the services inside the sample system. Here are the explanations for these
    dependencies:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了四个服务和存储（用矩形框表示），你会注意到这些框之间有很多有向箭头。这些箭头显示了样例系统内部服务的相互依赖关系。以下是这些依赖关系的解释：
- en: The DM service saves the dataset to MinIO storage.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DM 服务将数据集保存到 MinIO 存储中。
- en: The model training service queries DM to prepare the training dataset and obtain
    the training data.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型训练服务查询DM以准备训练数据集并获取训练数据。
- en: The model training service downloads training data from MinIO.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型训练服务从MinIO下载训练数据。
- en: The model training service saves model files to MinIO.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型训练服务将模型文件保存到MinIO。
- en: The model training service saves model metadata to the metadata store service.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型训练服务将模型元数据保存到元数据存储服务中。
- en: The prediction service queries the metadata store to determine which model to
    use.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预测服务查询元数据存储以确定使用哪个模型。
- en: The prediction service downloads model files from MinIO to serve the prediction
    request.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预测服务从MinIO下载模型文件以提供预测请求。
- en: A.1.7 User workflows
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.1.7 用户工作流程
- en: Now that we have introduced the personas and the main services, let’s look at
    the user workflows. Figure A.2 illustrates the user workflow for each persona.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经介绍了人物角色和主要服务，让我们来看看用户工作流程。图A.2展示了每个角色的用户工作流程。
- en: '![](../Images/A-2.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/A-2.png)'
- en: Figure A.2 Four different workflows are enabled in the system for DM, training,
    serving, and system maintenance.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图A.2中的系统实现了DM、训练、服务和系统维护四种不同的工作流程。
- en: 'Figure A.2 shows each persona using the mini deep learning system to perform
    its own task by utilizing the services introduced in figure A.1\. Let’s review
    each of these workflows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '图A.2显示了每个角色使用迷你深度学习系统来执行自己的任务，利用图A.1中介绍的服务。让我们回顾一下每个工作流程:'
- en: '*Scenario A*—Data engineers call the DM service to upload raw data; DM ingests
    the data and saves it to MinIO storage in a training dataset format.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景A* ——数据工程师调用DM服务上传原始数据; DM将数据摄取并保存到MinIO存储中的训练数据集格式中。'
- en: '*Scenario B*—Data scientists first write the training code and then submit
    a training request to the training service. The training service executes the
    training code and produces the model. It then saves model metadata to the metadata
    store and saves model files to MinIO storage.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景B* ——数据科学家首先编写训练代码，然后提交训练请求给训练服务。训练服务执行训练代码并生成模型。然后，它将模型元数据保存到元数据存储中，并将模型文件保存到MinIO存储中。'
- en: '*Scenario C*—Application developers build applications to call the prediction
    service to consume the model trained in scenario B.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景C* ——应用程序开发人员构建应用程序，调用预测服务来使用在场景B中训练的模型。'
- en: '*Scenario D*—System developers build and maintain this system.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景D* ——系统开发人员构建和维护此系统。'
- en: A.2 Lab demo
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.2 实验演示
- en: Now it’s time for you to start learning by doing. In this lab exercise, you
    will engage in the user scenarios mentioned in section A.1.3 on your local computer.
    To make this exercise more vivid, we introduced some characters so you will not
    only know how to work with a deep learning system but also understand who handles
    each different job. The fictitious characters include Ivan, a data scientist;
    Feng, a data engineer; Tang, a system developer; and Johanna, an application developer.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是你开始学习的时候了。在这个实验练习中，你将在本地计算机上参与到A.1.3节中提到的用户场景中。为了使这个练习更生动，我们介绍了一些角色，这样你不仅会知道如何使用深度学习系统，还会了解谁负责处理每个不同的工作。虚构的角色包括伊万(一名数据科学家)、风(一名数据工程师)、唐(一名系统开发人员)和约翰娜(一名应用程序开发人员)。
- en: A.2.1 Demo steps
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.2.1 演示步骤
- en: 'In this demo scenario, we will have Tang, Feng, Ivan, and Johanna work together
    to train an intent classification model and use the model to classify arbitrary
    text messages. This scenario simulates the four fundamental steps of a typical
    model development workflow: system setup, dataset building, model training, and
    model serving.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示场景中，我们将有唐、风、伊万和约翰娜四个人一起合作，训练一个意图分类模型，并使用该模型对任意文本消息进行分类。这个场景模拟了一个典型模型开发工作流程的四个基本步骤:系统设置、数据集构建、模型训练和模型服务。
- en: To make the lab easy to run, we Dockerized all the microservices and built shell
    scripts to automate the lab setup and demo scenarios. By following the instructions
    in the README file ([https://github.com/orca3/MiniAutoML#lab](https://github.com/orca3/MiniAutoML#lab))
    at our GitHub repo ([https://github.com/orca3/MiniAutoML](https://github.com/orca3/MiniAutoML)),
    you can complete the lab by running four shell scripts.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使实验易于运行，我们将所有微服务进行了Docker化，并构建了shell脚本来自动化实验设置和演示场景。通过按照我们GitHub仓库中README文件([https://github.com/orca3/MiniAutoML#lab](https://github.com/orca3/MiniAutoML#lab))中的说明，运行四个shell脚本，你可以完成实验。
- en: Note You can find the lab demo scripts in the scripts folder ([https://github.com/orca3/MiniAutoML/tree/main/scripts](https://github.com/orca3/MiniAutoML/tree/main/scripts))
    at our GitHub repo ([https://github.com/orca3/MiniAutoML](https://github.com/orca3/MiniAutoML)).
    The scripts folder contains the demo scripts for the entire book. The files starting
    with *lab-* are used in this demo—for example, the `lab-001-start-all.sh` ([http://mng.bz/zmv1](http://mng.bz/zmv1))
    can be set up on your local system. In the case of future updates, and to execute
    the lab scripts successfully, please always refer to the instructions in the GitHub
    repo.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：你可以在 [https://github.com/orca3/MiniAutoML/tree/main/scripts](https://github.com/orca3/MiniAutoML/tree/main/scripts)
    的 scripts 文件夹中找到实验演示脚本。该文件夹包含了整本书的演示脚本。以 *lab-* 开头的文件用于此演示，例如 `lab-001-start-all.sh`（地址：[http://mng.bz/zmv1](http://mng.bz/zmv1)）可在本地系统上设置。对于未来的更新和成功执行实验脚本，请始终参考
    GitHub 仓库中的说明。
- en: '*Step 1 is the system setup.* Run `scripts/lab-001-start-all.sh` ([http://mng.bz/zmv1](http://mng.bz/zmv1)).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*第一步是系统设置*。运行 `scripts/lab-001-start-all.sh` ([http://mng.bz/zmv1](http://mng.bz/zmv1))。'
- en: Tang (system developer) lights up the mini deep learning system by running the
    `scripts/lab-001-start-all.sh` script. The script will download the prebuilt Docker
    images of the demo services and execute them.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 唐（系统开发者）通过运行 `scripts/lab-001-start-all.sh` 脚本启动迷你深度学习系统。该脚本将下载演示服务的预构建 Docker
    镜像并执行它们。
- en: 'When the script finishes, the mini deep learning system is up and running.
    You can use the following command to list all the local running Docker containers
    to verify that all the services are running:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本执行完毕后，迷你深度学习系统已经启动并运行。你可以使用以下命令列出所有本地正在运行的 Docker 容器，以验证所有服务都在运行：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Docker containers required to run the lab are provided in the following
    listing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了用于运行实验的 Docker 容器，见下式。
- en: Listing A.1 Verifying all system components are running
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 附录 A.1 确认所有系统组件都在运行
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once Tang verifies that all the microservices are running, the system is ready
    to use. He informs Ivan and Feng to start their work.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 唐确认所有微服务都在运行后，系统已准备好供使用。他通知伊凡和冯开始他们的工作。
- en: note If you read the `lab-001-start-all.sh`, you will find that most of the
    services—such as data management and model training—in the system (except predictors)
    are packaged into one Docker image (`orca3/services`). This is not a recommended
    pattern for production use cases, but it fits our demo needs here since it uses
    less disk space and it’s simple to execute.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果你阅读过 `lab-001-start-all.sh` 脚本，你会发现系统中大多数服务（除了预测器）—例如数据管理和模型训练—都被打包到一个
    Docker 镜像中（`orca3/services`）。这不是一个推荐的生产用例模式，但由于使用的磁盘空间较少且执行简单，它适用于我们的演示需求。
- en: '*Step 2 is building a training dataset.* Run `scripts/lab-002-upload-data.sh`
    ([http://mng.bz/0yqJ](http://mng.bz/0yqJ)).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*第二步是构建训练数据集*。运行 `scripts/lab-002-upload-data.sh` ([http://mng.bz/0yqJ](http://mng.bz/0yqJ))。'
- en: Feng (data engineer) first downloads raw data from the internet and applies
    some modifications for training (see `scripts/prepare_data.py` at [http://mng.bz/KlKX](http://mng.bz/KlKX)).
    Feng then uploads the processed data to the DM service. Once the dataset upload
    completes, DM returns a unique dataset ID for future reference.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 冯（数据工程师）首先从互联网上下载原始数据，并进行一些训练的修改（参见 `scripts/prepare_data.py`，地址：[http://mng.bz/KlKX](http://mng.bz/KlKX)）。然后，冯将处理后的数据上传到
    DM 服务。数据集上传完成后，DM 服务会返回一个唯一的数据集 ID，以供将来参考。
- en: We automated Feng’s work in the `scripts/lab-002-upload-data.sh` script. After
    executing this script, a dataset is created. You can see a JSON object being printed
    out by the DM service in your terminal. This JSON object presents the metadata
    of a dataset; see the following example.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将冯的工作自动化在 `scripts/lab-002-upload-data.sh` 脚本中。执行完此脚本后，将创建一个数据集。你可以在终端中看到
    DM 服务打印出一个 JSON 对象。此 JSON 对象表示数据集的元数据，请参考以下示例。
- en: Listing A.2 A sample dataset metadata in DM service
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 附录 A.2 DM 服务中的样本数据集元数据
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: ❶ Dataset identifier
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 数据集标识符
- en: ❷ Dataset name
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 数据集名称
- en: ❸ Dataset type
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 数据集类型
- en: ❹ Dataset audit history
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ 数据集审核历史记录
- en: Dataset metadata is discussed in detail in chapter 2\. For now, we can ignore
    most attributes of the metadata JSON object and only pay attention to the `dataset_id`
    attribute. *Dataset ID* is a unique identifier for a dataset; you need to pass
    this ID to the training service for model training in step 3\. Once the dataset
    is ready, Feng informs Ivan to start model training with `dataset_id="1"`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集元数据在第 2 章中有详细讨论。现在，我们可以忽略元数据 JSON 对象的大部分属性，只关注`dataset_id`属性。*数据集 ID*是数据集的唯一标识符；你需要在第
    3 步将此 ID 传递给训练服务以进行模型训练。一旦数据集准备好，Feng 就会通知 Ivan 使用`dataset_id="1"`开始模型训练。
- en: '*Step 3 is model training.* Run `scripts/lab-003-first-training.sh` ([http://mng.bz/vnra](http://mng.bz/vnra)).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 3 是模型训练。*运行`scripts/lab-003-first-training.sh`（[http://mng.bz/vnra](http://mng.bz/vnra)）。'
- en: Ivan (the data scientist) first builds the intent classification training code
    (`training-code/text-classification` at [https://github.com/orca3/MiniAutoML/tree/main/training-code/text-classification](https://github.com/orca3/MiniAutoML/tree/main/training-code/text-classification))
    and packages it into a Docker image ([http://mng.bz/WA5g](http://mng.bz/WA5g)).
    Next, Ivan submits a training request to the model training service to create
    a model training job. In the training request, he specifies which dataset (dataset
    ID) and training algorithm (Docker image name) to use in training.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Ivan（数据科学家）首先构建意图分类训练代码（`training-code/text-classification`位于[https://github.com/orca3/MiniAutoML/tree/main/training-code/text-classification](https://github.com/orca3/MiniAutoML/tree/main/training-code/text-classification)）并将其打包成
    Docker 镜像（[http://mng.bz/WA5g](http://mng.bz/WA5g)）。接下来，Ivan 向模型训练服务提交训练请求以创建模型训练作业。在训练请求中，他指定了在训练中使用的数据集（数据集
    ID）和训练算法（Docker 镜像名称）。
- en: note In this lab, we use a hardcoded dataset ID `"1"`. To test other datasets,
    please feel free to set any other dataset ID into the training request.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 在本实验中，我们使用了硬编码的数据集 ID `"1"`。要测试其他数据集，请随意将任何其他数据集 ID 设置为训练请求中。
- en: Once the training service receives the training request, it will launch a Docker
    container to run the intent classification training code provided by Ivan. In
    our demo, the Docker image is `orca3/intent-classification` ([http://mng.bz/WA5g](http://mng.bz/WA5g)).
    See code listing A.3 for a sample gRPC training request. Please run the lab script
    (`scripts/lab-003-first-training.sh` at [http://mng.bz/916j](http://mng.bz/916j))
    to kick off a model training job, which sets up the dependencies and parameters.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦训练服务接收到训练请求，它将启动一个 Docker 容器来运行 Ivan 提供的意图分类训练代码。在我们的演示中，Docker 镜像是`orca3/intent-classification`（[http://mng.bz/WA5g](http://mng.bz/WA5g)）。请运行实验脚本（`scripts/lab-003-first-training.sh`位于[http://mng.bz/916j](http://mng.bz/916j)）来启动模型训练作业，该脚本设置了依赖项和参数。
- en: Listing A.3 Submitting a training job to a training service
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 A.3 向训练服务提交训练作业
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ❶ Training the Docker image name
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 训练 Docker 镜像名称
- en: ❷ The ID of the dataset to train
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 要训练的数据集的 ID
- en: ❸ Dataset version
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 数据集版本
- en: ❹ Training hyperparameters
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ 训练超参数
- en: Once the training job starts, the training service will keep monitoring the
    training execution status and return a job ID for tracking purposes. With the
    job ID, Ivan can fetch the latest training job status and training metadata by
    querying the `GetTrainingStatus` API of the training service and the `GetRunStatus`
    API of the metastore service. See the sample query requests as follows.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦训练作业开始，训练服务将持续监视训练执行状态并返回作业 ID 以便跟踪。有了作业 ID，Ivan 可以通过查询训练服务的`GetTrainingStatus`API和元数据存储服务的`GetRunStatus`API获取最新的训练作业状态和训练元数据。查看示例查询请求如下。
- en: Listing A.4 Querying the model training job status and model metadata
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 A.4 查询模型训练作业状态和模型元数据
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ❶ Model ID, also the training job ID
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 模型 ID，也是训练作业 ID
- en: 'The training service can return training execution status in real time; see
    the sample response as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 训练服务可以实时返回训练执行状态；查看示例响应如下：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ❶ Training completes
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 训练完成
- en: 'Because the training Docker container reports real-time metrics, such as training
    accuracy, to the metadata store during training execution, the metadata store
    service can return real-time training metrics. See the sample model training metrics
    from the metadata store service as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于训练 Docker 容器在训练执行期间向元数据存储报告实时指标，如训练准确性，因此元数据存储服务可以返回实时训练指标。查看来自元数据存储服务的示例模型训练指标如下：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ❶ Training status
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 训练状态
- en: ❷ The last message from the training container
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 训练容器的最后一条消息
- en: ❸ The training job ID, as well as the model ID
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 训练作业 ID，以及模型 ID
- en: ❹ The dataset identifier
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ 数据集标识符
- en: ❺ Training metric per epoch
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ❺ 每个时期的训练度量
- en: After training is completed, Ivan informs Johanna that the model is ready to
    consume. In our lab, he passes the model ID (job ID = `"1"`) to Johanna so she
    knows which model to use.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 训练完成后，Ivan 通知 Johanna 模型已经准备好使用。在我们的实验室中，他将模型 ID（作业 ID = `"1"`）传递给 Johanna，以便她知道要使用哪个模型。
- en: Note All the API requests described in code listings A.3 and A.4 are automated
    in `scripts/lab-003-first-training.sh`; you can execute them in one go. In chapters
    3 and 4, we discuss in detail how the training service works.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，代码清单 A.3 和 A.4 中描述的所有 API 请求都在 `scripts/lab-003-first-training.sh` 中自动执行；您可以一次性执行它们。在第
    3 章和第 4 章中，我们会详细讨论训练服务的工作原理。
- en: '*Step 4 is model serving.* Run `scripts/lab-004-model-serving.sh` ([http://mng.bz/815K](http://mng.bz/815K)).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 4 是模型服务。* 运行 `scripts/lab-004-model-serving.sh`（[http://mng.bz/815K](http://mng.bz/815K)）。'
- en: Johanna (application developer) is building a chatbot, so she wants to consume
    the newly trained intent classification model to categorize customers’ questions.
    When Ivan tells Johanna that the model is ready to use, Johanna sends a prediction
    request to the prediction service to test the newly trained model.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Johanna（应用程序开发人员）正在构建一个聊天机器人，所以她想要使用新训练的意图分类模型来对客户的问题进行分类。当 Ivan 告诉 Johanna
    模型已经准备好使用时，Johanna 向预测服务发送一个预测请求来测试新训练的模型。
- en: In the prediction request, Johanna specifies the model ID (`runId`) and document,
    where the document is the text message that is being categorized. And the sample
    prediction service will load the model requested in the prediction request automatically.
    You can see a sample gRPC prediction request in the following listing.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在预测请求中，Johanna 指定了模型 ID（`runId`）和文档，其中文档是正在被分类的文本消息。样本预测服务将自动加载预测请求中请求的模型。您可以在以下清单中看到一个样本
    gRPC 预测请求。
- en: Listing A.5 A sample model prediction gRPC request
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 A.5 一个样本模型预测 gRPC 请求
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ❶ Model ID, as well as the training job ID
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 模型 ID，以及训练作业 ID
- en: ❷ Request body (text)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 请求体（文本）
- en: 'After executing the query (code listing A.5) or `scripts/lab-004-model-serving.sh`
    in the terminal, you will see output—a predicted category (label) from the intent
    classification model for the given text—from the model serving service as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中执行查询（代码清单 A.5）或 `scripts/lab-004-model-serving.sh` 后，您将会看到以下来自模型服务的输出：对于给定文本，意图分类模型预测出的类别（标签）。
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ❶ The predict category is “joy.”
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 预测的类别是“快乐”。
- en: note If you encounter any issues while trying to complete the lab, please check
    the latest instructions in the lab section ([https://github.com/orca3/MiniAutoML#lab](https://github.com/orca3/MiniAutoML#lab))
    of our GitHub repo’s README file. We aim to keep these instructions updated if
    the sample system is modified.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在完成实验过程中遇到任何问题，请查看我们 GitHub 仓库 README 文件的实验部分（[https://github.com/orca3/MiniAutoML#lab](https://github.com/orca3/MiniAutoML#lab)）中的最新说明。如果示例系统被修改，我们会尽量保持这些说明的更新。
- en: A.2.2 An exercise to do on your own
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A.2.2 一个自己完成的练习
- en: Now that we walked you through a completed model development cycle, it’s homework
    time. Imagine after a successful chatbot release, Johanna’s chatbot service needs
    to support a new category, *optimism*. This new requirement means the current
    intent classification model needs to be retrained to recognize the optimism type
    of text messages.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经向您展示了一个完成的模型开发周期，现在是作业时间。想象一下，在成功发布聊天机器人之后，Johanna 的聊天机器人服务需要支持一个新类别，*乐观*。这个新需求意味着当前的意图分类模型需要重新训练以识别乐观类型的文本消息。
- en: Feng and Ivan need to work together to build a new intent classification model.
    Feng needs to collect more training data with the “optimism” label and add it
    to the current dataset. Although Ivan doesn’t need to change the training code,
    he does need to trigger a training job in the training service with the updated
    dataset to build a new model.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Feng 和 Ivan 需要共同合作建立一个新的意图分类模型。Feng 需要收集更多带有“乐观”标签的训练数据并将其添加到当前数据集中。虽然 Ivan
    不需要更改训练代码，但他确实需要使用更新的数据集触发训练服务中的训练作业来构建一个新模型。
- en: By following the sample queries and scripts in section A.2.1, you should be
    able to complete the tasks for Feng and Ivan. If you want to check your results
    or get help completing these tasks, you can find our solution in the `scripts/lab-005-second-training.sh`
    file. We encourage you to experiment—or play—with this problem yourself before
    checking our solution.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按照第 A.2.1 节中的示例查询和脚本，您应该能够完成 Feng 和 Ivan 的任务。如果您想要检查您的结果或者在完成这些任务时需要帮助，您可以在
    `scripts/lab-005-second-training.sh` 文件中找到我们的解决方案。我们鼓励您在检查我们的解决方案之前尝试或者玩弄这个问题。
