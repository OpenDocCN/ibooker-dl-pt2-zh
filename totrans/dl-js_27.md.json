["```js\n> const myScalar = tf.scalar(2018);[[1](#app02fn1)]\n> myScalar.print();\nTensor\n    2018\n> myScalar.dtype;\n\"float32\"\n> myScalar.shape;\n[]\n> myScalar.rank;\n0\n```", "```js\n> const myIntegerScalar = tf.scalar(2018, 'int32');\n> myIntegerScalar.dtype;\n\"int32\"\n```", "```js\n> arr = await myScalar.data();\nFloat32Array [2018]\n> arr.length\n1\n> arr[0]\n2018\n```", "```js\n> arr = myScalar.dataSync();\nFloat32Array [2018]\n> arr.length\n1\n> arr[0]\n2018\n```", "```js\n> const myVector = tf.tensor1d([-1.2, 0, 19, 78]);\n> myVector.shape;\n[4]\n> myVector.rank;\n1\n> await  myVector.data();\nFloat32Array(4) [-1.2, 0, 19, 78]\n```", "```js\n> await myVector.data()\nFloat32Array(4) [-1.2000000476837158, 0, 19, 78]\n```", "```js\n> myVector.dataSync()\nFloat32Array(4) [-1.2000000476837158, 0, 19, 78]\n```", "```js\n> [await myVector.data()][2]\n19\n```", "```js\n> const myMatrix = tf.tensor2d([[1, 2, 3], [40, 50, 60]]);\n> myMatrix.shape;\n[2, 3]\n> myMatrix.rank;\n2\n```", "```js\n> await myMatrix.data();\nFloat32Array(6) [1, 2, 3, 40, 50, 60]\n```", "```js\n> (await myMatrix.data())[1 * 3 + 1];\n50\n```", "```js\n> JSON.stringify(await myMatrix.array())\n \"[[1,2,3],[40,50,60]]\"\n```", "```js\n> (await myMatrix.array())[1][1]\n 50\n```", "```js\n> const myMatrix = tf.tensor2d([1, 2, 3, 40, 50, 60], [2, 3]);\n> myMatrix.shape;\n[2, 3]\n> myMatrix.rank;\n2\n```", "```js\n> const myRank3Tensor = tf.tensor3d([[[1, 2, 3],\n                                      [4, 5, 6]],\n                                      [[10, 20, 30],\n                                      [40, 50, 60]]]);\n> myRank3Tensor.shape;\n[2, 2, 3]\n> myRank3Tensor.rank;\n3\n```", "```js\n> const anotherRank3Tensor = tf.tensor3d(\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    [2, 2, 3]);\n```", "```js\n> anotherRank3Tensor = tf.tensor(\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    [2, 2, 3]);\n> anotherRank3Tensor.shape;\n[2, 2, 3]\n> anotherRank3Tensor.rank;\n3\n\n> tinyRank6Tensor = tf.tensor([13], [1, 1, 1, 1, 1, 1]);\n> tinyRank6Tensor.shape;\n[1, 1, 1, 1, 1, 1]\n> tinyRank6Tensor.rank;\n6\n```", "```js\n[[1, 0, 0, 0, 0],\n [0, 2, 0, 0, 0],\n [0, 0, 3, 0, 0],\n [0, 0, 0, 4, 0],\n [0, 0, 0, 0, 5]]\n```", "```js\nconst n = 5;\nconst matrixArray = [];\nfor (let i = 0; i < 5; ++i) {\n  const row = [];\n  for (let j = 0; j < 5; ++j) {\n    row.push(j === i ? i + 1 : 0);\n  }\n  matrixArray.push(row);\n}\n```", "```js\n> const matrix = tf.tensor2d(matrixArray);\n```", "```js\nconst buffer = tf.tensorBuffer([5, 5]);   ***1***\nfor (let i = 0; i < 5; ++i) {\n  buffer.set(i +  1, i, i);               ***2***\n}\nconst matrix = buffer.toTensor();         ***3***\n```", "```js\n> const x = tf.zeros([2, 3, 3]);\n> x.print();\nTensor\n    [[[0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0]],\n      [[0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0]]]\n```", "```js\n> const y = tf.zerosLike(x);\n```", "```js\n> const y = tf.zeros(x.shape, x.dtype);\n```", "```js\n> const x = tf.randomNormal([2, 3]);\n> x.print():\nTensor\n    [[-0.2772508, 0.63506  , 0.3080665],\n     [0.7655841 , 2.5264773, 1.142776 ]]\n```", "```js\n> const x = tf.randomNormal([2, 3], -20, 0.6);\n> x.print();\nTensor\n    [[-19.0392246, -21.2259483, -21.2892818],\n     [-20.6935596, -20.3722878, -20.1997948]]\n```", "```js\n> const x = tf.randomUniform([3, 3]);\n> x.print();\nTensor\n    [[0.8303654, 0.3996494, 0.3808384],\n     [0.0751046, 0.4425731, 0.2357403],\n     [0.4682371, 0.0980235, 0.7004037]]\n```", "```js\n> const x = tf.randomUniform([3, 3], -10, 10);\n```", "```js\n> x.print();\nTensor\n    [[-7.4774652, -4.3274679, 5.5345411 ],\n     [-6.767087 , -3.8834026, -3.2619202],\n     [-8.0232048, 7.0986223 , -1.3350322]]\n```", "```js\n> const x = tf.randomUniform([10], 0, 100, 'int32');\n> x.print();\nTensor\n    [92, 16, 65, 60, 62, 16, 77, 24, 2, 66]\n```"]