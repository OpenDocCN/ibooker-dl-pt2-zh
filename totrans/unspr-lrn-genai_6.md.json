["```py\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import MDS\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```", "```py\nraw_data = load_iris()\ndataset = raw_data.data\n```", "```py\nd_scaler = MinMaxScaler()\ndataset_scaled = d_scaler.fit_transform(dataset)\n```", "```py\nmds_output = MDS(3,random_state=5)\n```", "```py\ndata_3d = mds_output.fit_transform(dataset_scaled)\n```", "```py\nmds_colors = ['purple','blue', 'yellow']\nfor i in np.unique(raw_data.target):\n  d_subset = data_3d[raw_data.target == i]\n\n  x = [row[0] for row in d_subset]\n  y = [row[1] for row in d_subset]\n  plt.scatter(x,y,c=mds_colors[i],label=raw_data.target_names[i])\nplt.legend()\nplt.show()\n```", "```py\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import MDS\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```", "```py\ndata_dummy_cities = {'A':[0,40,50,30,40],\n          'B':[40,0,40,50,20],\n          'C':[50,40,0,20,50],\n          'D':[30,50,20,0,20],\n          'E':[40,20,50,20,0],\n          }\ncities_dataframe = pd.DataFrame(data_dummy_cities, index =['A','B','C','D','E'])\ncities_dataframe\n```", "```py\nscaler = MinMaxScaler()\ndf_scaled = scaler.fit_transform(cities_dataframe) \n```", "```py\nMDS_stress = []\nfor i in range(1, 10):\n    mds = MDS(n_components=i)\n    pts = mds.fit_transform(df_scaled)\n    MDS_stress.append(mds.stress_)\n```", "```py\nplt.plot(range(1, 10), MDS_stress)\nplt.xticks(range(1, 5, 2))\nplt.title('Plot of stress')\nplt.xlabel('Number of components')\nplt.ylabel('Stress values')\nplt.show()\n```", "```py\nmds = MDS(n_components=3)\nx = mds.fit_transform(df_scaled)\ncities = ['A','B','C','D','E']\n\nplt.figure(figsize=(5,5))\nplt.scatter(x[:,0],x[:,1])\nplt.title('MDS with Sklearn')\nfor label, x, y in zip(cities, x[:, 0], x[:, 1]):\n    plt.annotate(\n        label,\n        xy = (x, y), \n        xytext = (-10, 10),\n        textcoords = 'offset points'\n    )\nplt.show()\nprint(mds.stress_)\n```", "```py\nfrom sklearn.manifold import TSNE\nfrom keras.datasets import mnist\nfrom sklearn.datasets import load_iris\nfrom numpy import reshape\nimport seaborn as sns\nimport pandas as pd\n```", "```py\niris = load_iris()\niris_data = iris.data\niris_target = iris.target\niris.feature_names\niris.target_names\n```", "```py\ntsne = TSNE(n_components=2, verbose=1, random_state=5)\nfitted_data = tsne.fit_transform(iris_data)\n```", "```py\niris_df = pd.DataFrame()\niris_df[\"iris_target\"] = iris_target\niris_df[\"tSNE_first_component\"] = fitted_data[:,0]\niris_df[\"tSNE_second_component\"] = fitted_data[:,1]\n\nsns.scatterplot(x=\"tSNE_first_component\", y=\"tSNE_second_component\", hue=iris_df.iris_target.tolist(),\n                palette=sns.color_palette(\"hls\", 3),\n                data=iris_df).set(title=\"Iris data tSNE projection\")\n```", "```py\n(digit, digit_label), (_ , _) = mnist.load_data()\ndigit = reshape(digit, [digit.shape[0], digit.shape[1]*digit.shape[2]])\nStep 2: the subsequent steps are exactly same to the last example we used. \ntsne_MNIST = TSNE(n_components=2, verbose=1, random_state=5)\nfitted_data = tsne_MNIST.fit_transform(digit)\n\nmnist_df = pd.DataFrame()\nmnist_df[\"digit_label\"] = digit_label\nmnist_df[\"tSNE_first_component\"] = fitted_data[:,0]\nmnist_df[\"tSNE_second_component\"] = fitted_data[:,1]\n\nsns.scatterplot(x=\"tSNE_first_component\", y=\"tSNE_second_component\", hue=mnist_df.digit_label.tolist(),\n                palette=sns.color_palette(\"hls\", 10),\n                data=mnist_df).set(title=\"MNIST data T-SNE projection\")\n```"]