["```py\nimport pandas as pd                                   ❶\nimport numpy as np                                    ❷\ndf = \\                                                ❸\n       pd.DataFrame([{\"mpg\": 18, \"model year\": 1971, \"weight\": 3139},\n                    {\"mpg\": 13, \"model year\": 1975, \"weight\": 3169},\n                    {\"mpg\": 25.5, \"model year\": 1977, \"weight\": 2755},\n                    {\"mpg\": 23.6, \"model year\": 1980, \"weight\": 2905},\n                    {\"mpg\": 27, \"model year\": 1982, \"weight\": 2790}])\nprint(df.to_string(index=False))                      ❹\n```", "```py\ndf[ df['weight'] == 2905 ]['mpg'].values\n```", "```py\narray([23.6])\n```", "```py\nfrom sklearn.linear_model import LinearRegression       ❶\nmodel = LinearRegression()                              ❷\nmodel = \\                                               ❸\n       model.fit(df['weight'].values.reshape(len(df), 1), df['mpg'].values)\n```", "```py\nmodel.predict( np.array(3_000).reshape(1, 1) )[0]     ❶\n```", "```py\n20.03370792\n```", "```py\nds = \\                                            ❶\n  np.array([[ model.predict(np.array(weight).reshape(1, 1))[0], weight] \\\n       for weight in [2_500, 3_000, 3_500] ])\n\ndf = \\                                            ❷\n       pd.DataFrame(data=ds, columns=['mpg_est', 'weight'])\n\nprint(df.to_string(index=False))                  ❸\n```", "```py\ndf = pd.DataFrame([{\"y\": 18,  \"X\": 3139},           ❶\n                   {\"y\": 13, \"X\": 3169},\n                   {\"y\": 25.5, \"X\": 2755},\n                   {\"y\": 23.6, \"X\": 2905},\n                   {\"y\": 27, \"X\": 2790}])\n\nW = np.array([0.007])[:, None]                      ❷\n\ndf['y_est'] = df[['X']] @ W                         ❸\n\ndf['error'] = df['y'] - df['y_est']                 ❹\ndf['squared_error'] = df['error'] ** 2              ❺\n\ndf[['squared_error', 'error', 'y_est', 'y', 'X']]   ❻\n```", "```py\ndf['squared_error'].mean()\n```", "```py\n80.71\n```", "```py\nX = df.X.values                           ❶\ny = df.y.values                           ❷\n\nW = \\\n  np.linalg.inv( np.array(X.T @ X,        ❸\n                     dtype = np.float,\n                     ndmin = 2) )\n                @ np.array( X.T @ y,      ❹\n                     dtype = np.float,\n                     ndmin = 2)\nW\n```", "```py\narray([[0.00713444]])\n```", "```py\nnp.mean((df['y'] - df['y'].mean()) ** 2)\n```", "```py\n27.03\n```", "```py\ndef xe_loss(y, y_est):\n  return -np.sum( y * np.log( y_est ) )\n\nprint( xe_loss ( np.array([1., 0.]),\n                     np.array([.6, .4]) ) )       ❶\nprint( xe_loss ( np.array([1., 0.]),\n                     np.array([.5, .5]) ) )       ❷\nprint( xe_loss ( np.array([0., 1.]),\n                     np.array([.6, .4]) ) )       ❸\nprint( xe_loss ( np.array([0., 1.]),\n                     np.array([.99, .01]) ))      ❹\n```", "```py\n0.5108256237659907\n0.6931471805599453\n0.916290731874155\n4.605170185988091\n```", "```py\nimport pandas as pd\n\ndf = \\                                                               ❶\n  pd.DataFrame([{\"model year\": 1971, \"mpg\": 18,  \"weight\": 3139},\n                    {\"model year\": 1975, \"mpg\": 13, \"weight\": 3169},\n                    {\"model year\": 1977, \"mpg\": 25.5,  \"weight\": 2755},\n                    { \"model year\": 1980, \"mpg\": 23.6, \"weight\": 2905},\n                    {\"model year\": 1982, \"mpg\": 27,  \"weight\": 2790}])\n\nenc_df = \\                                                           ❷\n       pd.get_dummies(df['model year'], prefix='le', sparse=False)\nprint(enc_df.to_string(index=False))                                 ❸\n```", "```py\nle_1971  le_1975  le_1977  le_1980  le_1982\n       1        0        0        0        0\n       0        1        0        0        0\n       0        0        1        0        0\n       0        0        0        1        0\n       0        0        0        0        1\n```", "```py\npd.cut(df['model year'], bins=[1969, 1979, 1989])\n```", "```py\n0    (1969, 1979]\n1    (1969, 1979]\n2    (1969, 1979]\n3    (1979, 1989]\n4    (1979, 1989]\nName: model year, dtype: category\nCategories (2, interval[int64]): [(1969, 1979] < (1979, 1989]]\n```", "```py\nenc_df = pd.get_dummies(pd.cut(df['model year'], bins=[1969, 1979, 1989]),\n               prefix='le', sparse=False)\nprint(enc_df.to_string(index = False))\n```", "```py\nle_(1969, 1979]  le_(1979, 1989]\n               1                0\n               1                0\n               1                0\n               0                1\n               0                1\n```", "```py\nenc_df = pd.get_dummies(pd.cut(df['model year'], bins=[1969, 1979, 1989]),\n               prefix='le', sparse=False)\n          .join(df[df.columns[1:]])\n\nprint(enc_df.to_string(index = False))\n```", "```py\nle_(1969, 1979]  le_(1979, 1989]   mpg  weight\n               1                0  18.0    3139\n               1                0  13.0    3169\n               1                0  25.5    2755\n               0                1  23.6    2905\n               0                1  27.0    2790\n```", "```py\ny_train = df[ df.columns [df.columns.str.startswith('le_') == True] ].values\nprint(y_train)\n```", "```py\narray([[1, 0],\n       [1, 0],\n       [1, 0],\n       [0, 1],\n       [0, 1]], dtype=uint8)\n```", "```py\nX_train = df [['mpg', 'weight']].values\nprint(X_train)\n```", "```py\narray([[  18\\. , 3139\\. ],\n       [  13\\. , 3169\\. ],\n       [  25.5, 2755\\. ],\n       [  23.6, 2905\\. ],\n       [  27\\. , 2790\\. ]])\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(solver='liblinear')\nmodel.fit(X_train, y_train.argmax(axis = 1))\n```", "```py\ndef cross_entropy_loss(y, y_est):\n  xe = -np.sum(y * np.log (y_est))\n  return xe\n\ncross_entropy_loss(y_train, model.predict_proba(X_train))\n```", "```py\n2.314862688295351\n```"]