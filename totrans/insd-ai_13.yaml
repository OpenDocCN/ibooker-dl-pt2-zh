- en: appendix B Algorithms and programming languages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 B 算法和编程语言
- en: This appendix lays the foundation for understanding the concept of AI and introduces
    two key principles, algorithms and programming languages, which are vital components
    in both computer science and AI development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录奠定了理解 AI 概念的基础，并介绍了两个关键原则，即算法和编程语言，它们是计算机科学和 AI 发展的重要组成部分。
- en: B.1 Algorithms
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B.1 算法
- en: Computer programs are a set of instructions expressed in a form that is executable
    by the machine. Mainly, computer programs can be classified as either operating
    systems or applications. Operating systems manage the computer’s internal functions,
    while applications allow computer users to do things like play a video game or
    type a document. Both operating systems and applications use algorithms to define
    their logic and to describe the steps that need to be followed by the computer
    if it is to carry out particular tasks. As such, algorithms lie at the heart of
    computer science.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序是以可执行的形式表达的一组指令。主要地，计算机程序可以分类为操作系统或应用程序。操作系统管理计算机的内部功能，而应用程序允许计算机用户做诸如玩视频游戏或打字文档的事情。操作系统和应用程序都使用算法来定义它们的逻辑，并描述计算机执行特定任务时需要遵循的步骤。因此，算法是计算机科学的核心。
- en: The word *algorithm* is the Latinization of the name of Persian mathematician
    Al-Khwarizmi, who wrote *The Compendious Book on Calculation by Completion and
    Balancing* between 813 and 833 ce. The only remaining copy of this historic work
    is kept at Oxford University, and in it, Al-Khwarizmi presents step-by-step processes
    for solving various types of problems. For example, he was the first to formally
    introduce methods like the quadratic formula for solving second-degree equations
    of the form ax2 + bx + c = 0\.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*算法* 一词是波斯数学家 Al-Khwarizmi 的名字的拉丁化，他在公元 813 年至 833 年间写了《通过补充和平衡进行计算的简明书》。这本历史性的著作的唯一剩余副本保存在牛津大学，Al-Khwarizmi
    在其中介绍了解决各种类型问题的逐步过程。例如，他是第一个正式引入像二次方程解 ax2 + bx + c = 0 这种类型问题的方法的人。'
- en: An algorithm is to the functioning of a computer what a recipe is to cooking.
    To create the desired result, we must define, in advance, a specific set of operations
    to be applied in a fixed order. An algorithm enables a computer to repeat long
    sequences of logical operations tirelessly and accurately as long as its logic
    and inputs are correct. Creating one generally involves breaking down the problem-solving
    process into discrete steps. Designing an algorithm requires understanding the
    structure of a problem, the properties required of a solution, the possible inputs,
    and the desired outputs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 算法对计算机的运行方式就像食谱对烹饪的作用一样重要。为了创建所需的结果，我们必须预先定义一组特定的操作，以固定的顺序应用。算法使计算机能够无疲倦地、准确地重复长序列的逻辑操作，只要它的逻辑和输入是正确的。创建算法通常涉及将问题解决过程分解为离散步骤。设计算法需要理解问题的结构、解决方案所需的属性、可能的输入和期望的输出。
- en: One approach to creating and implementing algorithms begins with using flowcharts
    to outline a solution’s logic. Figure B.1 shows one of the flowcharts I filed
    in a patent related to filtering electronic information according to a thesaurus-based
    contextual analysis of the content.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个创建和实现算法的方法是从使用流程图来勾勒解决方案的逻辑开始。图 B.1 显示了我在与根据内容的词汇表进行的语境分析相关的专利中提交的一个流程图之一。
- en: '![figure](../Images/B-1.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![figure](../Images/B-1.png)'
- en: Figure B.1 An example of a flowchart that depicts the various steps within an
    algorithm
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图 B.1 显示了一个流程图的示例，描述了算法中的各个步骤。
- en: As we all know, the internet has revolutionized how information is disseminated
    and shared. At any given time, massive amounts of digital data are exchanged electronically
    by millions of individuals worldwide with many diverse backgrounds and personalities,
    including children, students, educators, businesspeople, and government officials.
    While this information may be easily distributed to anyone with access to a computer
    or the web, it may contain objectionable and offensive material not appropriate
    to all users. In particular, adult or violent online content may not be appropriate
    for children.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，互联网已经彻底改变了信息传播和共享的方式。在任何给定时间，全球数百万人，包括儿童、学生、教育工作者、商人和政府官员，通过电子方式交换大量的数字数据，他们有各种不同的背景和个性。尽管这些信息可以轻松地分发给任何有电脑或网页访问权限的人，但它可能包含不适合所有用户的令人反感和冒犯的材料。特别是，成人或暴力的在线内容可能不适合儿童。
- en: We will use a context-based approach to infer the context in which the words
    are used. The context may be based on a built-in thesaurus or other techniques.
    A built-in thesaurus could be a database of words and their contexts. For example,
    the word *apple* may have as a context the word *fruit*, *New York*, or *computer*.
    We evaluate the appropriateness of particular content by calculating its pertinence
    value toward the objectionable material.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用基于上下文的方法推断单词使用的上下文。上下文可能基于内置词库或其他技术。内置词库可以是单词及其上下文的数据库。例如，单词*苹果*的上下文可能是*水果*、*纽约*或*计算机*。我们通过计算其与不良材料的相关度值来评估特定内容的适当性。
- en: Once a high-level process is laid out, modules can be devised to address specific
    tasks. Having formalized the algorithm as logic and modules, we must select the
    appropriate programming language to code it on a computer. Each module can be
    coded and tested by a different team to increase the efficiency of the implementation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了高级流程，就可以设计模块来解决特定的任务。将算法形式化为逻辑和模块后，我们必须选择适当的编程语言在计算机上编码。每个模块可以由不同的团队编写和测试，以提高实现的效率。
- en: B.2 Programming languages
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B.2 编程语言
- en: People typically communicate with other people by speaking or writing in a familiar
    language like English or French. Communication with computers, however, can require
    the use of computer programming languages. These languages involve the transfer
    of ideas via typed symbols, although, like our familiar languages, these symbols
    are combined according to grammatical, syntactic, and semantic rules. Programming
    languages are used to translate algorithms from human speech and writing to symbols
    that a computer can interpret and instructions that it can execute.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 人们通常通过口语或书面语言与其他人交流，如英语或法语。然而，与计算机的交流可能需要使用计算机编程语言。这些语言涉及通过键入的符号传递思想，尽管像我们熟悉的语言一样，这些符号根据语法、句法和语义规则组合。编程语言用于将算法从人类的言语和书写转换为计算机可以解释和执行的符号和指令。
- en: Computer programming languages are, in many ways, much simpler than human languages.
    For example, they use a very limited number of words and can only express concepts,
    such as “If this, then do this; else, do that” or “Check whether condition X holds
    and statement Y is true.” Expressing something in a programming language requires
    strictly following the rules; no deviation is permitted. Compare this strictness
    to English or French, which, even though they require words and sentences to be
    combined following syntactic and semantic rules, can be used with extreme flexibility
    to express an infinite variety of concepts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机编程语言在许多方面比人类语言简单得多。例如，它们使用非常有限的词汇量，只能表达概念，例如“如果这样，那么就这样做；否则，就那样做”或“检查条件X是否成立，并且语句Y是否为真。”使用编程语言表达某事需要严格遵循规则；不允许偏离。将这种严格性与英语或法语进行比较，尽管它们要求词语和句子遵循句法和语义规则组合，但可以以极其灵活的方式表达无限多的概念。
- en: In 1951, *The Preparation of Programs for an Electronic Digital Computer* by
    Wilkes, Wheeler, and Gill [1] became the first book ever written about computer
    programming, and it inspired the creation of many of the first languages. For
    instance, Flow-Matic, the first English-like programming language, was created
    under Grace Hopper’s leadership in the late 1950s for UNIVAC I. Describing a programming
    language with terms such as “English-like” gives a sense of how comprehensible
    a program’s code might be. For example, rather than having to type explicit instructions
    for a computer to retrieve data from a certain part of its memory and transmit
    it through a particular channel, it may be preferable to type a simple instruction
    like “print X” to accomplish the same task.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在1951年，由威尔克斯、惠勒和吉尔[1]编写的《用于电子数字计算机程序的准备》成为有史以来第一本关于计算机编程的书，它激发了许多第一代语言的创造。例如，Flow-Matic是第一种类似英语的编程语言，于20世纪50年代后期由格雷斯·霍普领导为UNIVAC
    I创建。用“类似英语”这样的术语描述编程语言，可以让人了解程序代码的可理解程度。例如，与其不得不输入明确的指令让计算机从其内存的某个部分检索数据并通过特定通道传输，不如输入一个简单的指令“打印X”来完成相同的任务。
- en: Work to make programming languages more user-friendly led to the 1959 emergence
    of the Common Business-Oriented Language (COBOL). It was designed to process business
    data and offered a natural-language style of programming. It gave importance to
    data description and introduced the notion of data structures, which are special
    formats for storing and retrieving specific types of information. COBOL also split
    the structure of a general program into parts—an identification division, an environment
    division, a data division, and a procedure division.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使编程语言更加用户友好，促使了1959年通用商业导向语言（COBOL）的出现。它被设计用于处理业务数据，并提供了自然语言风格的编程。它重视数据描述，并引入了数据结构的概念，这是存储和检索特定类型信息的特殊格式。COBOL还将一般程序的结构分为几个部分——标识部分、环境部分、数据部分和过程部分。
- en: COBOL’s influence in the programming world significantly increased when it became
    the mandatory language for U.S. Department of Defense computers. Although languages
    have evolved since then, COBOL remains a widely used programming language. According
    to Hartman [2], as of 2022, over 220 billion lines of COBOL code were still running
    on machines in federal government agencies and financial institutions. About 95
    percent of ATM swipes are processed using COBOL code, and 80 percent of each day’s
    in-person transactions are handled by a program written in COBOL.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当COBOL成为美国国防部计算机的强制性语言时，它在编程界的影响力显著增加。尽管自那时以来语言已经发展，但COBOL仍然是一种广泛使用的编程语言。根据哈特曼[2]的说法，截至2022年，超过2200亿行COBOL代码仍在联邦政府机构和金融机构的计算机上运行。大约95％的ATM刷卡交易使用COBOL代码处理，而每天80％的面对面交易都由COBOL编写的程序处理。
- en: Another important programming language, Fortran, was invented in the late 1950s
    by John Backus and his team. Describing his motivation, Backus wrote, “When I
    was working on the IBM 701 (an early computer), writing programs for computing
    missile trajectories, I started work on a programming system to make it easier
    to write programs” [3]. Fortran was intended to make programming accessible, and
    by and large, it did.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种重要的编程语言Fortran，是由约翰·贝克斯（John Backus）及其团队于20世纪50年代末发明的。回顾他的动机，贝克斯写道：“当我在IBM
    701上（一台早期计算机）工作，为计算导弹轨迹编写程序时，我开始着手设计一个编程系统，以使编写程序更容易”[3]。Fortran的目的是使编程变得更易于实现，而在很大程度上，它做到了。
- en: The once lengthy, difficult, and costly task of typing thousands of program
    instructions for a single problem could instead be accomplished with only several
    dozen Fortran instructions. As a result, as soon as it was commercially released
    in 1957, Fortran became the first computer language standard. It greatly helped
    modern computing by opening the field of computer science to the general population.
    Like COBOL, Fortran is still in use more than 60 years after its creation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经繁琐、困难和昂贵的为单个问题打字数千条程序指令的任务可以通过几十条Fortran指令完成。因此，自1957年商业发布以来，Fortran成为第一个计算机语言标准。它通过向普通大众开放计算机科学领域极大地帮助了现代计算。像COBOL一样，Fortran在创建后60多年仍在使用。
- en: 'In the field of AI, we need programming languages that can be used to model
    intelligent processes such as learning and reasoning. Such requirements go beyond
    the capabilities of languages designed to perform numerical computations, like
    Fortran. AI needs languages that can be used to manipulate programs and data,
    process and interpret symbols, and represent the characteristics of different
    objects and formats that arise in applications such as language processing, computer
    vision, and reasoning systems. To meet these requirements, John McCarthy designed
    Lisp in the late 1950s. He describes the objectives of the language as follows
    [4]:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在人工智能领域，我们需要用于建模学习和推理等智能过程的编程语言。这些要求超出了设计用于执行数值计算的语言的能力，例如Fortran。AI需要能够操作程序和数据、处理和解释符号，并表示在语言处理、计算机视觉和推理系统等应用中出现的不同对象和格式的特征的语言。为了满足这些要求，约翰·麦卡锡在20世纪50年代末设计了Lisp。他描述了语言的目标如下[4]：
- en: 'As a programming language, LISP is characterized by the following ideas: computing
    with symbolic expressions rather than numbers, representation of symbolic expressions
    and other information by list structure in the memory of a computer.'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为一种编程语言，LISP的特点包括以下几点：使用符号表达式而不是数字进行计算，在计算机的内存中通过列表结构表示符号表达式和其他信息。
- en: Lisp pioneered many ideas in computer science, including tree data structures,
    automatic storage management, dynamic typing, conditionals, higher-order functions,
    recursion, etc.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Lisp在计算机科学中开创了许多思想，包括树数据结构，自动存储管理，动态类型，条件，高阶函数，递归等。
- en: A source code is a set of instructions used to write a computer program using
    one of these languages, and most computer languages are either compiled or interpreted.
    The compiled languages, such as C and C++, use another software known as a compiler
    to translate the source code to object code before the program can be executed.
    The compiler converts the source code into specific machine instructions that
    can be directly executed by the microprocessor (figure B.2).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码是用于编写计算机程序的一组指令，使用其中一种语言，并且大多数计算机语言都是编译的或解释的。编译语言，如C和C ++，使用另一种称为编译器的软件在程序执行之前将源代码转换为目标代码。编译器将源代码转换为特定的机器指令，可以直接由微处理器执行（图B.2）。
- en: '![figure](../Images/B-2.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/B-2.png)'
- en: Figure B.2 Compiler implementation
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 编译器实现图 B.2
- en: The source code of interpreter languages such as Lisp can be executed directly
    without the need to be compiled (figure B.3). Therefore, applications can be developed
    much quicker. Additionally, interpreted languages are hardware agnostic as they
    can run on any architecture the interpreter supports. The disadvantage of an interpreter
    is that the same code written, for instance, in Lisp, will be an order of magnitude
    slower than code written using a compiled language such as C or C++. When an interpreter
    executes a program, it must read each line of the source code and convert it to
    machine code on the fly; in contrast, a compiled code has already been translated
    into machine code before executing the program.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 解释语言的源代码，如Lisp，可以直接执行，无需编译（图B.3）。因此，应用程序可以更快地开发。此外，解释语言与硬件无关，因为它们可以在解释器支持的任何体系结构上运行。解释器的缺点是，例如在Lisp中编写的相同代码将比使用编译语言（如C或C
    ++）编写的代码慢一个数量级。当解释器执行程序时，必须逐行阅读源代码并即时将其转换为机器代码；相比之下，编译代码在执行程序之前已经被翻译成机器代码。
- en: '![figure](../Images/B-3.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/B-3.png)'
- en: Figure B.3 Interpreter implementation
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 解释器实现图 B.3
- en: Other languages, such as Java, use a hybrid approach. A computer program is
    classified as portable if it can be executed on various types of computers. Even
    if you can compile a high-level language, such as C++, on different types of computers,
    the resulting object code can generally only be executed on one type of computer.
    A source code written in an interpreted language can be executed on any computer
    as long as it has the interpreter language installed. Java is referred to as portable
    as the source code is translated to a virtual machine code so as not to limit
    the compiler-generated code to a specific processor architecture.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 其他语言，如Java，采用混合方法。如果计算机程序可以在各种类型的计算机上执行，则将其分类为可移植的。即使可以在不同类型的计算机上编译高级语言，例如C
    ++，但由此生成的目标代码通常只能在一种类型的计算机上执行。用解释语言编写的源代码只要安装了解释器语言，就可以在任何计算机上执行。Java被称为可移植，因为源代码被转换为虚拟机代码，以便不限制编译器生成的代码到特定的处理器架构。
- en: Lisp was the first language to introduce the concept of *garbage collection*.
    This term refers to an automatic process by which memory that was once used to
    store data for a program but is no longer needed can be freed up for other uses.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Lisp是第一种引入“垃圾收集”的语言。此术语是指一种自动过程，可以释放曾用于存储程序数据但不再需要的内存，以供其他用途使用。
- en: Another widely used language is BASIC, an acronym for Beginner’s All-Purpose
    Symbolic Instruction Code. Developed in 1964 by John Kemeny and Thomas Kurtz,
    this straightforward language was, like Fortran, designed specifically for ease
    of use. Kemeney and Kurtz wanted to enable students in scientific and nonscientific
    fields alike to use computers in their work.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个广泛使用的语言是BASIC，是初学者全用途符号指令代码的首字母缩写。由约翰·凯门尼（John Kemeny）和托马斯·库尔兹（Thomas Kurtz）于1964年开发，这种简单直接的语言，与Fortran一样，专门设计用于易用性。凯门尼和库尔兹希望使科学和非科学领域的学生都能在工作中使用计算机。
- en: Before the introduction of such high-level languages as Fortran and BASIC, which
    use more conceptual, hardware-independent, human language, programming computers
    was rather difficult. Often, the only option available was the assembly language,
    which is one step away from writing a string of 1s and 0s and requires writing
    a statement for each instruction the computer must follow. In addition to being
    complex, difficult, and time-consuming, assembly code usually references specific
    aspects of the machine it’s run on, which means a program written for one computer
    probably won’t work on a different machine.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Fortran和BASIC等高级语言引入之前，编程计算机通常是相当困难的，因为这些语言更抽象，硬件独立，更贴近人类语言，使用起来更容易。通常，唯一可用的选项是汇编语言，它比直接写一串1和0稍微简单一点，需要为计算机必须遵循的每条指令编写语句。除了复杂、困难和耗时外，汇编代码通常引用计算机上的特定方面，这意味着为一台计算机编写的程序可能在另一台计算机上无法正常工作。
- en: Although each programming language can implement most algorithms, as we just
    learned, languages are usually designed for a particular niche. Some are more
    appropriate for certain applications than others. For example, COBOL is well suited
    for business data processing, Fortran is preferable for scientific applications,
    and Lisp was designed for AI. Other languages, such as C, are more suitable for
    computer systems, as they contain elements that manipulate the binary information
    stored in the machine on which the code is being run. There are also languages
    such as the Structured Query Language (SQL) for manipulating databases and R for
    data analysis. Today, there are hundreds of programming languages.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管每种编程语言都可以实现大多数算法，正如我们刚刚学到的那样，但通常情况下，编程语言都是针对特定领域设计的。有些语言适用于特定应用，而有些则不太适合。例如，COBOL非常适合用于业务数据处理，Fortran更适合用于科学应用，而Lisp则是为人工智能而设计的。还有一些语言，比如C语言，更适用于计算机系统，因为它们包含了操纵存储在计算机上的二进制信息的元素。还有一些语言，比如结构化查询语言（SQL）用于操作数据库，R语言用于数据分析。如今，有数以百计的编程语言。
- en: 'In case you haven’t seen computer code before, an example follows. The program
    is written in the C programming language, and running it would make the computer
    print “How are you?” on the screen. This text would be converted by a program
    called a *compiler* into assembly code, which would then be processed as instructions
    and executed by the computer:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前没见过计算机代码，下面是一个示例。该程序是用C编程语言编写的，运行它将使计算机在屏幕上打印“你好吗？”。这段文本将被一个名为*编译器*的程序转换成汇编代码，然后被计算机处理为指令并执行：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
