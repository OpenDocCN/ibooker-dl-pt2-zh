["```js\nconst f = x => tf.atan(x);\n```", "```js\nconst df = tf.grad(f);\n```", "```js\nconst x = tf.tensor([-4, -2, 0, 2, 4]);\ndf(x).print();\n```", "```js\nTensor\n    [0.0588235, 0.2, 1, 0.2, 0.0588235]\n```", "```js\nconst h = (x, y) => x.mul(y);\n```", "```js\nconst dh = tf.grads(h);\nconst dhValues = dh([tf.tensor1d([1, 2]), tf.tensor1d([-1, -2])]);\ndhValues[0].print();\ndhValues[1].print();\n```", "```js\nTensor\n    [-1, -2]\nTensor\n    [1, 2]\n```", "```js\nconst vdh = tf.valueAndGrads(h);\nconst out = vdh([tf.tensor1d([1, 2]), tf.tensor1d([-1, -2])]);\n```", "```js\nout.value.print();\nout.grads[0].print();\nout.grads[1].print();\n\nTensor\n    [-1, -4]\nTensor\n    [-1, -2]\nTensor\n    [1, 2]\n```", "```js\nconst trainable = true;\nconst a = tf.variable(tf.tensor1d([3, 4]), trainable, 'a');\nconst b = tf.variable(tf.tensor1d([5, 6]), trainable, 'b');\nconst x = tf.tensor1d([1, 2]);\n\nconst f = () => a.mul(x.square()).add(b.mul(x)).sum();     ***1***\nconst {value, grads} = tf.variableGrads(f);\n```", "```js\ngrads.a.print();\ngrads.b.print();\n```", "```js\nTensor\n    [1, 4]\nTensor\n    [1, 2]\n```"]