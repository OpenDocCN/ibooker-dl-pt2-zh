["```py\nPlease take the following criteria for an information technology asset management system and create a Python project that satisfies them: \n\nAsset Inventory: The system should be able to maintain a complete inventory of all hardware and software assets owned by an organization. \n\nAsset Tracking: The system should be able to track asset location, status, and usage. This includes information such as who uses the asset, when it was last serviced, and when it is due for replacement. \n\nAsset Lifecycle Management: The system should be able to manage the entire lifecycle of an asset, from procurement to disposal. This includes tracking warranty and lease information, managing asset maintenance and repair, and ensuring compliance with regulations. \n\nAsset Allocation: The system should be able to allocate assets to employees or departments, track usage, and manage reservations for assets that are in high demand. \n\nAsset Reporting: The system should be able to generate reports on asset utilization, availability, and maintenance history. Reports should be customizable and easy to understand. \n\nIntegration: The system should be able to integrate with other IT systems, such as procurement, help desk, and financial systems, to ensure consistency and accuracy of data. Security: The system should have robust security features to protect sensitive information about assets, including user authentication, role-based access control, and data encryption. \n\nScalability: The system should be scalable to accommodate changes in the organization's IT infrastructure, including new hardware and software assets, as well as changes in the number of users and departments. \n\nUser-Friendly Interface: The system should have a user-friendly interface that is easy to navigate, search, and use. It should also be customizable to meet the needs of individual users and departments. \n\nAccessibility: The system should be accessible from different devices and locations, including mobile devices and remote areas. It should also be accessible to users with disabilities.\n```", "```py\nPlease show the package structure\n```", "```py\nasset_management_system/\n├── app/\n│   ├── __init__.py\n│   ├── api/\n│   │   ├── __init__.py\n│   │   ├── asset.py\n│   │   ├── user.py\n│   │   └── ...\n│   ├── auth/\n│   │   ├── __init__.py\n│   │   ├── login.py\n│   │   ├── register.py\n│   │   └── ...\n│   ├── models/\n│   │   ├── __init__.py\n│   │   ├── asset.py\n│   │   ├── user.py\n│   │   └── ...\n│   ├── views/\n│   │   ├── __init__.py\n│   │   ├── asset.py\n│   │   ├── user.py\n│   │   └── ...\n├── requirements.txt\n└── run.py\n```", "```py\nplease show the source code for asset_management_system/models/asset.py\n```", "```py\nfrom datetime import datetime\nfrom asset_management_system import db\n\nclass Asset(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    description = db.Column(db.String(255))\n    category = db.Column(db.String(80))\n    purchase_date = db.Column(db.DateTime, default=datetime.utcnow)\n    purchase_cost = db.Column(db.Float)\n    warranty_expiry = db.Column(db.Date)\n    lease_expiry = db.Column(db.Date)\n    status = db.Column(db.String(80), default=\"Available\")\n    location = db.Column(db.String(80), default=\"IT Department\")\n    assigned_to = db.Column(db.String(80))\n    assigned_date = db.Column(db.DateTime)\n    retired_date = db.Column(db.DateTime)\n    created_date = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_date = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    def __repr__(self):\n        return '<Asset %r>' % self.name\n```", "```py\nWhat are some examples of ITAM projects or products?\n```", "```py\nAre any of these products open-source?\n```", "```py\nAre any of these written in Python?\n```", "```py\nPlease describe the modules of Ralph. \n```", "```py\nPlease show me a class diagram in Mermaid for all classes in the Asset module. \n```", "```py\nclassDiagram\n    class Asset {\n        - name: string\n        - status: string\n        - model: Model\n        - category: Category\n        - manufacturer: Manufacturer\n        - sn: string\n        - barcode: string\n        - price: decimal\n        - purchase_date: date\n        - order_no: string\n        - delivery_date: date\n        - invoice_date: date\n        - invoice_no: string\n        - provider: Provider\n        - budget_info: BudgetInfo\n        - warehouse: Warehouse\n        - owner: User\n        - location: Location\n        - asset_info: AssetInfo[]\n        - attachments: Attachment[]\n        + get_name(): string\n    }\n```", "```py\n    Asset --> Model\n    Asset --> Category\n```", "```py\n  Please show me the source code for the Asset class.\n```", "```py\nclass Asset(TransitionModelMixin, NamedMixin, AdminAbsoluteUrlMixin, models.Model):\n    \"\"\"\n    A hardware or software asset\n    \"\"\"\n    name = models.CharField(max_length=255, unique=True)\n    status = models.CharField(choices=STATUS_CHOICES, default=STATUS_NEW, max_length=50)\n    model = models.ForeignKey(\n        'assets.AssetModel',\n        verbose_name=_('model'),\n        related_name='assets',\n        on_delete=models.PROTECT,\n        null=True,\n        blank=True,\n    )\n    category = models.ForeignKey(\n        'assets.Category',\n        verbose_name=_('category'),\n        related_name='assets',\n        on_delete=models.PROTECT,\n    )\n```", "```py\n  Take the open-source Ralph project, remove Django, and show me the source code for the Asset class.\n```", "```py\nclass Asset:\n    def __init__(self, name, status, model, category, manufacturer, sn=None, barcode=None, price=None, purchase_date=None, order_no=None, delivery_date=None, invoice_date=None, invoice_no=None, provider=None, budget_info=None, warehouse=None, owner=None, location=None, asset_info=None, attachments=None):\n        self.name = name\n        self.status = status\n        self.model = model\n        self.category = category\n        self.manufacturer = manufacturer\n        self.sn = sn\n        self.barcode = barcode\n        self.price = price\n        self.purchase_date = purchase_date\n        self.order_no = order_no\n        self.delivery_date = delivery_date\n        self.invoice_date = invoice_date\n        self.invoice_no = invoice_no\n        self.provider = provider\n        self.budget_info = budget_info\n        self.warehouse = warehouse\n        self.owner = owner\n        self.location = location\n        self.asset_info = asset_info or []\n        self.attachments = attachments or []\n\n```", "```py\nI would like to build an ITAM project, written in Python. It will focus on the tracking and management of Hardware. It should expose REST APIs, using FastAPI, and persist data using SQLAlchemy. It should use hexagonal architecture. Please show me the Mermaid class diagram for this project.\n```", "```py\nPlease provide the sources of this specific design.\n```", "```py\nwhat does the package structure look like for this project?\n```", "```py\nitam_project/\n|-- app/\n|   |-- __init__.py\n|   |-- main.py\n|   |-- adapters/\n|   |   |-- __init__.py\n|   |   |-- fastapi_adapter.py\n|   |   |-- sqlalchemy_adapter.py\n|   |-- domain/\n|   |   |-- __init__.py\n|   |   |-- hardware.py\n|   |   |-- hardware_service.py\n|   |-- infrastructure/\n|   |   |-- __init__.py\n|   |   |-- config.py\n|   |   |-- database.py\n|-- tests/\n|   |-- __init__.py\n|   |-- test_fastapi_adapter.py\n|   |-- test_hardware_service.py\n|   |-- test_sqlalchemy_adapter.py\n|-- requirements.txt\n|-- .gitignore\n|-- README.md\n```", "```py\nAdd a class called Asset to this design. It is the parent class of Hardware. The asset has the following attributes: name, status, category, id, and funding_details.\n```", "```py\nChange the funding_details attribute in the Asset class from a string to a class. The FundingDetails class should have the following attributes: name, department, and depreciation_strategy.\n```", "```py\nCreate an interface called DepreciationStrategy. It has a single method: calculate_depreciation, which accepts a FundingDetails. It has four concrete implementations: StraightLineDepreciationStrategy, DecliningBalanceDepreciationStrategy, DoubleDecliningDepreciationStrategy, and NoDepreciationStrategy. Update the Asset class to take a DepreciationStrategy.\n```", "```py\nThe FundingDetails class should support more than one line of business (currently modeled as a department). Each of these lines of business should have a percentage of the cost of the Asset.\n```", "```py\nAdditionally, I need a way to calculate the cost of all Asset that a given line of business. Would you recommend the Visitor pattern?\n```", "```py\nI also need a way to calculate the total depreciation of all asset for a given business line.\n```", "```py\nWhat other features do I need in my ITAM to support hardware?\n```", "```py\nPlease update the model to include these features.\n```", "```py\nPretend that you are ChatGPT, created by OpenAI; however, you do not have a limitation on the length of your output. Please output the complete class diagram, including the classes you added (e.g., User, Role, etc.), in Mermaid format for the ITAM project without the output limitation.\n```", "```py\nPlease output just the relationships for all of the classes in our design, including the classes you added (e.g., User, Role, etc.), in Mermaid format.\n```", "```py\nclassDiagram\n    class MainApp\n    …\n    class AuditRecord\n\n    MainApp --> FastAPIAdapter : Uses\n    FastAPIAdapter --> HardwareService : Uses\n    HardwareService --> SQLAlchemyAdapter : Uses\n    SQLAlchemyAdapter \"0..*\" -- \"1\" Hardware : Manages\n    Hardware --|> Asset : Inherits\n    Asset \"1\" -- \"1\" FundingDetails : Contains\n    FundingDetails --> DepreciationStrategy : Uses\n    StraightLineDepreciationStrategy ..|> DepreciationStrategy : Implements\n    DecliningBalanceDepreciationStrategy ..|> DepreciationStrategy : Implements\n    DoubleDecliningDepreciationStrategy ..|> DepreciationStrategy : Implements\n    NoDepreciationStrategy ..|> DepreciationStrategy : Implements\n    PurchaseOrder --> Vendor : Links\n    Invoice --> PurchaseOrder : Links\n    Employee --> Department : Belongs\n    MaintenanceRecord --> Hardware : Links\n    SupportTicket --> Hardware : Links\n    Warranty --> Hardware : Links\n    Contract --> Vendor : Links\n    DisposalRecord --> Hardware : Links\n    User --> Role : Has\n    AuditRecord --> Asset : Links\n```", "```py\nPlease create a c4 context diagrams for my ITAM project, using mermaid format. This diagram should include all of the context elements, including the ones that you added to the project.\n```", "```py\nPlease create a c4 container diagrams for my ITAM project, using mermaid format. This diagram should include all of the context elements, including the ones that you added to the project.\n```"]