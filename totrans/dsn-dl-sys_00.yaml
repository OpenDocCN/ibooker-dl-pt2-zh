- en: front matter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: foreword
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A deep learning system can be assumed to be efficient if it can bridge two different
    worlds—research and prototyping with production operations. Teams who design such
    systems must be able to communicate with practitioners across these two worlds
    and work with the different sets of requirements and constraints that come from
    each. This requires a principled understanding of how the components in deep learning
    systems are designed and how they are expected to work in tandem. Very little
    of the existing literature covers this aspect of deep learning engineering. This
    information gap becomes an issue when junior software engineers are onboarded
    and expected to become effective deep learning engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Over the years, engineering teams have filled this void by using their acquired
    experience and ferreting out what they need to know from the literature. Their
    work has helped traditional software engineers build, design, and extend deep
    learning systems in a relatively short amount of time. So it was with great excitement
    that I learned that Chi and Donald, both of whom have led deep learning engineering
    teams, have taken the very important initiative of consolidating this knowledge
    and sharing it in the form of a book.
  prefs: []
  type: TYPE_NORMAL
- en: We are long overdue for a comprehensive book on building systems that support
    bringing deep learning from research and prototyping to production. *Designing
    Deep Learning Systems* finally fills this need.
  prefs: []
  type: TYPE_NORMAL
- en: The book starts with a high-level introduction describing what a deep learning
    system is and does. Subsequent chapters discuss each system component in detail
    and provide motivation and insights about the pros and cons of various design
    choices. Each chapter ends with an analysis that helps readers assess the most
    appropriate and relevant options for their own use cases. The authors conclude
    with an in-depth discussion, pulling from all previous chapters, on the challenging
    path of going from research and prototyping to production. And to help engineers
    put all these ideas into practice, they have created a sample deep learning system,
    with fully functional code, to illustrate core concepts and offer a taste to those
    who are just entering the field.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, readers will find this book easy to read and navigate while bringing
    their understanding of how to orchestrate, design, and implement deep learning
    systems to a whole new level. Practitioners at all levels of expertise who are
    interested in designing effective deep learning systems will appreciate this book
    as an invaluable resource and reference. They will read it once to get the big
    picture and then return to it again and again when building their systems, designing
    their components, and making crucial choices to satisfy all the teams that use
    the systems.
  prefs: []
  type: TYPE_NORMAL
- en: —Silvio Savarese, EVP, Chief Scientist, Salesforce
  prefs: []
  type: TYPE_NORMAL
- en: —Caiming Xiong, VP, Salesforce
  prefs: []
  type: TYPE_NORMAL
- en: preface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A little more than a decade ago, we had the privilege of building some early
    end user–facing product features that were powered by artificial intelligence.
    It was a huge undertaking. Collecting and organizing data that would be fit for
    model training was not a usual practice at that time. Few machine learning algorithms
    were packaged as ready-to-use libraries. Performing experiments required running
    management manually and building out custom workflows and visualizations. Custom
    servers were made to serve each type of model. Outside of resource-intensive tech
    companies, almost every single new AI-powered product feature was built from scratch.
    It was a far-reaching dream that intelligent applications would one day become
    a commodity.
  prefs: []
  type: TYPE_NORMAL
- en: After working with a few AI applications, we realized that we had been repeating
    a similar ritual each time, and it seemed to us that it made more sense to design
    a systematic way, with prototyping, for delivering AI product features to production.
    The fruit of this effort was PredictionIO, an open source suite of framework software
    that put together state-of-the-art software components for data collection and
    retrieval, model training, and model serving. Fully customizable through its APIs
    and deployable as services with just a few commands, it helped shorten the time
    required at every stage, from running data science experiments to training and
    deploying production-ready models. We were thrilled to learn that developers around
    the world were able to use PredictionIO to make their own AI-powered applications,
    resulting in some amazing boosts to their businesses. PredictionIO was later acquired
    by Salesforce to tackle a similar problem on an even larger scale.
  prefs: []
  type: TYPE_NORMAL
- en: By the time we decided to write this book, the industry was thriving with a
    healthy AI software ecosystem. Many algorithms and tools have become available
    to tackle different use cases. Some cloud vendors such as Amazon, Google, and
    Microsoft even provide complete, hosted systems that make it possible for teams
    to collaborate on experimentation, prototyping, and production deployments at
    one centralized location. No matter what your goal is, you now have many choices
    and numerous ways to put them together.
  prefs: []
  type: TYPE_NORMAL
- en: Still, as we work with teams to deliver deep learning–powered product features,
    there have been some recurring questions. Why is our deep learning system designed
    the way it is? Is this the best design for other specific use cases? We noticed
    that junior software engineers were the ones most often asking these questions,
    and we interviewed a few of them to find out why. They revealed that their conventional
    software engineering training did not prepare them to work effectively with deep
    learning systems. And when they looked for learning resources, they found only
    scant and scattered information on specific system components, with hardly any
    resources discussing the fundamentals of the software components, why they were
    put together the way they were, and how they worked together to form a complete
    system.
  prefs: []
  type: TYPE_NORMAL
- en: To address this problem, we started building a knowledge base, which eventually
    evolved into manual-like learning material explaining the design principles of
    each system component, the pros and cons of the design decisions, and the rationale
    from both technical and product perspectives. We were told that our material helped
    to quickly ramp up new teammates and allowed traditional software engineers with
    no prior experience in building deep learning systems to get up to speed. We decided
    to share this learning material with a much larger audience, in the form of a
    book. We contacted Manning, and the rest was history.
  prefs: []
  type: TYPE_NORMAL
- en: acknowledgments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writing a book indeed takes a lot of solitary effort, but this book would not
    have been possible without the help of the following individuals.
  prefs: []
  type: TYPE_NORMAL
- en: Working with different teams at the Salesforce Einstein groups (Einstein platform,
    E.ai, Hawking) formed the basis of a large part of this book. These brilliant
    and influential teammates include (in alphabetical order) Sara Asher, Jimmy Au,
    John Ball, Anya Bida, Gene Becker, Yateesh Bhagavan, Jackson Chung, Himay Desai,
    Mehmet Ezbiderli, Vitaly Gordon, Indira Iyer, Arpeet Kale, Sriram Krishnan, Annie
    Lange, Chan Lee, Eli Levine, Daphne Liu, Leah McGuire, Ivaylo Mihov, Richard Pack,
    Henry Saputra, Raghu Setty, Shaun Senecal, Karl Skucha, Magnus Thorne, Ted Tuttle,
    Ian Varley, Yan Yang, Marcin Zieminski, and Leo Zhu.
  prefs: []
  type: TYPE_NORMAL
- en: We also want to take this opportunity to thank our development editor, Frances
    Lefkowitz. She is not only an excellent editor who provides great writing guidance
    and inline editing but also a great mentor who guided us throughout the entire
    book-writing process. This book wouldn’t be of its current quality or completed
    as planned without her.
  prefs: []
  type: TYPE_NORMAL
- en: Our thanks go out to the Manning team for their guidance throughout the book’s
    writing process. We really appreciate the opportunity to have readers’ opinions
    in the early stages of the book’s writing through Manning Early Access Program
    (MEAP).
  prefs: []
  type: TYPE_NORMAL
- en: To all the reviewers—Alex Blanc, Amit Kumar, Ayush Tomar, Bhagvan Kommadi, Dinkar
    Juyal, Esref Durna, Gaurav Sood, Guillaume Alleon, Hammad Arshad, Jamie Shaffer,
    Japneet Singh, Jeremy Chen, João Dinis Ferreira, Katia Patkin, Keith Kim, Larry
    Cai, Maria Ana, Mikael Dautrey, Nick Decroos, Nicole Königstein, Noah Flynn, Oliver
    Korten, Omar El Malak, Pranjal Ranjan, Ravi Suresh Mashru, Said Ech-Chadi, Sandeep
    D., Sanket Sharma, Satej Kumar Sahu, Sayak Paul, Shweta Joshi, Simone Sguazza,
    Sriram Macharla, Sumit Bhattacharyya, Ursin Stauss, Vidhya Vinay, and Wei Luo—your
    suggestions helped make this a better book.
  prefs: []
  type: TYPE_NORMAL
- en: I would like to thank my wife Pei Wu for her unconditional love and tremendous
    support throughout the process of writing this book. During the tough times of
    the Covid pandemic, Pei remained a peaceful and quiet corner that allowed the
    book to be composed amid a busy family with two lovely young children—Catherine
    and Tiancheng.
  prefs: []
  type: TYPE_NORMAL
- en: Also, I would like to extend my gratitude to Yan Xue, a talented 10X developer
    who wrote nearly the entire code lab. His help makes the code lab not only high
    quality but also easy to learn. Yan’s wife, Dong, supported him wholeheartedly
    so Yan could concentrate on the book lab.
  prefs: []
  type: TYPE_NORMAL
- en: The other person I want to thank is Dianne Siebold, a talented and experienced
    tech writer at Salesforce. Dianne inspired me with her own writing experiences
    and encouraged me to begin writing.
  prefs: []
  type: TYPE_NORMAL
- en: —Chi Wang
  prefs: []
  type: TYPE_NORMAL
- en: Co-founding PredictionIO (later acquired by Salesforce) has taught me invaluable
    lessons about building open source machine learning developer products. This adventurous
    and rewarding journey would not be possible without courageous souls who placed
    immense trust in one another. They are (in alphabetical order) Kenneth Chan, Tom
    Chan, Pat Ferrel, Isabelle Lee, Paul Li, Alex Merritt, Thomas Stone, Marco Vivero,
    and Justin Yip.
  prefs: []
  type: TYPE_NORMAL
- en: Simon Chan deserves a special mention. Chan co-founded PredictionIO, and I also
    had the honor to work with and learn from him in his previous entrepreneurial
    endeavors. He was the first person who officially introduced programming to me
    when we were both attending the same secondary school (Wah Yan College, Kowloon)
    in Hong Kong. Other inspiring figures from the school include (in alphabetical
    order) Donald Chan, Jason Chan, Hamlet Chu, Kah Kuen Fu, Jeffrey Hau, Francis
    Kong, Eric Lau, Kam Lau, Raylex Lee, Kevin Lei, Danny Shing, Norman So, Steven
    Tung, and Lobo Wong.
  prefs: []
  type: TYPE_NORMAL
- en: I am extremely grateful to my parents and my brother Ronald. They provided me
    with early exposure to computers. Their perpetual support played a vital role
    in my formative years as I aspired to become a computer engineer.
  prefs: []
  type: TYPE_NORMAL
- en: My son, Spencer, is the walking proof of why biological deep neural networks
    are the most amazing things in the world. He is a wonderful gift who shows me
    every day that I can always grow and become better.
  prefs: []
  type: TYPE_NORMAL
- en: Words cannot express how much my wife, Vicky, means to me. She can always bring
    out the best in me so that I can keep moving forward during difficult moments.
    She is the best companion that I could ever ask for.
  prefs: []
  type: TYPE_NORMAL
- en: —Donald Szeto
  prefs: []
  type: TYPE_NORMAL
- en: about this book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book aims to equip engineers to design, build, or set up effective machine
    learning systems and to tailor those systems to whatever needs and situations
    they may encounter. The systems they develop will facilitate, automate, and expedite
    the development of machine learning (deep learning, in particular) projects across
    a variety of domains.
  prefs: []
  type: TYPE_NORMAL
- en: In the deep learning field, it is the models that get all the attention. Perhaps
    rightly so, when you consider that new applications developed from those models
    are coming onto the market regularly—applications that make consumers excited,
    such as human-detecting security cameras, virtual characters in internet video
    games who behave like real humans, a program that can write code to solve arbitrary
    problems posed to it, and advanced driver assistance systems that can one day
    lead to fully autonomous and self-driving cars. Within a very short period of
    time, the deep learning field is filled with immense excitement and promising
    potential waiting to be fully realized.
  prefs: []
  type: TYPE_NORMAL
- en: But the model does not act alone. To bring a product or service to fruition,
    a model needs to be situated within a system or platform (we use these terms interchangeably)
    that supports the model with various services and stores. It needs, for instance,
    an API, a dataset manager, and storage for artifacts and metadata, among others.
    So behind every team of deep learning model developers is a team of non–deep learning
    developers creating the infrastructure that holds the model and all the other
    components.
  prefs: []
  type: TYPE_NORMAL
- en: The problem we have observed in the industry is that often the developers tasked
    with designing the deep learning system and components have only a cursory knowledge
    of deep learning. They do not understand the specific requirements that deep learning
    needs from system engineering, so they tend to follow generic approaches when
    building the system. For example, they might choose to abstract out all work related
    to deep learning model development to the data scientist and only focus on automation.
    So the system they build relies on a traditional job scheduling system or business
    intelligence data analysis system, which is not optimized for how deep learning
    training jobs are run, nor for deep learning-specific data access patterns. As
    a result, the system is hard to use for model development, and model shipping
    velocity is slow. Essentially, engineers who lack a profound understanding of
    deep learning are being asked to build systems to support deep learning models.
    As a consequence, these engineering systems are inefficient and inappropriate
    for deep learning systems.
  prefs: []
  type: TYPE_NORMAL
- en: Much has been written about deep learning model development from the data scientist’s
    point of view, covering data collection and dataset augmentation, writing training
    algorithms, and the like. But very few books, or even blogs, deal with the system
    and services that support all these deep learning activities.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we discuss building and designing deep learning systems from a
    software developer perspective. The approach is to first describe a typical deep
    learning system as a whole, including its major components and how they are connected;
    then we dive deep into each of the main components in a separate chapter. We begin
    every component chapter by discussing requirements. We then introduce design principles
    and sample services/code and, finally, evaluate open source solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Because we cannot cover every existing deep learning system (vendor or open
    source), we focus on discussing requirements and design principles (with examples)
    in the book. After learning these principles, trying the book’s sample services,
    and reading our discussion of open source options, we hope readers can conduct
    their own research to find what suits them best.
  prefs: []
  type: TYPE_NORMAL
- en: Who should read this book?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The primary audience of this book is software engineers (including recently
    graduated CS students) who want to quickly transition into deep learning system
    engineering, such as those who want to work on deep learning platforms or integrate
    some AI functionality—for example, model serving—into their products.
  prefs: []
  type: TYPE_NORMAL
- en: Data scientists, researchers, managers, and anyone else who uses machine learning
    to solve real-world problems will also find this book useful. Upon understanding
    the underlying infrastructure (or system), they will be equipped to provide precise
    feedback to the engineering team for improving the efficiency of the model development
    process.
  prefs: []
  type: TYPE_NORMAL
- en: This is an engineering book, and you don’t need a background in machine learning,
    but you should be familiar with basic computer science concepts and coding tools,
    such as microservices, gRPC, and Docker, to run the lab and understand the technical
    material. No matter your background, you can still benefit from the book’s nontechnical
    material to help you better understand how machine learning and deep learning
    systems work to bring products and services from ideas into production.
  prefs: []
  type: TYPE_NORMAL
- en: By reading this book, you will be able to understand how deep learning systems
    work and how to develop each component. You will also understand when to gather
    requirements from users, translate requirements into system component design choices,
    and integrate components to create a cohesive system that helps your users quickly
    develop and deliver deep learning features.
  prefs: []
  type: TYPE_NORMAL
- en: 'How this book is organized: A roadmap'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are 10 chapters and three appendixes (including one lab appendix) in this
    book. The first chapter explains what a deep learning project development cycle
    is and what a basic deep learning system looks like. The next chapters dive into
    each functional component of the reference deep learning system. Finally, the
    last chapter discusses how models are shipped to production. The appendix contains
    a lab session to allow readers to try out the sample deep learning system.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 describes what a deep learning system is, the different stakeholders
    of the system, and how they interact with it to deliver deep learning features.
    We call this interaction the deep learning development cycle. Additionally, you
    will conceptualize a deep learning system, called a reference architecture, that
    contains all essential elements and can be adapted based on your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Chapters 2 to 9 cover each core component of the reference deep learning system
    architecture, such as dataset management service, model training service, auto
    hyperparameter optimization service, and workflow orchestration service.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10 describes how to take a final product from the research or prototyping
    stage to make it ready to be released to the public. Appendix A introduces the
    sample deep learning system and demonstrates the lab exercise, appendix B surveys
    existing solutions, and appendix C discusses Kubeflow Katib.
  prefs: []
  type: TYPE_NORMAL
- en: About the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We believe the best way to learn is by doing, practicing, and experimenting.
    To demo the design principles explained in this book and provide hands-on experience,
    we created a sample deep learning system and code lab. All the source code, set-up
    instructions, and lab scripts of the sample deep learning system are available
    on GitHub ([https://github.com/orca3/MiniAutoML](https://github.com/orca3/MiniAutoML)).
    You can also obtain executable snippets of code from the liveBook (online) version
    of this book at [https://livebook.manning.com/book/software-engineers-guide-to-deep-learning-system-design](https://livebook.manning.com/book/software-engineers-guide-to-deep-learning-system-design)
    and from the Manning website ([www.manning.com](http://www.manning.com)).
  prefs: []
  type: TYPE_NORMAL
- en: The “hello world” lab (in appendix A) contains a complete, though simplified,
    mini deep learning system with the most essential components (dataset management,
    model training and serving). We suggest you try out the “hello world” lab after
    reading the first chapter of the book or do it before trying our sample services
    in this book. This lab also provides shell scripts and links to all the resources
    you need to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the code lab, this book contains many examples of source code in numbered
    listings and in line with normal text. In both cases, the source code is formatted
    in a `fixed-width` `font` `like` `this` to separate it from ordinary text. Sometimes
    code is also **`in bold`** to highlight code that has changed from previous steps
    in the chapter, such as when a new feature adds to an existing line of code.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, the original source code has been reformatted; we’ve added line
    breaks and reworked indentation to accommodate the available page space in the
    book. In rare cases, even this was not enough, and listings include line-continuation
    markers (➥). Additionally, comments in the source code have often been removed
    from the listings when the code is described in the text. Code annotations accompany
    many of the listings, highlighting important concepts.
  prefs: []
  type: TYPE_NORMAL
- en: liveBook discussion forum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Purchase of *Designing Deep Learning Systems* includes free access to liveBook,
    Manning’s online reading platform. Using liveBook’s exclusive discussion features,
    you can attach comments to the book globally or to specific sections or paragraphs.
    It’s a snap to make notes for yourself, ask and answer technical questions, and
    receive help from the author and other users. To access the forum, go to [https://livebook.manning.com/book/software-engineers-guide-to-deep-learning-system-design](https://livebook.manning.com/book/software-engineers-guide-to-deep-learning-system-design).
    You can also learn more about Manning’s forums and the rules of conduct at [https://livebook.manning.com/discussion](https://livebook.manning.com/discussion).
  prefs: []
  type: TYPE_NORMAL
- en: Manning’s commitment to our readers is to provide a venue where a meaningful
    dialogue between individual readers and between readers and the author can take
    place. It is not a commitment to any specific amount of participation on the part
    of the author, whose contribution to the forum remains voluntary (and unpaid).
    We suggest you try asking the authors some challenging questions lest their interest
    stray! The forum and the archives of previous discussions will be accessible from
    the publisher’s website as long as the book is in print.
  prefs: []
  type: TYPE_NORMAL
- en: about the authors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/Chi_Wang.png)'
  prefs: []
  type: TYPE_IMG
- en: Chi Wang is a principal software developer in the Salesforce Einstein group,
    where he builds the deep learning platform used by millions of Salesforce customers.
    Previously, he worked at Microsoft Bing and Azure, building large-scale distributed
    systems. Chi has filed six patents, mostly related to deep learning systems, and
    recently completed Stanford’s AI graduate certificate program.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/Donald_Szeto.png)'
  prefs: []
  type: TYPE_IMG
- en: Donald Szeto was the co-founder and CTO of PredictionIO, a startup that aimed
    to help democratize and accelerate the adoption of machine learning. PredictionIO
    was acquired by Salesforce, where he continued his work on machine learning and
    deep learning systems. Donald is the founder of Aftermint, whose goal is to bridge
    Web2 and Web3\. He is also investing in, advising on, and mentoring technology
    startups.
  prefs: []
  type: TYPE_NORMAL
- en: about the cover illustration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The figure on the cover of *Designing Deep Learning Systems* is “Homme de la
    Foret Noire,” or “Man of the Black Forest,” taken from a collection by Jacques
    Grasset de Saint-Sauveur, published in 1797\. Each illustration is finely drawn
    and colored by hand.
  prefs: []
  type: TYPE_NORMAL
- en: In those days, it was easy to identify where people lived and what their trade
    or station in life was just by their dress. Manning celebrates the inventiveness
    and initiative of the computer business with book covers based on the rich diversity
    of regional culture centuries ago, brought back to life by pictures from collections
    such as this one.
  prefs: []
  type: TYPE_NORMAL
