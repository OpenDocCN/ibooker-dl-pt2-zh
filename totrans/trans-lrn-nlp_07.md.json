["```py\n!wget https:/ /www.openml.org/data/get_csv/3622/dataset_189_baseball.arff\n```", "```py\nimport pandas as pd\nraw_baseball_data = pd.read_csv('dataset_189_baseball.arff', dtype=str)   ❶\nprint(raw_baseball_data.head())\n```", "```py\n         Player Number_seasons Games_played At_bats  Runs  Hits Doubles  \\\n0    HANK_AARON             23         3298   12364  2174  3771     624   \n1   JERRY_ADAIR             13         1165    4019   378  1022     163   \n2  SPARKY_ADAMS             13         1424    5557   844  1588     249   \n3   BOBBY_ADAMS             14         1281    4019   591  1082     188   \n4    JOE_ADCOCK             17         1959    6606   823  1832     295   \n\n  Triples Home_runs  RBIs Walks Strikeouts Batting_average On_base_pct  \\\n0      98       755  2297  1402       1383           0.305       0.377   \n1      19        57   366   208        499           0.254       0.294   \n2      48         9   394   453        223           0.286       0.343   \n3      49        37   303   414        447           0.269        0.34   \n4      35       336  1122   594       1059           0.277       0.339   \n\n  Slugging_pct Fielding_ave     Position Hall_of_Fame  \n0        0.555         0.98     Outfield            1  \n1        0.347        0.985  Second_base            0  \n2        0.353        0.974  Second_base            0  \n3        0.368        0.955   Third_base            0  \n4        0.485        0.994   First_base            0  \n```", "```py\nraw_data = pd.read_csv('../input/20022018-bc-public-libraries-open-data-v182/2002-2018-bc-public-libraries-open-data-csv-v18.2.csv', dtype=str)\n```", "```py\nprint(raw_data.head())\n```", "```py\n   YEAR                           LOCATION                      LIB_NAME  \\\n0  2018  Alert Bay Public Library & Museum      Alert Bay Public Library   \n1  2018       Beaver Valley Public Library  Beaver Valley Public Library   \n2  2018        Bowen Island Public Library   Bowen Island Public Library   \n3  2018             Burnaby Public Library        Burnaby Public Library   \n4  2018          Burns Lake Public Library     Burns Lake Public Library   \n\n                     LIB_TYPE SYMBOL        Federation             lib_ils  \\\n0  Public Library Association   BABM    Island Link LF     Evergreen Sitka   \n1  Public Library Association   BFBV       Kootenay LF     Evergreen Sitka   \n2           Municipal Library    BBI      InterLINK LF     Evergreen Sitka   \n3           Municipal Library     BB      InterLINK LF  SirsiDynix Horizon   \n4  Public Library Association   BBUL  North Central LF     Evergreen Sitka   \n\n  POP_SERVED srv_pln STRAT_YR_START  ... OTH_EXP    TOT_EXP EXP_PER_CAPITA  \\\n0        954     Yes          2,013  ...    2488      24439        25.6174   \n1      4,807     Yes          2,014  ...   15232  231314.13       48.12027   \n2      3,680     Yes          2,018  ...   20709  315311.17       85.68238   \n3    232,755     Yes          2,019  ...  237939   13794902       59.26791   \n4      5,763     Yes          2,018  ...     NaN     292315       50.72271   \n\n  TRANSFERS_TO_RESERVE AMORTIZATION EXP_ELEC_EBOOK EXP_ELEC_DB  \\\n0                    0            0              0         718   \n1                11026            0        1409.23      826.82   \n2                11176        40932           2111       54.17   \n3                    0      2614627         132050           0   \n4                  NaN          NaN              0           0   \n\n  EXP_ELEC_ELEARN EXP_ELEC_STREAM EXP_ELEC_OTHER  \n0               0               0            752  \n1         1176.11               0        1310.97  \n2            3241               0              0  \n3               0               0         180376  \n4               0               0           7040  \n\n[5 rows x 235 columns]\n```", "```py\nCOLUMNS = [\"PCT_ELEC_IN_TOT_VOLS\",\"TOT_AV_VOLS\"]    ❶\nraw_library_data = raw_data[COLUMNS]\nprint(raw_library_data)\n```", "```py\n     PCT_ELEC_IN_TOT_VOLS TOT_AV_VOLS\n0                  90.42%          57\n1                  74.83%       2,778\n2                  85.55%       1,590\n3                   9.22%      83,906\n4                  66.63%       4,261\n...                   ...         ...\n1202                0.00%      35,215\n1203                0.00%     109,499\n1204                0.00%         209\n1205                0.00%      18,748\n1206                0.00%        2403\n\n[1207 rows x 2 columns]\n```", "```py\n!pip install git+https:/ /github.com/algorine/simon\n```", "```py\nfrom Simon import Simon              ❶\nfrom Simon.Encoder import Encoder    ❷\n```", "```py\n!wget https:/ /raw.githubusercontent.com/algorine/simon/master/Simon/scripts/❶pretrained_models/Base.pkl                                              ❶\n!wget https:/ /raw.githubusercontent.com/algorine/simon/master/Simon/scripts/❷pretrained_models/text-class.17-0.04.hdf5                               ❷\n```", "```py\ncheckpoint_dir = \"\"                                                    ❶\nexecution_config = \"Base.pkl\"                                          ❷\nClassifier = Simon(encoder={})                                         ❸\nconfig = Classifier.load_config(execution_config, checkpoint_dir)      ❹\nencoder = config['encoder']                                            ❺\ncheckpoint = config['checkpoint']                                      ❻\n```", "```py\nprint(checkpoint)\n```", "```py\ntext-class.17-0.04.hdf5\n```", "```py\nmax_cells = encoder.cur_max_cells\n```", "```py\nmax_len = 20 # maximum length of each tabular cell\nCategories = encoder.categories\ncategory_count = len(Categories)      ❶\nprint(encoder.categories)\n```", "```py\n['address', 'boolean', 'datetime', 'email', 'float', 'int', 'phone', 'text', 'uri']\n```", "```py\nX_baseball = encoder.encodeDataFrame(raw_baseball_data)   ❶\nprint(X_baseball.shape)                                   ❷\nprint(X_baseball[0])                                      ❸\n```", "```py\n(18, 500, 20)\n[[-1 -1 -1 ... 50 37 44]\n [-1 -1 -1 ... 54 41 46]\n [-1 -1 -1 ... 37 52 55]\n ...\n [-1 -1 -1 ... 49 45 46]\n [-1 -1 -1 ... 51 54 43]\n [-1 -1 -1 ... 38 37 43]]\n```", "```py\nX_library = encoder.encodeDataFrame(raw_library_data)\n```", "```py\nimport numpy as np\nimport pandas as pd\n\nDataTrue = pd.read_csv(\"/kaggle/input/fake-and-real-news-dataset/True.csv\")❶\nDataFake = pd.read_csv(\"/kaggle/input/fake-and-real-news-dataset/Fake.csv\")❷\n\nNsamp =1000                                                                ❸\nDataTrue = DataTrue.sample(Nsamp)\nDataFake = DataFake.sample(Nsamp)\nraw_data = pd.concat([DataTrue,DataFake], axis=0).values                   ❹\n\nraw_data = [sample[0].lower() + sample[1].lower() + sample[3].lower() for sample in raw_data]                                                   ❺\n\nCategories = ['True','False']                                              ❻\nheader = ([1]*Nsamp)\nheader.extend(([0]*Nsamp))\n```", "```py\ndef unison_shuffle(a, b):                             ❶\n    p = np.random.permutation(len(b))\n    data = np.asarray(a)[p]\n    header = np.asarray(b)[p]\n    return data, header\n\nraw_data, header = unison_shuffle(raw_data, header)   ❷\n\nidx = int(0.7*raw_data.shape[0])                      ❸\n\ntrain_x = raw_data[:idx]                              ❹\ntrain_y = header[:idx]\ntest_x = raw_data[idx:]                               ❺\ntest_y = header[idx:]\n```"]