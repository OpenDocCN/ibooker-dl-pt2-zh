["```py\nimport os openai\nfrom llama_index import SimpleDirectoryReader\nfrom llama_index.node_parser import SimpleNodeParser\nfrom llama_index import GPTVectorStoreIndex\nos.environ['OPENAI_API_KEY'] = \"sk-XXXX\"\n\ndocuments = SimpleDirectoryReader('data').load_data()\nparser = SimpleNodeParser()\nnodes = parser.get_nodes_from_documents(documents)\nindex = GPTVectorStoreIndex.from_documents(documents)\n```", "```py\nresponse = index.query(\"Based on the data, which 5 geographic \\\n\tregions had the highest average household net wealth? Show \\\n\tme nothing more than the region codes\")\nprint(response)\n```", "```py\nimport pandas as pd\nimport openai\nimport numpy as np\nopenai.api_key='sk-XXXX'\n\ndf = pd.read_csv(\"data1/twitter_data_labels.csv\")\n```", "```py\ndef analyze_gpt35(text):\n  messages = [\n    {\"role\": \"system\", \"content\": \"\"\"You are trained to analyze and \\\n       detect the sentiment of given text. If you're unsure of an \\\n       answer, you can say \"not sure\" and recommend users to review \\\n       manually.\"\"\"},\n    {\"role\": \"user\", \"content\": f\"\"\"Analyze the following product \\\n       review and determine if the sentiment is: positive or \\\n       negative. Return answer in single word as either positive or \\\n       negative: {text}\"\"\"}\n      ]\n\n  response = openai.ChatCompletion.create(model=\"gpt-3.5-turbo\",\\\n     messages=messages, max_tokens=100, temperature=0)\n  response_text = response.choices[0].message.content.strip().lower()\n  return response_text\n```", "```py\ndef analyze_gpt3(text):\n  task = f\"\"\"Analyze the following product review and determine \\\n    if the sentiment is: positive or negative. Return answer in \\\n    single word as either positive or negative: {text}\"\"\"\n\n  response = openai.Completion.create(model=\"text-davinci-003\", \\\n    prompt=task, max_tokens=100, temperature=0 )\n  response_text = response[\"choices\"][0][\"text\"].strip().lower().\\\n    replace('\\n\\n', '').replace('','').replace('.','')\n  return response_text\n```", "```py\n# analyze dataframe\ndf['predicted_gpt3'] = df['Comment'].apply(analyze_gpt3)\ndf['predicted_gpt35'] = df['Comment'].apply(analyze_gpt35)\n```", "```py\nprint(df[['Sentiment','predicted_gpt3','predicted_gpt35']].value_counts())\n```"]