["```js\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis@latest\">\n</script>\n```", "```js\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest\">\n</script>\n```", "```js\nlet values = [{x: 1, y: 20}, {x: 2, y: 30},\n              {x: 3, y: 5}, {x: 4, y: 12}];                ***1***\ntfvis.render.linechart(document.getElementById('plot1'),   ***2***\n                      {values},                            ***3***\n                      {width: 400});                       ***4***\n```", "```js\n  values = [                                                       ***1***\n    [{x: 1, y: 20}, {x: 2, y: 30}, {x: 3, y: 5}, {x: 4, y: 12}],   ***1***\n    [{x: 1, y: 40}, {x: 2, y: 0}, {x: 3, y: 50}, {x: 4, y: -5}]    ***1***\n  ];                                                               ***1***\n  let series = ['My series 1', 'My series 2'];                     ***2***\n  tfvis.render.linechart(\n           document.getElementById('plot2'), {values, series}, {\n    width: 400,\n    xLabel: 'My x-axis label',                                     ***3***\n    yLabel: 'My y-axis label'                                      ***3***\n  });\n```", "```js\n  values = [                                                         ***1***\n    [{x: 20, y: 40}, {x: 32, y: 0}, {x: 5, y: 52}, {x: 12, y: -6}],  ***1***\n    [{x: 15, y: 35}, {x: 0, y: 9}, {x: 7, y: 28}, {x: 16, y: 8}]     ***1***\n  ];                                                                 ***1***\n  series = ['My scatter series 1', 'My scatter series 2'];\n  tfvis.render.scatterplot(\n      document.getElementById('plot4'),\n    {values, series},\n     {\n      width: 400,\n      xLabel: 'My x-values',                                         ***2***\n      yLabel: 'My y-values'                                          ***2***\n    });\n```", "```js\nconst data = [\n    {index: 'foo', value: 1},{index: 'bar', value: 7},       ***1***\n    {index: 3, value: 3},                                    ***1***\n    {index: 5, value: 6}];                                   ***1***\n  tfvis.render.barchart(document.getElementById('plot5'), data, {\n    yLabel: 'My value',\n    width: 400\n  });\n```", "```js\n  const data = [1, 5, 5, 5, 5, 10, -3, -3];\n  tfvis.render.histogram(document.getElementById('plot6'), data, {  ***1***\n    width: 400                                                      ***1***\n  });                                                               ***1***\n\n  // Histogram: with custom number of bins.\n  // Note that the data is the same as above.\n  tfvis.render.histogram(document.getElementById('plot7'), data, {\n    maxBins: 3,                                                     ***2***\n    width: 400\n  });\n```", "```js\n  tfvis.render.heatmap(document.getElementById('plot8'), {\n    values: [[1, 0, 0], [0, 0.3, 0.7], [0, 0.7, 0.3]],      ***1***\n    xTickLabels: ['Apple', 'Orange', 'Tangerine'],          ***2***\n    yTickLabels: ['Apple', 'Orange', 'Tangerine']           ***2***\n  }, {\n    width: 500,\n    height: 300,\n    xLabel: 'Actual Fruit',                                 ***3***\n    yLabel: 'Recognized Fruit',                             ***3***\n    colorMap: 'blues'                                       ***4***\n  });\n```", "```js\ngit clone https://github.com/tensorflow/tfjs-examples.git\ncd tfjs-examples/jena-weather\nyarn\nyarn watch\n```", "```js\nfunction makeTimeSerieChart(\n    series1, series2, timeSpan, normalize, chartContainer) {\n  const values = [];\n  const series = [];\n  const includeTime = true;\n  if (series1 !== 'None') {\n    values.push(jenaWeatherData.getColumnData(                    ***1***\n        series1, includeTime, normalize, currBeginIndex,\n        TIME_SPAN_RANGE_MAP[timeSpan],                            ***2***\n        TIME_SPAN_STRIDE_MAP[timeSpan]));                         ***3***\n    series.push(normalize ? `${series1} (normalized)` : series1);\n  }\n  if (series2 !== 'None') {                                       ***4***\n    values.push(jenaWeatherData.getColumnData(\n        series2, includeTime, normalize, currBeginIndex,\n        TIME_SPAN_RANGE_MAP[timeSpan],\n        TIME_SPAN_STRIDE_MAP[timeSpan]));\n    series.push(normalize ? `${series2} (normalized)` : series2);\n  }\n  tfvis.render.linechart({values, series: series}, chartContainer, {\n    width: chartContainer.offsetWidth * 0.95,\n    height: chartContainer.offsetWidth * 0.3,\n    xLabel: 'Time',                                               ***5***\n    yLabel: series.length === 1 ? series[0] : ''\n  });\n}\n```", "```js\ngit clone https://github.com/tensorflow/tfjs-examples.git\ncd tfjs-examples/visualize-convnet\nyarn && yarn visualize\n```", "```js\nyarn visualize --gpu\n```", "```js\nasync function writeInternalActivationAndGetOutput(\n    model, layerNames, inputImage, numFilters, outputDir) {\n  const layerName2FilePaths = {};\n  const layerOutputs =\n      layerNames.map(layerName => model.getLayer(layerName).output);\n  const compositeModel = tf.model(                                    ***1***\n      {\n        inputs: model.input,\n       outputs: layerOutputs.concat(model.outputs[0])\n      });\n\n  const outputs = compositeModel.predict(inputImage);                 ***2***\n  for (let i = 0; i < outputs.length - 1; ++i) {\n    const layerName = layerNames[i];\n    const activationTensors =                                         ***3***\n        tf.split(outputs[i],\n                outputs[i].shape[outputs[i].shape.length â€“ 1],\n                -1);\n    const actualNumFilters = filters <= activationTensors.length ?\n        numFilters :\n        activationTensors.length;\n    const filePaths = [];\n    for (let j = 0; j < actualNumFilters; ++j) {\n      const imageTensor = tf.tidy(                                    ***4***\n          () => deprocessImage(tf.tile(activationTensors[j],\n                              [1, 1, 1, 3])));\n      const outputFilePath = path.join(\n          outputDir, `${layerName}_${j + 1}.png`);\n      filePaths.push(outputFilePath);\n      await utils.writeImageTensorToFile(imageTensor, outputFilePath);\n    }\n    layerName2FilePaths[layerName] = filePaths;\n    tf.dispose(activationTensors);\n  }\n  tf.dispose(outputs.slice(0, outputs.length - 1));\n  return {modelOutput: outputs[outputs.length - 1], layerName2FilePaths};\n}\n```", "```js\nconst lossFunction = (input) =>\n        auxModel.apply(input, {training: true}).gather([filterIndex], 3);\n```", "```js\nconst gradFunction = tf.grad(lossFunction);\n```", "```js\nconst norm = tf.sqrt(tf.mean(tf.square(grads))).add(EPSILON);\nreturn grads.div(norm);\n```", "```js\nfunction inputGradientAscent(\n    model, layerName, filterIndex, iterations = 80) {\n  return tf.tidy(() => {\n    const imageH = model.inputs[0].shape[1];\n    const imageW = model.inputs[0].shape[2];\n    const imageDepth = model.inputs[0].shape[3];\n\n    const layerOutput = model.getLayer(layerName).output;\n\n    const auxModel = tf.model({                                            ***1***\n      inputs: model.inputs,                                                ***1***\n     outputs: layerOutput                                                  ***1***\n    });\n\n    const lossFunction = (input) =>                                        ***2***\n        auxModel.apply(input, {training: true}).gather([filterIndex], 3);  ***2***\n\n    const gradFunction = tf.grad(lossFunction);                            ***3***\n\n    let image = tf.randomUniform([1, imageH, imageW, imageDepth], 0, 1)    ***4***\n                    .mul(20).add(128);                                     ***4***\n\n    for (let i = 0; i < iterations; ++i) {\n      const scaledGrads = tf.tidy(() => {\n        const grads = gradFunction(image);\n        const norm = tf.sqrt(tf.mean(tf.square(grads))).add(EPSILON);\n        return grads.div(norm);                                            ***5***\n      });\n      image = tf.clipByValue(\n               image.add(scaledGrads), 0, 255);                            ***6***\n    }\n    return deprocessImage(image);\n  });\n}\n```"]