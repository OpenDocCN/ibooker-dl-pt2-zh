- en: '3 Creating with Generative AI: Text and Code'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3创建生成式AI：文本和代码
- en: This chapter covers
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本章将涵盖
- en: Automating the process of filtering content for accuracy
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化过滤内容的准确性
- en: Creating new content based on complex details you can define
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于你可以定义的复杂细节创建新内容
- en: Generating customized documentation matching specialized fields
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成与专业领域匹配的定制文档
- en: Generating programming code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成编程代码
- en: 'Until now we’ve explored some of the underlying context and mechanics of generative
    AI: how it works and how you can fine tune it. Beginning with this chapter we’ll
    be working with some actual content generation.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，我们已经探讨了一些生成式AI的基础背景和机制：它如何工作以及如何进行微调。从这一章开始，我们将开始处理一些实际的内容生成问题。
- en: But how exactly is that going to work? Well I don’t see much point in me throwing
    you a long list of ChatGPT prompts. I’m sure you’ve already done plenty that.
    And in case you haven’t, typing "cool prompts for ChatGPT" into your favorite
    internet search engine will soon fix you up.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但确切地说，这要怎么运作呢？我不认为列举一个ChatGPT提示的长列表对你有什么意义。我敢肯定你已经做了大量这样的工作了。而且，如果你还没有这样做，那么在你喜爱的互联网搜索引擎中键入“ChatGPT的酷提示”很快就会解决问题了。
- en: What I *am* going to give you is some more complex and sometimes unexpected
    approaches to dealing with bigger problems - including how to train your AI model
    to work within a closely defined conceptual universe and how to build real-world
    websites just by describing them. We’re going to use all the same toys everyone
    else is playing with, but we’re going to be tweaking things to more perfectly
    fit our specific needs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我将要为你提供的是一些更复杂且有时意想不到的方法来处理更大的问题——包括如何训练你的AI模型在一个紧密定义的概念宇宙内工作，以及如何仅仅通过描述来构建真实世界的网站。我们将使用所有其他人正在使用的玩具，但我们将调整它们以更完美地适应我们的特定需求。
- en: Callout
  id: totrans-9
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Callout（应该是图文之类的）
- en: 'One caveat. As I’ll point out more than once in the coming chapters: I don’t
    expect you to use the tricks and configurations we’ll encounter *exactly* the
    way I’m presenting them. Rather, the goal is to provide some basic skills and
    to inspire your curiosity and creativity so you’ll see new solutions to *your*
    problems.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个警告。正如我在接下来的章节中指出的那样：我不希望你完全按照我呈现的技巧和配置来使用。相反，目标是提供一些基本技能和激发你的好奇心和创造力，让你看到你的问题的新解决方案。
- en: This chapter will focus on using generative AI to generate original text-based
    content of one kind or another. The next chapter will do the same, but for *non-text*
    content like images, audio, and videos.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍使用生成式AI来生成一些基于文本的原始内容。下一章也是这样，但是针对的是非文本内容，例如图像、音频和视频。
- en: 3.1 Automating accuracy checking
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1 自动化准确性检查
- en: If you haven’t yet noticed, we’ll be focusing mostly on OpenAI tools like GPT
    in this book. That’s not to say there aren’t other powerful and effective resources
    out there for getting this stuff done. There are. But right now at least OpenAI
    has the most creativity and momentum in the industry, and it’s where most of the
    groundbreaking action is happening.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有注意到，在本书中我们将主要关注OpenAI工具如GPT。这并不是说没有其他强大和有效的资源可以完成这些工作，事实上是有的。但至少现在，OpenAI在行业中具有最高的创造力和动力，也是最具突破性的地方。
- en: To be honest, I can already see subtle indications that this might be starting
    to change. I wouldn’t be surprised if, twelve months from now, Meta (Facebook)
    or even an independent platform was leading the way forward. But you use the tools
    you’ve got. And right now, most of those tools are, one way or another, connected
    to OpenAI.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实话说，我已经可以看到微妙的迹象表明这可能开始改变。我不会惊讶，如果12个月后Meta(Facebook)或甚至独立的平台领先于前面。但你要用你有的工具。而现在，大部分的工具或多或少都与OpenAI联系在一起。
- en: So GPT it will be. The thing about the [GPT Playground](platform.openai.com.html)
    is that it’s supposed to make you think about *program code* rather than *chat
    sessions*. In other words, how can the Playground’s `View code` feature help you
    build an automated workflow?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将使用GPT。关于[GPT Playground](platform.openai.com.html)的事情是，它应该让你思考*程序代码*而不是*聊天对话*。换句话说，Playground的`View
    code`功能如何帮助你构建自动化工作流程呢？
- en: Let’s imagine that you’re trying to integrate GPT creation into a larger process.
    Perhaps your organization is encouraging its website users to post their own thoughts
    and comments on your public discussion forum.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一下，你正在尝试将GPT创作整合到一个更大的过程中。也许你的组织正在鼓励它的网站用户在你们的公共讨论论坛上发布自己的想法和评论。
- en: 'Since the product or service you provide is technically complex, you have an
    interest in maintaining a high level of dialog on the platform. On the other hand,
    you don’t have the time and resources to manually edit each and every user comment
    before it goes public. Instead, you decide you’d rather have GPT do the work for
    you. Here’s how that would look in the Playground:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您提供的产品或服务在技术上很复杂，您对于在平台上保持高水平的对话很感兴趣。另一方面，您没有时间和资源在每一条用户评论在发布之前进行手动编辑。相反，您决定您宁愿让GPT来为您工作。下面是在Playground中的效果：
- en: Figure 3.1 The GPT Playground using the Edit mode
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图3.1 使用编辑模式的GPT Playground
- en: '![gai 3 1](https://drek4537l1klr.cloudfront.net/clinton6/v-3/Figures/gai-3-1.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![gai 3 1](https://drek4537l1klr.cloudfront.net/clinton6/v-3/Figures/gai-3-1.png)'
- en: 'Note how the `Mode` drop-down is set to the default value of `Chat`. This gives
    me a `SYSTEM` field in addition to the USER field. and an `Output` field to the
    Playground interface. Here, I entered some text containing an obvious error in
    to the Input field:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`Mode`下拉菜单被设置为默认值`Chat`。这给了我一个附加的`SYSTEM`字段和一个`Output`字段添加到Playground界面上。这里，我在输入字段中输入了一些包含明显错误的文本：
- en: Prompt engineering
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 提示工程
- en: The most famous musicians from the 1960’s were the Beatles, Bob Dylan, and J.S.
    Bach
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 60年代最著名的音乐家是披头士乐队、鲍勃·迪伦和J.S.巴赫。
- en: I then typed `Check for accuracy and and output a corrected version` as my instruction.
    When I submitted the prompt, the output came back with "Elvis Presley" as the
    third item in the list.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我将`Check for accuracy and and output a corrected version`作为我的指令输入。当我提交提示时，输出结果中的第三项是"Elvis
    Presley"。
- en: 'And here it is as code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码的呈现方式：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When I ran that code through the API, I got a slightly different response:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我通过API运行该代码时，我得到了略微不同的响应：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This next image shows how, for our use-case example, I can also filter content
    based on keywords using the `Stop sequences` field. This can be helpful if I’d
    like to catch and prevent the use of inappropriate words in user posts altogether.
    I’m sure you could come up with your own list of even less appropriate words that
    could be added to this field.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图片展示了对我们的用例示例，如何通过使用`Stop sequences`字段基于关键词过滤内容。如果我想要完全捕捉和防止用户发布不恰当的言论，这对我会很有帮助。我敢肯定你可以列出一份你自己的更不合适的词汇表，可以添加到这个字段中。
- en: Figure 3.2 The GPT Playground using the Edit mode with Stop sequences
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图3.2 使用Stop sequences的GPT Playground编辑模式
- en: '![gai 3 2](https://drek4537l1klr.cloudfront.net/clinton6/v-3/Figures/gai-3-2.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![gai 3 2](https://drek4537l1klr.cloudfront.net/clinton6/v-3/Figures/gai-3-2.png)'
- en: Naturally, you’ll need to make your own decision whether it’s appropriate to
    give GPT the power to effectively censor your users. While I for one would be
    nervous giving AI that kind of authority, that example is really about illustrating
    possibilities.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 自然而然，您需要自己决定是否适合赋予GPT有效地审查您的用户的权力。尽管我个人会对给予AI这种权力感到紧张，但这个例子实际上只是为了说明可能性。
- en: Takeaway
  id: totrans-32
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 要点
- en: Use the OpenAI Playground (or other resources) to build workflows that leverage
    LLM functionality to parse text in real-time and check for accuracy.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenAI Playground（或其他资源）构建利用LLM功能的工作流以实时解析文本并检查准确性。
- en: 3.2 Creating new contextually-aware content
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2 创建新的上下文感知内容
- en: This section is going to be fun. Unless you’re not into fun, of course. Don’t
    let me get in your way. By all means, feel free to skip ahead.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节会很有趣。除非你对于娱乐没有兴趣，当然了。不要让我挡住你的路。请随意跳过。
- en: But the rest of us are going to dive deep into the strange world of generating
    fiction on-demand. Which is not to say that I would ever advise you to try to
    earn money selling AI-generated fiction. It’s hard enough getting genuine human-sourced
    fiction noticed amongst the millions of titles competing for readers' attention
    on Amazon. Instead, the fiction angle is really only here as another way to get
    you thinking creatively. As it turns out, I don’t even read fiction.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们其他人将深入研究根据需求生成虚构世界的奇异世界。这并不意味着我会建议你试图通过销售由AI生成的虚构作品来赚钱。在Amazon上，数百万个标题争相吸引读者的注意力，让真正的人类源小说难以被注意到已经够困难了。相反，虚构角度只是用来激发你的创造力的另一种方式。事实证明，我甚至不读小说。
- en: 'So where could such creativity lead you? Well, consider how much time and effort
    you could save configuring an AI model to generate annual company reports. The
    AI would need to be familiar with your company’s operations (i.e., to be "contextually
    aware"). So it would need to:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Ingest your company’s complex financial history
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ingest the details of its most recent fiscal year
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the reporting requirements of your industry and local regulators
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With all that taken care of, you’ll be just a mouse click away from automated
    business documents.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: But that would be a bit complicated to simulate. So instead I’ll use this "fan-fiction"
    example to illustrate the process.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: My plan is to have GPT index a large collection of existing novels written by
    a single author that feature a largely fixed cast of core characters. Once the
    index exists, I’ll try to confirm that GPT is familiar with all the events of
    the complete set of novels, and then get it to write new content using the original
    style and characters. Hopefully the new works will also be internally consistent
    and free of "historical" contradictions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, to get my plan going, I first asked ChatGPT this question:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Prompt engineering
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '*Is there a series of famous English-language novels that are now all in the
    public domain that follow the same set of characters through multiple books?*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: True to form, ChatGPT came through, reminding me of the "Sherlock Holmes" series
    by Sir Arthur Conan Doyle, the "Tarzan" Series by Edgar Rice Burroughs, the "Anne
    of Green Gables" Series by Lucy Maud Montgomery, and the "Tom Swift" Series by
    Victor Appleton. Excellent. I’ll go with Sherlock.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: I’ll browse over to the [Project Gutenberg site](www.gutenberg.org.html) where
    70,000 public domain e-books live, just waiting for you to come by and enjoy them.
    Most of the books are older classics whose copyrights have expired according to
    at least US copyright laws. As you can see from the image, books are available
    in a wide range of formats.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 The many formats available on a Shakespeare collection page on the
    Project Gutenberg site
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![gai 3 3](https://drek4537l1klr.cloudfront.net/clinton6/v-3/Figures/gai-3-3.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: I’ll then download the plain text versions covering around 25 novels and short
    stories from the original Sherlock Holmes series. I’ll save those files to the
    `data/` directory beneath the location where my Python code will run.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.1 Setting up your environment for Python
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this exercise, I’ll assume you’ve got the Python programming language installed
    along with the Python package manager, `pip`. For help with getting Python itself
    set up for your operating system, see [the official download page](downloads.html).
    And [this page](installation.html) should give you everything you need to know
    about `pip`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t yet have a valid OpenAI API key, you can get one by signing up
    on [the OpenAI API reference page](docs.html).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'From here on in you’ll need to work within a Python environment. One way to
    make that happen is by typing `python` from a command line. Everything you type
    into such an environment will be handled by the Python interpreter. You could
    also create a plain text file and, when you’ve added all the code you’ll need,
    run it from the command line using something like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，您需要在 Python 环境中工作。一种使其发生的方法是从命令行键入`python`。您在这样的环境中输入的所有内容都将由 Python 解释器处理。您还可以创建一个纯文本文件，当您添加了所有所需的代码后，可以使用以下方式从命令行运行它：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: My personal favorite Python environment, though, is [JupyterLab](jupyter.org.html).
    Jupyter will give you a browser-based environment that comes with all kinds of
    optimizations for managing serious data workloads. Another environment that’s
    particularly popular for Python work is [Google’s Colab](colab.google.html).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人最喜欢的 Python 环境是 [JupyterLab](jupyter.org.html)。Jupyter 将为您提供一个基于浏览器的环境，其中包含各种优化，用于管理严肃的数据工作负载。另一个特别受欢迎的用于
    Python 工作的环境是 [Google Colab](colab.google.html)。
- en: 3.2.2 Creating your prompt (using Python)
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.2.2 创建您的提示（使用 Python）
- en: 'But either way, here’s how you’ll import all the necessary Python modules that’ll
    actually run our code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但无论如何，这是您导入将实际运行我们代码的所有必要 Python 模块的方式：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By the way, this will cost you some money in API charges. When I ran it myself,
    it probably set me back around $0.25.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，这会让您花费一些 API 费用。当我自己运行时，它可能花费我大约$0.25。
- en: 'If you haven’t net installed a module on your system, running something like
    this will get you there:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未在您的系统上安装了一个模块，运行以下内容将帮助您完成：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, you’ll create an environment variable to hold your OpenAI API key. Make
    sure you replace my `sk-xxxx` with your actual key.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将创建一个环境变量来保存您的 OpenAI API 密钥。确保您用您实际的密钥替换我的`sk-xxxx`。
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will load the contents of any documents in the `data/` directory and read
    them to a the variable `documents`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载`data/`目录中任何文档的内容，并将其读取到变量`documents`中。
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The next three lines use the `parser.get_nodes_from_documents` method to convert
    the actual contents of our `data/` directory to a GPT-friendly index. Depending
    on how much data you’ve got, this step could take a while.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三行使用`parser.get_nodes_from_documents`方法将我们的`data/`目录的实际内容转换为适合 GPT 的索引。根据您的数据量，此步骤可能需要一些时间。
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we’ll pass our prompt and run it against the index. I began with this
    question about contradictions between books for two reasons:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将传递我们的提示并针对索引运行它。我首先提出了这个关于书籍之间矛盾的问题有两个原因：
- en: Because this is a reasonably reliable way to confirm that the model has actually
    read and "understood" the content
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为这是一个相当可靠的确认模型实际上已经阅读并"理解"内容的方法。
- en: Because I’m actually curious to see if Doyle himself had trouble keeping all
    his details straight
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我实际上很好奇道尔本人是否有困难保持所有细节的连贯性
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here’s the response I got when I submitted that prompt:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我提交该提示时，这是我得到的回复：
- en: Prompt engineering
  id: totrans-75
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 提示工程
- en: '*No, there are no contradictions between events in any one story and events
    in any other. All of the stories in these documents are connected by the same
    characters and plot points, and the events in each story are consistent with the
    events in the other stories, including the new context provided. The fragment
    of paper found between the finger and thumb of the dead man is consistent with
    the events in the other stories, as it appears to be an appointment and the hour
    mentioned upon it is the very time at which the poor fellow met his fate.*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*不，任何一个故事中的事件与其他任何一个故事中的事件之间都没有矛盾。这些文件中的所有故事都由相同的角色和情节点连接起来，每个故事中的事件都与其他故事中的事件一致，包括提供的新背景。死者手指和拇指之间找到的纸片与其他故事中的事件一致，因为它似乎是一个约会，上面提到的时间正是这个可怜家伙命运的时刻。*'
- en: 'That’s good enough for this experiment, but it definitely wouldn’t do for projects
    where accuracy is critical. After all, when I asked the regular ChatGPT the same
    question I was given no less than five factual discrepancies. Of those, however,
    Watson’s war wound being somehow in both his arm ("A Study in Scarlet") and leg
    ("The Sign of Four") was the only one that truly met my criteria. The bottom line:
    independently confirm any AI output on which you plan to rely for important operations.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验来说已经足够了，但是对于精度至关重要的项目来说肯定不够。毕竟，当我问常规的 ChatGPT 同样的问题时，我得到了不少于五个事实上的矛盾之处。其中，沃森的战伤同时出现在他的手臂（《血字的研究》）和腿（《四签名》）上，这是唯一真正符合我的标准的矛盾之一。底线：请对您计划依赖于其进行重要操作的任何
    AI 输出进行独立确认。
- en: 'Here’s my prompt asking for the opening paragraphs of a brand new Sherlock
    Holmes story:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here’s what came back:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Prompt engineering
  id: totrans-81
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: I had heard the rumors of a daring heist, but I never expected it to be true.
    A passenger liner in the Cunard line had been stolen in its entirety, and the
    authorities were at a loss as to how it had been done. I had to find out the truth,
    and so I made my way to the docks, where I knew I would find the answers I sought.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: As I waited, I passed down the steps, worn hollow in the centre by the ceaseless
    tread of drunken feet. By the light of a flickering oil-lamp above the door, I
    found the latch and made my way into a long, low room, thick and heavy with the
    brown opium smoke, and terraced with wooden berths, like the forecastle of an
    emigrant ship. Through the gloom, I could dimly make out the figures of men lying
    in strange, fantastic poses, bowed shoulders, bent knees, heads thrown back, and
    chins pointing upward. Out of the black shadows, there glimmered little red circles
    of light, now bright, now faint, as the burning poison waxed or waned in the bowls
    of the metal pipes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Suddenly, I heard a commotion from the street outside. I rushed
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Sounds dark. But it’s actually darker than you think: when I did a bit of poking
    around, I found that GPT had stolen that second paragraph more or less intact
    from one of the existing stories that was included in the documents: "The Man
    With the Twisted Lip".'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: So I asked again, this time adding `but without using any verbatim quotations`.
    The new results were more original and, I guess, more or less credible.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Callout
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now is probably a good time to talk about copyright restrictions. As you saw,
    the original Sherlock Holmes stories are all in the public domain, so there’s
    no problem reusing their content, characters, or plot lines. Generating content
    based on protected works - much like works of fan fiction - will be more complicated.
    In many jurisdictions there may be allowances for content that can be classified
    as fair use, transformative work, or non-commercial work. Just make sure you do
    your research in advance.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned back in chapter 1, it’s also possible that any content you use
    to *feed* an AI model will be archived and even used used by the organization
    provider (like OpenAI). This could be a problem for owners of copyrighted creative
    or sensitive business data.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: But the real point is that AI can "understand" and index the contents of enormous
    data archives and use those as a resource for building new content…​like annual
    financial reports.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Generating specialized documents
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There’s a certain unmatchable advantage to having an instant recall-level knowledge
    of the entire internet, even if it’s only the pre-2022 version. Troubleshooting
    even deeply uncommon technical or household problems is now easy. There’s no detail
    too obscure or abstract, no process too involved, and no product assembly guide
    too obscure. Forever gone is the correlation between marital friction and putting
    Ikea furniture together.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: That’s great if your name, dear reader, happens to be GPT. (And why shouldn’t
    it be? What’s to stop me creating a GPT agent that runs around the internet buying
    all the available copies of my book and then happily reading them over and over
    again?) The rest of us, however, will have to satisfy our technical needs through
    the medium of AI prompts.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: But getting the most out of AI does require that we have at least some domain
    knowledge of our own. Contract law - a field that requires gallons of domain knowledge
    - is one area where GPT can shine. After all, GPT-4 has already passed the Uniform
    Bar Exam, scoring in the 90th percentile.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'A great deal of what lawyers do when preparing new contracts involves manipulating
    templated blocks of text. They’ll generally have two goals:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: To accurately identify the assets and principals involved
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To protect their clients from potential loss of rights
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Well, manipulating templated blocks of text while closely complying with a
    clearly stated set of facts and anticipating well documented possible perils is
    a perfect use-case for a mature, well trained LLM. To demonstrate that, I prompted
    ChatGPT with this request:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Prompt Engineering
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '*Draft a contract for me that formalizes the relationship between David Clinton
    of 123 Any St., Smallville, Ohio, USA with Manning Publishers in which David Clinton
    will provide ongoing consulting services to Manning in exchange for a 75% share
    in all net revenues.*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: The response was remarkable (although I have no idea why it arbitrarily dropped
    my share of Manning’s profits from 75% to 15%). There’s no reason to reproduce
    the contract here, but you - along with any interested Manning executives - are
    free to view it [on my website](bootstrap-it.com.html). I’m no lawyer, but I’ve
    signed more than a few contracts through my career and this draft really seemed
    to cover all the key elements.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Callout
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Once again however I must emphasise that AI is still nothing more than a dumb
    computer that doesn’t really know what it’s doing. Never automatically rely on
    anything that comes from an LLM. And, as GPT itself warned me when delivering
    that contract, it would be wise to seek a professional opinion before executing
    it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Here’s where domain knowledge (the specialized understanding and expertise one
    has for a particular subject) comes in. No matter how impressive your LLM’s results
    may be, without your own general understanding of a field, the risk of misunderstanding,
    misinterpreting, and misapplying the generated content is high. How else can you
    be sure your output isn’t missing important context or making outright errors?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: And even if you are an experienced specialist within a particular domain, it’ll
    be hard to be sure the thousands of words your AI gives you don’t contain a few
    broken details or confusing language. For many applications, "mostly accurate"
    is just not good enough.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Here’s where the kind of *specialized* AI projects I’m seeing more frequently
    can help. As an example, take [the website called Harvey.ai](www.harvey.ai.html).
    The people behind the site appear to be using their legal and technological expertise
    to offer law firms access to a specialized AI. But what they’re offering goes
    far beyond the silly contract I discussed a moment ago. Harvey is clearly leveraging
    the considerable expertise - meaning, domain knowledge - of its creators to make
    their service more accurate, predictable, and useful.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: No matter how much law-related information general tools like GPT might have
    ingested, they’ll never be able to compete with a specialized AI. There’s room
    for domain experts to add significant value to the service.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'This can apply far beyond just law. Whatever it is that you do well can probably
    be used for a productive partnership with AI to provide customer-facing services.
    Here are some particularly useful categories of content where LLMs combined with
    human domain expertise can be effective:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Insights, explanations, and tutorials on a wide range of **technology topics**
    such as programming languages, artificial intelligence, cybersecurity, blockchain,
    and emerging technologies.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scientific content** produced as explainers, research summaries, and detailed
    articles on subjects like physics, chemistry, biology, astronomy, and environmental
    science.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Healthcare content** like patient education materials, information on diseases,
    medical procedures, and research developments along with insights into emerging
    healthcare technologies.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Finance and Economics** content can include real-time market analysis, investment
    insights, economic forecasts, financial concepts explainers, and customisable
    guidance on personal finance, budgeting, and retirement planning.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Marketing and Advertising** content can include generate marketing strategies,
    ad content, social media posts, product descriptions, and consumer behavior and
    trend analytics.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Education** materials can include lesson plans, explanations of academic
    concepts, and assistance in various subjects such as mathematics, history, literature,
    and foreign languages.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AI platforms can provide **travel guides**, recommendations for tourist destinations,
    tips for planning trips, and insights into local culture and customs.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AI 平台可以提供**旅行指南**、旅游目的地推荐、旅行计划建议以及当地文化和习俗的见解。
- en: Takeaway
  id: totrans-116
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 要点
- en: Use large volumes of existing data to train your LLM to generate content that’s
    both aware of existing constraints and capable of adopting a specific writing
    "voice" and style. And be aware that that training should incorporate domain-specific
    knowledge and constraints.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用大量现有数据来训练您的 LLM 生成具有意识到现有约束条件并能够采用特定写作“语音”和风格的内容。并且请注意，该训练应该融入特定领域的知识和约束。
- en: 3.4 Generating programming code
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4 生成编程代码
- en: Domain knowledge is also helpful when you’re looking for assistance with your
    programming code. Asking GPT for help will be far more effective if you already
    have a fairly clear understanding of what the code you’re after is meant to accomplish.
    But it’s also important to have a general familiarity with common coding structures
    and design, like loops, variables, and conditional statements.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻求编程代码帮助时，领域知识也是有帮助的。如果您对您所需要的代码的意图有相当清晰的了解，向 GPT 寻求帮助将会更加有效。但是，熟悉常见的编码结构和设计，如循环、变量和条件语句，也很重要。
- en: 'That means a prompt like:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着一个提示，比如：
- en: Prompt Engineering
  id: totrans-121
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 提示工程
- en: Show me how to build a website.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 给我看如何建立一个网站。
- en: '…​won’t be nearly as effective as:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: …​远不如：
- en: Prompt Engineering
  id: totrans-124
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 提示工程
- en: Show me how to build a responsive, full-stack web page that incorporates HTML,
    CSS, JavaScript, Node.js, and SQLite.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 给我看如何构建一个响应式的全栈网页，其中包括 HTML、CSS、JavaScript、Node.js 和 SQLite。
- en: You should also never assume that the code your AI gives you will actually work.
    When something does fail to run, be sure to note the precise error messages you
    see and go back and use those as you ask for more help.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您还不应该假设您的 AI 给出的代码实际上会运行。当某些东西无法运行时，请务必记下您看到的精确错误消息，并在寻求更多帮助时使用它们。
- en: 3.5 Interactive coding with Copilot
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.5 使用 Copilot 进行交互式编码
- en: 'An interactive chat coding session with a AI can feel an awful lot like pair
    programming. And that’s a good thing. In fact, the name they chose for what is
    probably the most popular GPT-based code support tools around now is [GitHub’s
    Copilot](en.html): which says it all.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 与 AI 进行的交互式编码会感觉非常像是双人编程。而这是件好事。事实上，他们选择的名称，即现在可能是最受欢迎的基于 GPT 的代码支持工具之一的[GitHub
    Copilot](en.html)：这就是一切。
- en: 'I won’t go too deeply into the general topic because it’s been well documented
    online and, even better, because Nathan B. Crocker has focused on it for his [Manning
    book: AI-Powered Developer](books.html). But I will quickly take you through the
    process of getting up to speed with Copilot.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会过多深入讨论一般性话题，因为这在网上已经有很好的文档记录，更好的是，因为 Nathan B. Crocker 已经为他的[Manning 书籍：AI-Powered
    Developer](books.html)专注于此。但是，我会快速带您了解 Copilot 的使用过程。
- en: The first thing to know is that, after your 30-day free trial, Copilot charges
    a monthly fee.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要知道的是，在您的 30 天免费试用之后，Copilot 将收取月费。
- en: 'There are two ways to use Copilot: GitHub Copilot for Individuals is available
    for personal GitHub accounts, and GitHub Copilot for Business can be used by organizations.
    "Verified students, teachers, and maintainers of popular open source projects"
    can be eligible for free access.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Copilot 有两种方式：GitHub 个人 Copilot 可供个人 GitHub 账户使用，而 GitHub 企业 Copilot 可供组织使用。"经过验证的学生、教师和受欢迎的开源项目维护者"
    可能有资格免费使用。
- en: Once you enable Copilot within your GitHub account and then set up your payment
    preferences, you’ll need to choose a code editor. At this point, Copilot is compatible
    with Visual Studio, Visual Studio Code, Neovim, and JetBrains IDEs. Whichever
    IDE you choose, you’ll need to find and install the GitHub Copilot extension.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在您的 GitHub 账户中启用了 Copilot，并设置了您的支付偏好，您将需要选择一个代码编辑器。此时，Copilot 兼容的编辑器包括 Visual
    Studio、Visual Studio Code、Neovim 和 JetBrains IDEs。无论您选择哪个 IDE，您都需要找到并安装 GitHub
    Copilot 扩展。
- en: Once you’ve got everything enabled and installed and you’re logged into your
    GitHub account, you can start using Copilot. As you write code in your preferred
    programming language, Copilot will provide code suggestions in real-time based
    on the context and patterns it’s learned from its training data. You can accept
    the suggestions by pressing Tab, and Copilot will generate code snippets to speed
    up your development process.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你已经启用并安装了所有内容，并登录了你的 GitHub 账户，你就可以开始使用 Copilot 了。当你用你喜欢的编程语言编写代码时，Copilot
    将根据它从训练数据中学到的上下文和模式提供实时的代码建议。你可以通过按 Tab 键接受建议，Copilot 将生成代码片段以加快你的开发过程。
- en: 'Copilot understands code structure and descriptive naming usage. Using an example
    from the Copilot documentation, you could begin with nothing more than a JavaScript
    (`.js`) file containing a single function header like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot 理解代码结构和描述性命名的使用。使用 Copilot 文档中的示例，你可以从仅包含一个类似下面的 JavaScript（`.js`）文件开始：
- en: '[PRE10]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Copilot can take that and build a complete working function that might work
    right out of the box.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot 可以接收这些信息，并构建一个完整的可直接使用的函数。
- en: 3.6 Summary
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.6 摘要
- en: Use the GPT Playground to learn how to apply AI models, completion configurations,
    and environmental controls to your prompts. The Playground is also an excellent
    source of code for API-directed prompts and automation.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GPT Playground 学习如何将 AI 模型、完成配置和环境控制应用到你的提示中。Playground 也是 API 导向提示和自动化的绝佳源泉。
- en: Train your AI model using existing data/content and incorporating domain-specific
    constraints to create optimally suitable new content.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现有数据/内容训练你的 AI 模型，并加入特定领域的约束条件，以创建最适合的新内容。
- en: Generative AI tools have been widely adopted for help with programming code,
    but purpose-built tools like GitHub’s CoPilot can be particularly effective, given
    how they’ve been trained on the entire GitHub site. Use code-assistant tools to
    build on your existing programming ideas and code.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成式人工智能工具已被广泛采用，用于辅助编写编程代码，但像 GitHub 的 CoPilot 这样的专用工具可能效果特别好，因为它们已经在整个 GitHub
    网站上进行了训练。使用代码助手工具来构建你现有的编程思路和代码。
- en: 3.7 Try this for yourself
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.7 试试这个
- en: Why not use llama_index - the way you saw above with the stories of Sherlock
    Holmes - on as much of *your* writing as you can to train GPT to speak for you?
    Then prompt your model to respond to specific questions or scenarios using your
    style.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不像你在上面看到的用骆驼索引 - 如同《福尔摩斯探案集》中的故事 - 尽可能多地应用到*你*的写作中，来训练 GPT 代表你说话？然后提示你的模型回答特定问题或场景，使用你的风格。
