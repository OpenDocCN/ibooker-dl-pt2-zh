["```js\nimport * as tf from '@tensorflow/tfjs';\n\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 32, activation: 'relu', inputShape:\n     [numInputFeatures]}));\nmodel.add(tf.layers.dense({units: 32, activation: 'relu'}));\nmodel.add(tf.layers.dense({units: 1: activation: 'sigmoid'}));\nmodel.compile({loss: 'binaryCrossentropy', optimizer: 'adam'});\n```", "```js\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 32, activation: 'relu', inputShape:\n     [numInputFeatures]});\nmodel.add(tf.layers.dense({units: 32, activation: 'relu'});\nmodel.add(tf.layers.dense({units: numClasses: activation: 'softmax'});\nmodel.compile({loss: 'categoricalCrossentropy', optimizer: 'adam'});\n```", "```js\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 32, activation: 'relu', inputShape:\n     [numInputFeatures]}));\nmodel.add(tf.layers.dense({units: 32, activation: 'relu'}));\nmodel.add(tf.layers.dense({units: numClasses: activation: 'sigmoid'}));\nmodel.compile({loss: 'binaryCrossentropy', optimizer: 'adam'});\n```", "```js\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 32, activation: 'relu', inputShape:\n     [numInputFeatures]}));\nmodel.add(tf.layers.dense({units: 32, activation: 'relu'}));\nmodel.add(tf.layers.dense({units: numClasses}));\nmodel.compile({loss: 'meanSquaredError', optimizer: 'adam'});\n```", "```js\nconst model = tf.sequential();\nmodel.add(tf.layers.separableConv2d({\n    filters: 32, kernelSize: 3, activation: 'relu',\n    inputShape: [height, width, channels]}));\nmodel.add(tf.layers.separableConv2d({\n         filters: 64, kernelSize: 3, activation: 'relu'}));\nmodel.add(tf.layers.maxPooling2d({poolSize: 2}));\n\nmodel.add(tf.layers.separableConv2d({\n         filters: 64, kernelSize: 3, activation: 'relu'}));\nmodel.add(tf.layers.separableConv2d({\n         filters: 128, kernelSize: 3, activation: 'relu'}));\nmodel.add(tf.layers.maxPooling2d({poolSize: 2}));\n\nmodel.add(tf.layers.separableConv2d({\n    filters: 64, kernelSize: 3, activation: 'relu'}));\nmodel.add(tf.layers.separableConv2d({\n    filters: 128, kernelSize: 3, activation: 'relu'}));\nmodel.add(tf.layers.globalAveragePooling2d());\nmodel.add(tf.layers.dense({units: 32, activation: 'relu'}));\nmodel.add(tf.layers.dense({units: numClasses, activation: 'softmax'}));\n\nmodel.compile({loss: 'categoricalCrossentropy', optimizer: 'adam'});\n```", "```js\nconst model = tf.sequential();\nmodel.add(tf.layers.lstm({\n  units: 32,\n  inputShape: [numTimesteps, numFeatures]\n}));\nmodel.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\nmodel.compile({loss: 'binaryCrossentropy', optimizer: 'rmsprop'});\n```", "```js\nconst model = tf.sequential();\nmodel.add(tf.layers.lstm({\n  units: 32,\n  returnSequences: true,\n  inputShape: [numTimesteps, numFeatures]\n}));\nmodel.add(tf.layers.lstm({units: 32, returnSequences: true}));\nmodel.add(tf.layers.lstm({units: 32}));\nmodel.add(tf.layers.dense({units: numClasses, activation: 'softmax'}));\nmodel.compile({loss: 'categoricalCrossentropy', optimizer: 'rmsprop'});\n```", "```js\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({\n  units: 32,\n  activation: 'relu',\n  inputShape: [numFeatures]\n}));\nmodel.add(tf.layers.dropout({rate: 0.25}));\nmodel.add(tf.layers.dense({units: 64, activation: 'relu'}));\nmodel.add(tf.layers.dropout({rate: 0.25}));\nmodel.add(tf.layers.dense({units: 64, activation: 'relu'}));\nmodel.add(tf.layers.dropout({rate: 0.25}));\nmodel.add(tf.layers.dense({\n  units: numClasses,\n  activation: 'categoricalCrossentropy'\n}));\nmodel.compile({loss: 'categoricalCrossentropy', optimizer: 'rmsprop'});\n```"]