["```py\nimport pandas as pd\nvehicle_df = pd.read_csv('vehicle.csv').dropna()\n```", "```py\nvehicle_df.shape\nvehicle_df.info()\nvehicle_df.head()\npd.value_counts(vehicle_df['class'])\n```", "```py\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.value_counts(vehicle_df[\"class\"]).plot(kind='bar')\npd.value_counts(vehicle_df['class']).hist(bins=300)\n```", "```py\nvehicle_df.isna().sum()\n```", "```py\nvehicle_df_1 = vehicle_df.drop('class', axis=1)\nfrom scipy.stats import zscore\nvehicle_df_1_z = vehicle_df_1.apply(zscore)\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\nsc = StandardScaler()\nX_standard = sc.fit_transform(vehicle_df_1)\n```", "```py\nplt.scatter(X_standard[:,0], X_standard[:,1])\nplt.show()\n```", "```py\nfrom sklearn.cluster import KMeans\nfrom scipy.spatial.distance import cdist\nclusters=range(1,10)\nmeanDistortions=[]\nfor k in clusters:\n    model=KMeans(n_clusters=k)\n    model.fit(X_standard)\n    prediction=model.predict(X_standard)\n    meanDistortions.append(sum(np.min(cdist(X_standard, model.cluster_centers_, 'euclidean'), axis=1)) / X_standard\n                           .shape[0])\nplt.plot(clusters, meanDistortions, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Average distortion')\nplt.title('Selecting k with the Elbow Method')\n```", "```py\nkmeans = KMeans(n_clusters=3, n_init = 15, random_state=2345) \nkmeans.fit(X_standard)\n```", "```py\ncentroids = kmeans.cluster_centers_\ncentroids\n```", "```py\ncentroid_df = pd.DataFrame(centroids, columns = list(X_standard) )\n```", "```py\ndataframe_labels = pd.DataFrame(kmeans.labels_ , columns = list(['labels']))\ndataframe_labels['labels'] = dataframe_labels['labels'].astype('category')\n```", "```py\ndataframe_labeled = vehicle_df_1.join(dataframe_labels)\n```", "```py\ndataframe_analysis = (dataframe_labeled.groupby(['labels'] , axis=0)).head(1234)\ndataframe_labeled['labels'].value_counts()  \n```", "```py\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure(figsize=(8, 6))\nax = Axes3D(fig, rect=[0, 0, .95, 1], elev=20, azim=60)\nkmeans.fit(vehicle_df_1_z)\nlabels = kmeans.labels_\nax.scatter(vehicle_df_1_z.iloc[:, 0], vehicle_df_1_z.iloc[:, 1], vehicle_df_1_z.iloc[:, 3],c=labels.astype(np.float), edgecolor='k')\nax.w_xaxis.set_ticklabels([])\nax.w_yaxis.set_ticklabels([])\nax.w_zaxis.set_ticklabels([])\nax.set_xlabel('Length')\nax.set_ylabel('Height')\nax.set_zlabel('Weight')\nax.set_title('3D plot of KMeans Clustering on vehicles dataset')\n```", "```py\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nZ_df_average = linkage(X_standard, 'average', metric='euclidean')\nZ_df_average.shape\nplt.figure(figsize=(30, 12))\ndendrogram(Z_df_average)\nplt.show()\n```", "```py\ndendrogram(\n    Z_df_complete,\n    truncate_mode='lastp',    p=10,)\nplt.show()\n```", "```py\nfrom scipy.cluster.hierarchy import fcluster\nhier_clusters = fcluster(Z_df_complete, max_distance, criterion='distance')\nhier_clusters\nlen(set(hier_clusters)) \n```", "```py\nplt.scatter(X_standard[:,0], X_standard[:,1], c=hier_clusters)  \nplt.show()\n```", "```py\nfrom sklearn.cluster import DBSCAN \nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.preprocessing import normalize \nfrom sklearn.neighbors import NearestNeighbors\n```", "```py\ndb_default = DBSCAN(eps = 0.0375, min_samples = 6).fit(X_standard) \nlabels = db_default.labels_\n```", "```py\nlist(set(labels))\n```", "```py\nneigh = NearestNeighbors(n_neighbors=2)\nnbrs = neigh.fit(X_standard)\ndistances, indices = nbrs.kneighbors(X_standard)\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]\nplt.plot(distances)\n```", "```py\ndb_default = DBSCAN(eps=1.5, min_samples=5)\ndb_default.fit(X_standard)\nclusters = db_default.labels_\n```", "```py\nlist(set(clusters))\n```", "```py\ncolors = ['blue', 'red', 'orange', 'green', 'purple', 'black', 'brown', 'cyan', 'yellow', 'pink']\nvectorizer = np.vectorize(lambda x: colors[x % len(colors)]) \nplt.scatter(X_standard[:,0], X_standard[:,1], c=vectorizer(clusters))\n```"]