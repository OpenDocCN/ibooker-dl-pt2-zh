["```py\nimport sys\n!{sys.executable} -m pip install apyori\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom apyori import apriori\n```", "```py\nstore_dataset = pd.read_csv('store_data.csv')\n```", "```py\nstore_dataset.info()\n```", "```py\nstore_dataset.head()\n```", "```py\nstore_dataset = pd.read_csv('store_data.csv', header=None)\n```", "```py\nstore_dataset.head()\n```", "```py\nall_records = []\nfor i in range(0, 7501):\n    all_records.append([str(store_dataset.values[i,j]) for j in range(0, 20)])\n```", "```py\napriori_rules = apriori(all_records, min_support=0.5, min_confidence=0.25, min_lift=4, min_length=2)\napriori_rules = list(apriori_rules)\nprint(len(apriori_rules))\n```", "```py\napriori_rules = apriori(all_records, min_support=0.25, min_confidence=0.25, min_lift=4, min_length=2)\napriori_rules = list(apriori_rules)\nprint(len(apriori_rules))\n```", "```py\napriori_rules = apriori(all_records, min_support=0.1, min_confidence=0.25, min_lift=4, min_length=2)\napriori_rules = list(apriori_rules)\nprint(len(apriori_rules))\n```", "```py\napriori_rules = apriori(all_records, min_support=0.25, min_confidence=0.25, min_lift=2, min_length=2)\napriori_rules = list(apriori_rules)\nprint(len(apriori_rules))\n```", "```py\nprint(apriori_rules[0])\n```", "```py\nfor rule in apriori_rules:\n    item_pair = rule[0] \n    items = [x for x in item_pair]\n    print(\"The apriori rule is: \" + items[0] + \" -> \" + items[1])\n    print(\"The support for the rule is: \" + str(rule[1]))\n    print(\"The confidence for the rule is: \" + str(rule[2][0][2]))\n    print(\"The lift for the rule is: \" + str(rule[2][0][3]))\n    print(\"************************\")\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom pyECLAT import ECLAT\n```", "```py\ndata_frame = pd.read_csv('Data_ECLAT.csv', header = None)\n```", "```py\neclat = ECLAT(data=data_frame)\n```", "```py\nget_ECLAT_indexes, get_ECLAT_supports = eclat.fit(min_support=0.02,\n                                                           min_combination=1,\n                                                           max_combination=3,\n                                                           separator=' & ')\nget_ECLAT_supports\n```", "```py\nfrom pycspade.helpers import spade, print_result\nspade_result = spade(filename='SPADE_dataset.txt', support=0.6, parse=True)\nprint_result(spade_result)\n```"]