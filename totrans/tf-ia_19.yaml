- en: appendix A Setting up the environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this appendix, you will configure the development and runtime environments
    on your computer. Two installation procedures are given: one for the Unix-based
    environments and one for Windows environments. Note that we will keep our Unix
    environment discussion focused mostly on Ubuntu and not MacOS. This is because,
    for machine learning and deep learning, Ubuntu is more popular and better supported
    than MacOS. However, we will list the resources you need to run this on MacOS.'
  prefs: []
  type: TYPE_NORMAL
- en: A.1 In a Unix-based environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our discussion will be split into three sections. In the first section, we will
    discuss setting up a virtual Python environment to install the required libraries
    to run the code. Next, we will discuss things needed for GPU support. Finally,
    we will discuss doing the same on MacOS.
  prefs: []
  type: TYPE_NORMAL
- en: A.1.1 Creating a virtual Python environment with Anaconda distribution (Ubuntu)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will discuss the steps for setting up a conda environment
    (a term used to describe virtual Python environments created via the Anaconda
    software package) in Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Anaconda on your Linux system ([https://docs.anaconda.com/anaconda/install/linux/](https://docs.anaconda.com/anaconda/install/linux/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a terminal and open the ~/.bashrc file with your favourite text editor
    (e.g., for vim, type vim ~/.bashrc).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines to the end of the file (with the placeholder filled
    with your path):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new command line terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a new conda virtual environment by running conda create -n manning.tf2
    python=3.9.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (Recommended) Create a folder named code in your home folder, where you will
    store code locally, and go into the folder using cd~/code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone the code repository hosted on Github using git clone https://github.com/thushv89/manning_tf2_in_action.git.
    Make sure you have Git installed on your operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move cd into the cloned code repository with cd manning_tf2_in_action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the environment with
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Anaconda < 4.4: source activate manning.tf2'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Anaconda >= 4.4: conda activate manning.tf2'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the required libraries using pip install -r requirements.txt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.1.2 Prerequisites for GPU support (Ubuntu)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Installing the NVIDIA driver
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have installed the latest NVIDIA graphics driver for your GPU.
    You can find the driver installers at [http://mng.bz/xnKe](https://www.nvidia.com/download/index.aspx?lang=en-us).
    You may run into problems with the subsequent steps of getting GPU support for
    TensorFlow if you don’t install the latest drivers.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CUDA
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will install CUDA 11.2, as we are using a TensorFlow version
    higher than 2.5.0\. However, you need to pick the right CUDA version suitable
    for your TensorFlow version, as specified at [https://www.tensorflow.org/install/source#gpu](https://www.tensorflow.org/install/source#gpu).
    The CUDA versions for the most recent TensorFlow versions are listed in table
    A.1.
  prefs: []
  type: TYPE_NORMAL
- en: Table A.1 CUDA versions supported by latest TensorFlow versions
  prefs: []
  type: TYPE_NORMAL
- en: '| **TensorFlow version** | **CUDA version** |'
  prefs: []
  type: TYPE_TB
- en: '| 2.4.x | 11.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 2.8.x | 11.2 |'
  prefs: []
  type: TYPE_TB
- en: '| 2.9.x | 11.2 |'
  prefs: []
  type: TYPE_TB
- en: 'To install the desired CUDA version, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the [https://developer.nvidia.com/cuda-toolkit-archive](https://developer.nvidia.com/cuda-toolkit-archive)
    page. This will show you all the available versions of CUDA that you can download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the desired CUDA version by clicking on it, and you will be shown a page
    like the one in figure A.1\. For example, figure A.1 depicts the options for downloading
    CUDA version 11.7 for the Ubuntu distribution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you have execution rights for the downloaded file (e.g., on Ubuntu,
    you can run chmod a+x <path to the downloaded file> through the terminal to provide
    execution privileges).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the downloaded package by opening it through the command line terminal
    (e.g., on Ubuntu, simply go to the download directory and run the installation
    with ./<file name>).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A-1](../../OEBPS/Images/A-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.1 CUDA download page (Ubuntu installation)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installation is complete, the installation path needs to be added
    to a special environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal, and open the ~/.bashrc file with your favorite text editor
    (e.g., for vim, type vim~/.bashrc).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines to the end of the file. For example, the path might
    look like /usr/local/cuda-11.0:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing CuDNN
  prefs: []
  type: TYPE_NORMAL
- en: Similar to CUDA, the cuDNN version needs to be picked carefully. Table A.2 lists
    the cuDNN versions supported by the latest TensorFlow versions. To get the full
    list, visit [https://www.tensorflow.org/install/source#gpu](https://www.tensorflow.org/install/source#gpu).
  prefs: []
  type: TYPE_NORMAL
- en: Table A.2 cuDNN versions supported by the latest TensorFlow versions
  prefs: []
  type: TYPE_NORMAL
- en: '| **TensorFlow version** | **cuDNN version** |'
  prefs: []
  type: TYPE_TB
- en: '| 2.4.x | 8.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 2.6.x | 8.1 |'
  prefs: []
  type: TYPE_TB
- en: '| 2.9.x | 8.1 |'
  prefs: []
  type: TYPE_TB
- en: First, download the preferred cuDNN package by following the instructions and
    prompts at [https://developer.nvidia.com/cudnn](https://developer.nvidia.com/cudnn).
    To install cuDNN, follow the instructions provided at [http://mng.bz/AyQK](http://mng.bz/AyQK).
  prefs: []
  type: TYPE_NORMAL
- en: A.1.3 Notes on MacOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, CUDA is no longer actively supported by NVIDIA, as it is not
    recognized as a dominant development environment for CUDA-related development
    work ([http://mng.bz/ZAlO](http://mng.bz/ZAlO)). You can still install Anaconda,
    create a virtual environment, and install TensorFlow to carry development work.
    However, you might not be able to run any TensorFlow computations (that execute
    CUDA implementations underneath) on your NVIDIA GPU (if one exists).
  prefs: []
  type: TYPE_NORMAL
- en: To install Anaconda on MacOS, follow the guide provided at [https://docs.anaconda.com/anaconda/install/mac-os/](https://docs.anaconda.com/anaconda/install/mac-os/).
    The guide for managing conda environments is provided at [http://mng.bz/R4V0](http://mng.bz/R4V0).
  prefs: []
  type: TYPE_NORMAL
- en: A.2 In Windows Environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will discuss how to install a virtual environment with Windows
    and ensure GPU support.
  prefs: []
  type: TYPE_NORMAL
- en: A.2.1 Creating a Virtual Python Environment (Anaconda)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This section discusses the steps to create a conda environment on a Windows
    host:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Anaconda on your Windows system ([https://docs.anaconda.com/anaconda/install/linux/](https://docs.anaconda.com/anaconda/install/linux/)),
    which will also install a CLI (command line interface) for executing Anaconda-specific
    commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Anaconda Prompt by typing Anaconda Prompt in the search bar of the
    start menu (figure A.2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the terminal, run conda create -n manning.tf2 python=3.9 to set up a conda
    virtual environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (Recommended) Create a folder named code in your home folder (e.g., C:\Users\<username>\Documents),
    where we will store code locally and go into the folder using cd C:\Users\<username>\Documents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If not already installed, install Git for Windows (e.g., [https://git-scm.com/download/win](https://git-scm.com/download/win)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone the code repository hosted on Github using git clone https://github.com/thushv89/manning_tf2_in_action.git.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move cd into the cloned code repository with cd manning_tf2_in_action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the environment with conda activate manning.tf2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the required libraries using pip install -r requirements.txt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A-2](../../OEBPS/Images/A-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.2 Opening the Anaconda Prompt on Windows
  prefs: []
  type: TYPE_NORMAL
- en: A.2.2 Prerequisites for GPU support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will discuss several prerequisites to make sure the GPU
    is recognized and working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the NVIDIA driver
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have installed the latest NVIDIA graphics driver for your GPU.
    You can find the driver installers at [http://mng.bz/xnKe](http://mng.bz/xnKe).
    If you don’t install the latest drivers, you could run into problems with the
    subsequent steps of getting GPU support for TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CUDA
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will install CUDA 11.2, as we are using a TensorFlow version
    higher than 2.5.0\. However, you need to pick the right CUDA version suitable
    for your TensorFlow version, as specified at [https://www.tensorflow.org/install/source#gpu](https://www.tensorflow.org/install/source#gpu).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the desired CUDA version, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the [https://developer.nvidia.com/cuda-toolkit-archive](https://developer.nvidia.com/cuda-toolkit-archive)
    page. This will show you all the available versions of CUDA that you can download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the desired CUDA version by clicking on it, and you will be shown a page
    like figure A.3\. For example, figure A.3 depicts the options that would be chosen
    to fetch CUDA 11.7 for the Windows operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the downloaded .exe as the administrator and follow the prompts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A-3](../../OEBPS/Images/A-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.3 CUDA download page (Windows installation)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installation is complete, the installation path needs to be added
    to a special environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Environment variables window by selecting “Edit the system environment
    variable” from the start menu (figure A.4).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following paths to the path variables, as outlined in table A.3\. Figure
    A.5 shows how environment variables can be added/modified on Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A-4](../../OEBPS/Images/A-4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.4 Opening the system properties window
  prefs: []
  type: TYPE_NORMAL
- en: Table A.3 The path variables that need to be added and modified
  prefs: []
  type: TYPE_NORMAL
- en: '| PATH | <path to your CUDA installation>\bin |'
  prefs: []
  type: TYPE_TB
- en: '| CUDA_PATH | <path to your CUDA installation> |'
  prefs: []
  type: TYPE_TB
- en: '![A-5](../../OEBPS/Images/A-5.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.5 Steps to follow in order to add/modify a path variable
  prefs: []
  type: TYPE_NORMAL
- en: Installing CuDNN
  prefs: []
  type: TYPE_NORMAL
- en: Similar to CUDA, the cuDNN version needs to be picked carefully. Table A.4 lists
    the cuDNN versions supported by the latest TensorFlow versions. To get the full
    list, visit [https://www.tensorflow.org/install/source#gpu](https://www.tensorflow.org/install/source#gpu).
  prefs: []
  type: TYPE_NORMAL
- en: Table A.4 cuDNN versions supported by the latest TensorFlow versions
  prefs: []
  type: TYPE_NORMAL
- en: '| **TensorFlow version** | **cuDNN version** |'
  prefs: []
  type: TYPE_TB
- en: '| 2.4.x | 8.1 |'
  prefs: []
  type: TYPE_TB
- en: '| 2.5.x | 8.1 |'
  prefs: []
  type: TYPE_TB
- en: '| 2.6.x | 8.0 |'
  prefs: []
  type: TYPE_TB
- en: First, download the preferred cuDNN package following the instructions and prompts
    at [https://developer.nvidia.com/cudnn](https://developer.nvidia.com/cudnn). To
    install cuDNN, follow the instructions provided at [http://mng.bz/AyQK](http://mng.bz/AyQK).
  prefs: []
  type: TYPE_NORMAL
- en: A.3 Activating and deactivating the conda environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the conda environment is created, complete the following steps to activate
    or deactivate the environment.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows (through the Anaconda Prompt) (figure A.6)
  prefs: []
  type: TYPE_NORMAL
- en: Run conda activate <environment name> to activate the environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run conda deactivate to deactivate the currently active environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A-6](../../OEBPS/Images/A-6.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.6 Activating a conda environment
  prefs: []
  type: TYPE_NORMAL
- en: On Ubuntu (through the terminal)
  prefs: []
  type: TYPE_NORMAL
- en: Run source activate <environment name> (Anaconda < 4.4) or conda activate <environment
    name> (Anaconda >= 4.4) to activate the environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run conda deactivate to deactivate the currently active environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.4 Running the Jupyter Notebook server and creating notebooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be writing code and executing it using a Jupyter Notebook server. Specifically,
    we will start the Jupyter Notebook server, which will provide you a dashboard
    (a webpage) to create Jupyter Notebooks. The Jupyter Notebook is an interactive
    Python runtime environment. This means you can write code in the Jupyter Notebooks
    and run different code snippets on demand. This is because code can be separated
    into what are known as *notebook cells*. Let’s see how we can start a Jupyter
    Notebook server and start coding:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command line terminal (e.g., Ubuntu terminal or the Windows Anaconda
    Prompt), and activate the virtual environment manning.tf2 if you haven’t already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go into the directory you downloaded code to using cd in the CLI (e.g., cd C:\Users\<user>\Documents\code\manning_tf2_in_action).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the command jupyter notebook in the CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should open the Jupyter Notebook server’s landing page on your default
    browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you can navigate the folder structure within that directory, open any notebook,
    and run it (figure A.7).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once a notebook is opened, you have the ability to do various things, such as
    creating code cells, running code cells, and so on (figure A.8).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A-7](../../OEBPS/Images/A-7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.7 The landing page created by the Jupyter Notebook server
  prefs: []
  type: TYPE_NORMAL
- en: '![A-8](../../OEBPS/Images/A-8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.8 An overview of a Jupyter Notebook
  prefs: []
  type: TYPE_NORMAL
- en: A.5 Miscellaneous notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make the plotting capability provided in TensorFlow/Keras work, you installed
    a Python package called graphviz. You might need to append the path to this library
    (e.g., <path to Anaconda>\envs\manning.tf2\Library\bin\graphviz if you used Anaconda
    installation) to the PATH variable of your operating system.
  prefs: []
  type: TYPE_NORMAL
