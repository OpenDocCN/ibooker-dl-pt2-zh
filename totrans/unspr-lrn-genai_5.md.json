["```py\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_circles\nfrom numpy import random\nimport numpy as np\nfrom sklearn.cluster import SpectralClustering, KMeans\nfrom sklearn.metrics import pairwise_distances\nfrom matplotlib import pyplot as plt\nimport networkx as nx\nimport seaborn as sns\n```", "```py\ndata, clusters = make_circles(n_samples=2000, noise=.01, factor=.3, random_state=5)\nplt.scatter(data[:,0], data[:,1]) \n```", "```py\nkmeans = KMeans(init='k-means++', n_clusters=2)\nkm_clustering = kmeans.fit(data)\nplt.scatter(data[:,0], data[:,1], c=km_clustering.labels_, cmap='prism', alpha=0.5, edgecolors='g')\n```", "```py\nspectral = SpectralClustering(n_clusters=2, affinity='nearest_neighbors', random_state=5)\nsc_clustering = spectral.fit(data)\nplt.scatter(data[:,0], data[:,1], c=sc_clustering.labels_, cmap='prism', alpha=0.5, edgecolors='g')\n```", "```py\nimport skfuzzy as fuzz\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n```", "```py\ncolor_pallete = ['r','m','y','c', 'brown', 'orange','m','k', 'gray','purple','seagreen']\n```", "```py\ncluster_centers = [[1, 1],\n           [2, 4],\n           [5, 8]]\n```", "```py\nsigmas = [[0.5, 0.6],\n          [0.4, 0.5],\n          [0.1, 0.6]]\n```", "```py\nnp.random.seed(5)  \n\nxpts = np.zeros(1)\nypts = np.zeros(1)\nlabels = np.zeros(1)\nfor i, ((xmu, ymu), (xsigma, ysigma)) in enumerate(zip(cluster_centers, sigmas)):\n    xpts = np.hstack((xpts, np.random.standard_normal(500) * xsigma + xmu))\n    ypts = np.hstack((ypts, np.random.standard_normal(500) * ysigma + ymu))\n    labels = np.hstack((labels, np.ones(500) * i))\n```", "```py\nfig0, ax0 = plt.subplots()\nfor label in range(5):\n    ax0.plot(xpts[labels == label], ypts[labels == label], '.')\nax0.set_title('Data set having 500 points.')\nplt.show()\n```", "```py\nfig1, axes1 = plt.subplots(3, 3, figsize=(10, 10))\nalldata = np.vstack((xpts, ypts))\nfpcs = []\n\nfor ncenters, ax in enumerate(axes1.reshape(-1), 2):\n    cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(\n        alldata, ncenters, 2, error=0.005, maxiter=1000, init=None)\n\n    # Store fpc values for later\n    fpcs.append(fpc)\n\n    # Plot assigned clusters, for each data point in training set\n    cluster_membership = np.argmax(u, axis=0)\n    for j in range(ncenters):\n        ax.plot(xpts[cluster_membership == j],\n                ypts[cluster_membership == j], '.', color=colors[j])\n\n    # Mark the center of each fuzzy cluster\n    for pt in cntr:\n        ax.plot(pt[0], pt[1], 'rs')\n\n    ax.set_title('cluster_centers = {0}; FPC = {1:.2f}'.format(ncenters, fpc), size=12)\n    ax.axis('off')\n\nfig1.tight_layout()\n```", "```py\nimport pandas as pd\ndata = pd.read_csv('vehicle.csv')\nimport matplotlib.pyplot as plt\n```", "```py\ndata = data.dropna()\n```", "```py\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=5)\nkmeans.fit(data)\n```", "```py\npred = kmeans.predict(data)\nframe = pd.DataFrame(data)\nframe['cluster'] = pred\n\ncolor=['red','blue','orange', 'brown', 'green']\nfor k in range(0,5):\n    data = frame[frame[\"cluster\"]==k]\n    plt.scatter(data[\"compactness\"],data[\"circularity\"],c=color[k])\nplt.show()\n```", "```py\nfrom sklearn.mixture import GaussianMixture\ngmm = GaussianMixture(n_components=5)\ngmm.fit(data)\n\n#predictions from gmm\nlabels = gmm.predict(data)\nframe = pd.DataFrame(data)\nframe['cluster'] = labels\n```", "```py\ncolor=['red','blue','orange', 'brown', 'green']\nfor k in range(0,5):\n    data = frame[frame[\"cluster\"]==k]\n    plt.scatter(data[\"compactness\"],data[\"circularity\"],c=color[k])\nplt.show()\n```"]