["```py\n// Determine whether the sentiment of text is positive\n// Use a web service\nasync function isPositive(text: string): Promise<boolean> {\n```", "```py\n>>> greetings = \"Hi Hello Greetings\".split()\n>>> user_statement = \"Hello Joshua\"\n>>> user_token_sequence = user_statement.split()\n>>> user_token_sequence\n['Hello', 'Joshua']\n>>> if user_token_sequence[0] in greetings:\n...     bot_reply = \"Themonucluear War is a strange game. \"  # #1\n...     bot_reply += \"The only winning move is NOT TO PLAY.\"\n>>> else:\n...     bot_reply = \"Would you like to play a nice game of chess?\"\n>>> bot_reply\n'Themonucluear War is a strange game. The only winning move is NOT TO PLAY.'\n```", "```py\n>>> import re  # #1\n>>> r = \"(hi|hello|hey)[ ,:.!]*([a-z]*)\"  # #2\n>>> re.match(r, 'Hello Rosa', flags=re.IGNORECASE)  # #3\n<re.Match object; span=(0, 10), match='Hello Rosa'>\n>>> re.match(r, \"hi ho, hi ho, it's off to work ...\", flags=re.IGNORECASE)\n<re.Match object; span=(0, 5), match='hi ho'>\n>>> re.match(r, \"hey, what's up\", flags=re.IGNORECASE)\n<re.Match object; span=(0, 9), match='hey, what'>\n```", "```py\n>>> r = r\"[^a-z]*([y]o|[h']?ello|ok|hey|(good[ ])(morn[gin']{0,3}|\"\n>>> r += r\"afternoon|even[gin']{0,3}))[\\s,;:]{1,3}([a-z]{1,20})\"\n>>> re_greeting = re.compile(r, flags=re.IGNORECASE)  # #1\n>>> re_greeting.match('Hello Rosa')\n<re.Match object; span=(0, 10), match='Hello Rosa'>\n>>> re_greeting.match('Hello Rosa').groups()\n('Hello', None, None, 'Rosa')\n>>> re_greeting.match(\"Good morning Rosa\")\n<re.Match object; span=(0, 17), match=\"Good morning Rosa\">\n>>> re_greeting.match(\"Good Manning Rosa\")  # #2\n>>> re_greeting.match('Good evening Rosa Parks').groups()  # #3\n('Good evening', 'Good ', 'evening', 'Rosa')\n>>> re_greeting.match(\"Good Morn'n Rosa\")\n<re.Match object; span=(0, 16), match=\"Good Morn'n Rosa\">\n>>> re_greeting.match(\"yo Rosa\")\n<re.Match object; span=(0, 7), match='yo Rosa'>\n```", "```py\n>>> my_names = set(['rosa', 'rose', 'chatty', 'chatbot', 'bot',\n...     'chatterbot'])\n>>> curt_names = set(['hal', 'you', 'u'])\n>>> greeter_name = ''  # #1\n>>> match = re_greeting.match(input())\n...\n>>> if match:\n...     at_name = match.groups()[-1]\n...     if at_name in curt_names:\n...         print(\"Good one.\")\n...     elif at_name.lower() in my_names:\n...         print(\"Hi {}, How are you?\".format(greeter_name))\n```", "```py\n>>> from collections import Counter\n\n>>> Counter(\"Guten Morgen Rosa\".split())\nCounter({'Guten': 1, 'Rosa': 1, 'morgen': 1})\n>>> Counter(\"Good morning, Rosa!\".split())\nCounter({'Good': 1, 'Rosa!': 1, 'morning,': 1})\n```", "```py\n>>> from itertools import permutations\n\n>>> [\"  \".join(combo) for combo in\\\n...     permutations(\"Good morning Rosa!\".split(), 3)]\n['Good morning Rosa!',\n 'Good Rosa! morning',\n 'morning Good Rosa!',\n 'morning Rosa! Good',\n 'Rosa! Good morning',\n 'Rosa! morning Good']\n```", "```py\n>>> s = \"\"\"Find textbooks with titles containing 'NLP',  ... or 'natural' and 'language', or  ... 'computational' and 'linguistics'.\"\"\"\n>>> len(set(s.split()))\n12\n>>> import numpy as np\n>>> np.arange(1, 12 + 1).prod()  # factorial(12) = arange(1, 13).prod()\n479001600\n```"]