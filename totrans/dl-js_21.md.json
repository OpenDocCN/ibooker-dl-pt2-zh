["```js\nMath.seedrandom(42);         ***1***\n```", "```js\ndescribe('buildModel', () => {\n it('flatten training and inference', async () => {\n    const maxLen = 5;\n    const vocabSize = 3;\n    const embeddingSize = 8;\n    const model = buildModel('flatten', maxLen, vocabSize, embeddingSize);\n    expect(model.inputs.length).toEqual(1);                                ***1***\n    expect(model.inputs[0].shape).toEqual([null, maxLen]);                 ***1***\n    expect(model.outputs.length).toEqual(1);                               ***1***\n    expect(model.outputs[0].shape).toEqual([null, 1]);                     ***1***\n\n    model.compile({\n      loss: 'binaryCrossentropy',\n      optimizer: 'rmsprop',\n      metrics: ['acc']\n    });\n    const xs = tf.ones([2, maxLen])\n    const ys = tf.ones([2, 1]);\n    const history = await model.fit(xs, ys, {                            ***2***\n      epochs: 2,                                                         ***2***\n      batchSize: 2                                                       ***2***\n    });                                                                  ***2***\n    expect(history.history.loss.length).toEqual(2);                      ***2******3***\n    expect(history.history.acc.length).toEqual(2);                       ***2***\n\n    const predictOuts = model.predict(xs);                               ***4***\n    expect(predictOuts.shape).toEqual([2, 1]);                           ***4***\n    const values = predictOuts.arraySync();                              ***4******5***\n    expect(values[0][0]).toBeGreaterThanOrEqual(0);                      ***4******5***\n    expect(values[0][0]).toBeLessThanOrEqual(1);                         ***4******5***\n    expect(values[1][0]).toBeGreaterThanOrEqual(0);                      ***4******5***\n    expect(values[1][0]).toBeLessThanOrEqual(1);                         ***4******5***\n  });                                                                     ***5***\n});\n```", "```js\n    expect(model.inputs.length).toEqual(1);\n    expect(model.inputs[0].shape).toEqual([null, maxLen]);\n    expect(model.outputs.length).toEqual(1);\n    expect(model.outputs[0].shape).toEqual([null, 1]);\n```", "```js\n    const history = await model.fit(xs, ys, {epochs: 2, batchSize: 2})\n    expect(history.history.loss.length).toEqual(2);\n    expect(history.history.acc.length).toEqual(2);\n```", "```js\n    const predictOuts = model.predict(xs);\n    expect(predictOuts.shape).toEqual([2, 1]);\n    const values = predictOuts.arraySync();\n    expect(values[0][0]).toBeGreaterThanOrEqual(0);\n    expect(values[0][0]).toBeLessThanOrEqual(1);\n    expect(values[1][0]).toBeGreaterThanOrEqual(0);\n    expect(values[1][0]).toBeLessThanOrEqual(1);\n```", "```js\ngit clone https://github.com/tensorflow/tfjs-examples.git\ncd tfjs-examples/quantization\nyarn\n```", "```js\nyarn train-housing\n```", "```js\nyarn quantize-and-evaluate-housing\n```", "```js\ntensorflowjs_converter \\\n      --input_format tfjs_layers_model \\\n      --output_format tfjs_layers_model \\\n      --quantization_bytes 2 \\\n    \"${MODEL_JSON_PATH}\" \"${MODEL_PATH_16BIT}\"\n```", "```js\ntensorflowjs_converter \\\n      --input_format keras \\\n      --output_format tfjs_layers_model \\\n      --quantization_bytes 2 \\\n      \"${KERAS_MODEL_H5_PATH}\" \"${TFJS_MODEL_PATH}\"\n```", "```js\nyarn train-mnistyarn quantize-and-evaluate-mnist\n```", "```js\nyarn train-fashion-mnist\nyarn quantize-and-evaluate-fashion-mnist\n```", "```js\nyarn quantize-and-evaluate-MobileNetV2\n```", "```js\ntensorflowjs_converter \\\n      --input_format tfjs_layers_model \\\n      --output_format tfjs_graph_model \\\n      my/layers-model my/graph-model\n```", "```js\nconst model = await tf.loadGraphModel('file://./my/graph-model/model.json');***1***\n   const ys = model.predict(xs);                                            ***2***\n```", "```js\nconsole.time('TFjs inference');\nconst outputTensor = model.predict(inputTensor);\nconsole.timeEnd('TFjs inference');                 ***1***\n```", "```js\nconsole.time('TFjs inference');\nconst outputTensor = model.predict(inputTensor);\nawait outputTensor.array();                        ***1***\nconsole.timeEnd('TFjs inference');\n```", "```js\nconst MOBILENET_MODEL_PATH =\n    'https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_0.25_224/model.json';\nconst mobilenet = await tf.loadLayersModel(MOBILENET_MODEL_PATH);\nconst response = mobilenet.predict(userQueryAsTensor);\n```", "```js\npip install tensorflowjs\n```", "```js\ntensorflowjs_converter \\\n    --input_format=tfjs_layers_model \\\n    --output_format=keras_saved_model \\\n    /path/to/your/js/model.json \\\n    /path/to/your/new/saved-model\n```", "```js\ngit clone https://github.com/tensorflow/tfjs-examples.git\ncd tfjs-examples/chrome-extension\nyarn\nyarn build\n```", "```js\nimport * as tf from '@tensorflow/tfjs';\nimport '@tensorflow/tfjs-react-native';\n```", "```js\nimport * as tf from '@tensorflow/tfjs';\nimport {asyncStorageIO} from '@tensorflow/tfjs-react-native';\n\nasync trainSaveAndLoad() {\n   const model = await train();\n   await model.save(asyncStorageIO(                        ***1***\n       'custom-model-test'))                               ***1***\n   model.predict(tf.tensor2d([5], [1, 1])).print();\n   const loadedModel =\n     await tf.loadLayersModel(asyncStorageIO(              ***2***\n         'custom-model-test'));                            ***2***\n   loadedModel.predict(tf.tensor2d([5], [1, 1])).print();\n }\n```"]