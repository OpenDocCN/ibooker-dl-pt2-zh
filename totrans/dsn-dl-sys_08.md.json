["```py\n# define a dataset metadata\ndata_artifact = metadata_store_pb2.Artifact()                ❶\ndata_artifact.uri = 'path/to/data'\ndata_artifact.properties[\"day\"].int_value = 1\ndata_artifact.properties[\"split\"].string_value = 'train'\ndata_artifact.type_id = data_type_id\n[data_artifact_id] = store                                   ❷\n     .put_artifacts([data_artifact])                         ❷\n\n# define a training run metadata\ntrainer_run = metadata_store_pb2.Execution()                 ❸\ntrainer_run.type_id = trainer_type_id\ntrainer_run.properties[\"state\"].string_value = \"RUNNING\"\n[run_id] = store.put_executions([trainer_run])\n\n# define a model metadata\nmodel_artifact = metadata_store_pb2.Artifact()               ❹\nmodel_artifact.uri = 'path/to/model/file'\nmodel_artifact.properties[\"version\"].int_value = 1\nmodel_artifact.properties[\"name\"].string_value = 'MNIST-v1'\nmodel_artifact.type_id = model_type_id\n[model_artifact_id] = store.put_artifacts([model_artifact])\n\n# define an experiment metadata\nmy_experiment = metadata_store_pb2.Context()                 ❺\nmy_experiment.type_id = experiment_type_id\n# Give the experiment a name\nmy_experiment.name = \"exp1\"\nmy_experiment.properties[\"note\"].string_value = \\\n   \"My first experiment.\"\n[experiment_id] = store.put_contexts([my_experiment])\n\n# declare relationship between model, training run\n# and experiment\nattribution = metadata_store_pb2.Attribution()\nattribution.artifact_id = model_artifact_id\nattribution.context_id = experiment_id\n\nassociation = metadata_store_pb2.Association()\nassociation.execution_id = run_id\nassociation.context_id = experiment_id\n\n# Associate training run and model with the\n# same experiment\nstore.put_attributions_and_associations( \\\n  [attribution], [association])                             ❻\n```", "```py\nartifacts = store.get_artifacts()             ❶\n\n[stored_data_artifact] = store                ❷\n   .get_artifacts_by_id([data_artifact_id])\n\nartifacts_with_uri = store                    ❸\n   .get_artifacts_by_uri(data_artifact.uri)\n\nartifacts_with_conditions = store \n   .get_artifacts(\n      list_options=mlmd.ListOptions(          ❹\n        filter_query='uri LIKE \"%/data\" \n        AND properties.day.int_value > 0'))\n```", "```py\nconnection_config = metadata_store_pb2.ConnectionConfig()\nconnection_config.sqlite.filename_uri = \n  '{your_workspace}/mlmd-demo/mlmd_run.db'               ❶\nconnection_config.sqlite.connection_mode = 3             ❷\nstore = metadata_store.MetadataStore(connection_config)\n```", "```py\nimport mlflow\nremote_server_uri = \"...\"                 ❶\nmlflow.set_tracking_uri(remote_server_uri)\n\nmlflow.set_experiment(\"/my-experiment\")\n\nwith mlflow.start_run():\n  mlflow.log_param(\"parameter_a\", 1)      ❷\n  mlflow.log_metric(\"metric_b\", 2)        ❷\n  mlflow.log_artifact(\"features.txt\")     ❷\n```", "```py\nfrom mlflow.tracking import MlflowClient\n\nclient = MlflowClient()                              ❶\n.. .. ..\n\n# Fetch the run metadata from the backend store,\n# which contains a list of  metadata \nactive_run = client.get_run(run_id)\nprint(\"run_id: {}; lifecycle_stage: {}\"\\             ❷\n  .format(run_id, active_run.info.lifecycle_stage))\n\n# Retrieve an experiment by \n# experiment_id from the backend store\nexperiment = client.get_experiment(exp_id)\n\n# Get a specific version of a model\nmv = client.get_model_version(model_name, mv_version)\n```"]