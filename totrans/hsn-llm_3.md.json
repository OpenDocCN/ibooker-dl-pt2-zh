["```py\nimport torch\nfrom transformers import pipeline\n# Load our model\npipe = pipeline(\n    \"text-generation\", \n    model=\"HuggingFaceH4/zephyr-7b-beta\", \n    torch_dtype=torch.bfloat16, \n    device_map=\"auto\"\n)\n```", "```py\n`def` format_prompt(query=\"\", messages=`False`):\n    \"\"\"Use the internal chat template to format our query\"\"\"\n    # The system prompt (what the LLM should know before answering) and our query:\n    `if` `not` messages:\n        messages = [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant.\",\n            },\n            {\"role\": \"user\", \"content\": query},\n        ]\n    # We apply the LLMs internal chat template to our input prompt\n    prompt = pipe.tokenizer.apply_chat_template(\n        messages,\n        tokenize=`False`,\n        add_generation_prompt=`True`\n    )\n    `return` prompt\nprompt = format_prompt(\"Write a short joke about chickens.\")\n```", "```py\n# Generate the output\noutputs = pipe(\n    prompt, \n    max_new_tokens=256, \n    do_sample=`True`, \n    temperature=0.1, \n    top_p=0.95\n)\nprint(outputs[0][\"generated_text\"])\n```", "```py\n\"\"\"\n<|system|>\nYou are a friendly chatbot.</s>\n<|user|>\nWrite a joke about chickens.</s>\n<|assistant|>\nWhy did the chicken cross the Mobilo?\nBecause the Eggspressway was closed for pavement!\n\"\"\"\n```", "```py\n# Prompt components\npersona = \"You are an expert in Large Language models. You excel at breaking down complex papers into digestible summaries.`\\n`\"\ninstruction = \"Summarize the key findings of the paper provided.`\\n`\"\ncontext = \"Your summary should extract the most crucial points that can help researchers quickly understand the most vital information of the paper.`\\n`\"\ndata_format = \"Create a bullet-point summary that outlines the method. Follow this up with a concise paragraph that encapsulates the main results.`\\n`\"\naudience = \"The summary is designed for busy researchers that quickly need to grasp the newest trends in Large Language Models.`\\n`\"\ntone = \"The tone should be professional and clear.`\\n`\"\ndata = \"Text to summarize: PUT_THE_DATA_TO_SUMMARIZE_HERE\"\n# The full prompt - remove and add pieces to view its impact on the generated output\nquery = persona + instruction + context + data_format + audience + tone + data\nprompt = format_prompt(query)\n```", "```py\n# Use a single example of using the made-up word in a sentence\none_shot_prompt = format_prompt(messages=[\n    {\"role\": \"user\", \"content\": \"Q: A 'Gigamuru' is a type of Japanese musical instrument. An example of a sentence that uses the word Gigamuru is:\"},\n    {\"role\": \"assistant\", \"content\": \"A: I have a Gigamuru that my uncle gave me as a gift. I love to play it at home.\"},\n    {\"role\": \"user\", \"content\": \"Q: To 'screeg' something is to swing a sword at it. An example of a sentence that uses the word screeg is:\"}\n])\nprint(one_shot_prompt)\n```", "```py\n\"\"\"\n<|user|>\nQ: A 'Gigamuru' is a type of Japanese musical instrument. An example of a sentence that uses the word Gigamuru is:</s>\n<|assistant|>\nA: I have a Gigamuru that my uncle gave me as a gift. I love to play it at home.</s>\n<|user|>\nQ: To 'screeg' something is to swing a sword at it. An example of a sentence that uses the word screeg is:</s>\n<|assistant|>\n\"\"\"\n```", "```py\n# Run generative model\noutputs = pipe(one_shot_prompt, max_new_tokens=64, do_sample=`True`, return_full_text=`False`)\nprint(outputs[0][\"generated_text\"])\n```", "```py\n\"A: I screeged the dragon's tail with my sword, but it only seemed to make it angrier.\"\n```", "```py\n# Create name and slogan for a product\nproduct_prompt = format_prompt(\"Create a name and slogan for a chatbot that leverages LLMs.\")\noutputs = pipe(product_prompt, max_new_tokens=32, do_sample=`True`, return_full_text=`False`)\nproduct_description = outputs[0][\"generated_text\"]\n# Use name and slogan as input for a sales pitch\nsales_prompt = format_prompt(f\"What would be a good sales pitch for the following product: '`{`product_description`}`'?\")\noutputs = pipe(sales_prompt, max_new_tokens=128, do_sample=`True`, return_full_text=`False`)\nsales_pitch = outputs[0][\"generated_text\"]\n# Results\nprint(product_description)\nprint(sales_pitch)\n```", "```py\n\"\"\"\nName: LLM Assistant\nSlogan: \"Your go-to chatbot powered by cutting-edge language learning models.\"\nIntroducing LLM Assistant, the revolutionary chatbot that transforms the way you learn languages. Unlike traditional language learning methods, LLM Assistant utilizes the latest language learning models powered by Artificial Intelligence. With LLM Assistant, you can communicate with native speakers, practice real-life conversations, and receive instant feedback. Whether you're a novice or an advanced speaker, LLM Assistant caters to your unique learning needs, making language learning fun, interactive, and efficient. So, why wait? Say hello to LLM Assistant, your new language learning companion!\n\"\"\"\n```", "```py\n# Answering without explicit reasoning\nstandard_prompt = format_prompt(messages=[\n    {\"role\": \"user\", \"content\": \"Q: Roger has 5 tennis balls. He buys 2 more cans of tennis balls. Each can has 3 tennis balls. How many tennis balls does he have now?\"},\n    {\"role\": \"assistant\", \"content\": \"A: The answer is 11.\"},\n    {\"role\": \"user\", \"content\": \"Q: The cafeteria had 23 apples. If they used 20 to make lunch and bought 6 more, how many apples do they have?\"}\n])\n# Run generative model\noutputs = pipe(standard_prompt, max_new_tokens=64, do_sample=`True`, return_full_text=`False`)\nprint(outputs[0][\"generated_text\"])\n```", "```py\n\"A: The answer is 26.\"\n```", "```py\n# Answering with chain-of-thought\ncot_prompt = format_prompt(messages=[\n    {\"role\": \"user\", \"content\": \"Q: Roger has 5 tennis balls. He buys 2 more cans of tennis balls. Each can has 3 tennis balls. How many tennis balls does he have now?\"},\n    {\"role\": \"assistant\", \"content\": \"A: Roger started with 5 balls. 2 cans of 3 tennis balls each is 6 tennis balls. 5 + 6 = 11\\. The answer is 11.\"},\n    {\"role\": \"user\", \"content\": \"Q: The cafeteria had 23 apples. If they used 20 to make lunch and bought 6 more, how many apples do they have?\"}\n])\n# Run generative model\noutputs = pipe(cot_prompt, max_new_tokens=256, do_sample=`True`, return_full_text=`False`)\nprint(outputs[0][\"generated_text\"])\n```", "```py\n\"A: Initially, there were 23 apples. They used 20 apples to make lunch, leaving 3 apples (23 - 20 = 3). Then they bought 6 more apples. So, in total, the cafeteria now has (3 + 6) apples, which is 9 apples in total. The answer is 9.\"\n```", "```py\n# Zero-shot Chain-of-Thought\nzeroshot_cot = format_prompt(\n    \"The cafeteria had 23 apples. If they used 20 to make lunch and bought 6 more, how many apples do they have? Let's think step-by-step.\"\n)\n# Run generative model\noutputs = pipe(zeroshot_cot, max_new_tokens=512, do_sample=`True`, return_full_text=`False`)\nprint(outputs[0][\"generated_text\"])\n```", "```py\n\"\"\"\n1\\. We start with the original number of apples in the cafeteria: 23\n2\\. We determine how many apples were used to make lunch: 20\n3\\. We subtract the number of apples used to make lunch from the total number of apples to find the number of apples left in the cafeteria: 23 - 20 = 3\n4\\. We purchase 6 more apples: 3 + 6 = 9\n5\\. So the total number of apples now in the cafeteria is 23 (original number) - 20 (apples used for lunch) + 6 (apples purchased) = 9\n6\\. We can confirm that the calculation is correct by comparing the result with the original number of apples. Our answer is indeed closer to the original 23 apples than it was after we used 20 apples for lunch.\n\"\"\"\n```", "```py\n# Zero-shot Chain-of-Thought\nzeroshot_tot = format_prompt(\n    \"Imagine three different experts are answering this question. All experts will write down 1 step of their thinking, then share it with the group. Then all experts will go on to the next step, etc. If any expert realises they're wrong at any point then they leave. The question is 'The cafeteria had 23 apples. If they used 20 to make lunch and bought 6 more, how many apples do they have?'\"\n)\n```", "```py\n# Run generative model\noutputs = pipe(zeroshot_tot, max_new_tokens=512, do_sample=`True`, return_full_text=`False`)\nprint(outputs[0][\"generated_text\"])\n```", "```py\n\"\"\"\nExpert 1: The cafeteria started with 23 apples.\nExpert 2: They used 20 of those apples to make lunch.\nExpert 3: After making lunch, they bought 6 more apples to replenish their supply.\nExpert 2: Now, they have a total of (23-20, initial apples minus apples used for lunch) plus 6, the additional apples they bought. That's a total of 23-20 + 6 = 9 apples left.\nExpert 1: Wait a minute... If they started with 23 apples, how did they only have 9 left after buying more? That can't be right.\n[Expert 1 realizes they made a math mistake and leaves.]\nExpert 2: I'm going to double-check my math... [Takes out a calculator and verifies that they do indeed have 9 apples left.]\nExpert 3: I'm confident in my figures, it's clear we have 9 apples left.\n\"\"\"\n```", "```py\n# Zero-shot learning: Providing no examples\nzero_shot = format_prompt(\"Create a character profile for an RPG game in JSON format.\")\noutputs = pipe(zero_shot, max_new_tokens=128, do_sample=`True`, return_full_text=`False`)\nprint(outputs[0][\"generated_text\"])\n```", "```py\n{\n  \"name\": \"Aurelia\",\n  \"race\": \"Human\",\n  \"class\": \"Mage\",\n  \"age\": 22,\n  \"gender\": \"Female\",\n  \"description\": \"Aurelia is a young woman with a striking golden mane and...\",\n  \"stats\": {\n    \"strength\": 8\n  }\n}\n```", "```py\n# Providing an example of the output structure\none_shot_prompt = format_prompt(\"\"\"Create a character profile for an RPG game. Make sure to only use this format:\n{\n  \"description\": \"A SHORT DESCRIPTION\",\n  \"name\": \"THE CHARACTER'S NAME\",\n  \"armor\": \"ONE PIECE OF ARMOR\",\n  \"weapon\": \"ONE OR MORE WEAPONS\"\n}\n\"\"\")\noutputs = pipe(one_shot_prompt, max_new_tokens=256, do_sample=`True`, return_full_text=`False`)\nprint(outputs[0][\"generated_text\"])\n```", "```py\n{\n  \"description\": \"A human wizard with long, wild grey hair and...\",\n  \"name\": \"Sybil Astrid\",\n  \"armor\": \"None\",\n  \"weapon\": [\n    \"Crystal Staff\",\n    \"Oak Wand\"\n  ]\n}\n```", "```py\nwget https://huggingface.co/TheBloke/zephyr-7B-beta-GGUF/resolve/main/zephyr-7b-beta.Q4_K_M.gguf\n```", "```py`Then, we load the model using llama-cpp-python and choose a JSON grammar to use. This will ensure that the output of the model adheres to JSON:    ```", "```py    The rules are described in the grammar file we downloaded.    Using the JSON grammar, we can ask the model for an RPG character in JSON format to be used in our Dungeons and Dragons session:    ```", "```py    This gives us valid JSON:    ```", "```py    This allows us to more confidently use generative models in applications where we expect the output to adhere to certain formats.     ###### Note    Note that we set the number of tokens to be generated with `max_tokens` to be, in principle, unlimited. This means that the model will continue generating until is has completed its JSON output or until it reaches its context limit.```"]