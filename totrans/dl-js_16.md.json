["```js\ngetNextBatchFunction(\n      shuffle, lookBack, delay, batchSize, step, minIndex, maxIndex,\n          normalize,\n      includeDateTime)\n```", "```js\n    const trainShuffle = true;\n    const trainDataset = tf.data.generator(               ***1***\n        () => jenaWeatherData.getNextBatchFunction(\n          trainShuffle, lookBack, delay, batchSize, step, TRAIN_MIN_ROW,\n          TRAIN_MAX_ROW, normalize, includeDateTime)).prefetch(8);\n    const evalShuffle = false;\n    const valDataset = tf.data.generator(                 ***2***\n      () => jenaWeatherData.getNextBatchFunction(\n          evalShuffle, lookBack, delay, batchSize, step, VAL_MIN_ROW,\n          VAL_MAX_ROW, normalize, includeDateTime));\n\n      await model.fitDataset(trainDataset, {\n      batchesPerEpoch: 500,\n      epochs,\n      callbacks: customCallback,\n      validationData: valDataset                          ***3***\n    });\n```", "```js\n  const trainingSurface =\n      tfvis.visor().surface({tab: modelType, name: 'Model Training'});\n   const customCallback = tfvis.show.fitCallbacks(trainingSurface,\n      ['loss', 'val_loss'], {\n     callbacks: ['onBatchEnd', 'onEpochEnd']\n   }));\n```", "```js\nfunction buildLinearRegressionModel(inputShape) {\n  const model = tf.sequential();\n  model.add(tf.layers.flatten({inputShape}));        ***1***\n  model.add(tf.layers.dense({units: 1}));            ***2***\n  return model;\n}\n```", "```js\nmodel.compile({loss: 'meanAbsoluteError', optimizer: 'rmsprop'});\n```", "```js\n    const surface = tfvis.visor().surface({name: 'Model Summary', tab});\n    tfvis.show.modelSummary(surface, model);\n```", "```js\nfunction buildMLPModel(inputShape, kernelRegularizer, dropoutRate) {\n  const model = tf.sequential();\n  model.add(tf.layers.flatten({inputShape}));\n  model.add(tf.layers.dense({\n    units: 32,\n    kernelRegularizer                            ***1***\n    activation: 'relu',\n  }));\n  if (dropoutRate > 0) {\n    model.add(tf.layers.dropout({rate: dropoutRate}));\n  }\n  model.add(tf.layers.dense({units: 1}));       ***2***\n  return model;\n}\n```", "```js\nmodel = buildMLPModel(inputShape, tf.regularizers.l2());\n```", "```js\nloss = meanAbsoluteError(targets, predictions)\n```", "```js\nloss = meanAbsoluteError(targets, prediciton) + 12Rate * 12(kernel)\n```", "```js\nl2(kernel) = 0.1^2 + 0.2^2 + (-0.3)^2 + (-0.4)^2 = 0.3\n```", "```js\nfunction visualizeModelLayers(tab, layers, layerNames) {\n  layers.forEach((layer, i) => {\n    const surface = tfvis.visor().surface({name: layerNames[i], tab});\n    tfvis.show.layer(surface, layer);\n  });\n}\n```"]