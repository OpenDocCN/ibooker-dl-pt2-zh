["```py\nimport keras\nfrom keras import layers\n```", "```py\n# This is the size of our encoded representations\nencoding_dim = 32  # 32 floats -> compression of factor 24.5, assuming the input is 784 floats\n\n# This is our input image\ninput_img = keras.Input(shape=(784,))\n# \"encoded\" is the encoded representation of the input\nencoded = layers.Dense(encoding_dim, activation='relu')(input_img)\n# \"decoded\" is the lossy reconstruction of the input\ndecoded = layers.Dense(784, activation='sigmoid')(encoded)\n\n# This model maps an input to its reconstruction\nautoencoder = keras.Model(input_img, decoded)\n```", "```py\n# This model maps an input to its encoded representation\nencoder = keras.Model(input_img, encoded) \n\n# This is our encoded (32-dimensional) input\nencoded_input = keras.Input(shape=(encoding_dim,))\n# Retrieve the last layer of the autoencoder model\ndecoder_layer = autoencoder.layers[-1]\n# Create the decoder model\ndecoder = keras.Model(encoded_input, decoder_layer(encoded_input))\n\nautoencoder.compile(optimizer='adam', loss='binary_crossentropy')\n```", "```py\n(x_train, _), (x_test, _) = mnist.load_data()\n```", "```py\nx_train = x_train.astype('float32') / 255.\nx_test = x_test.astype('float32') / 255.\nx_train = x_train.reshape((len(x_train), np.prod(x_train.shape[1:])))\nx_test = x_test.reshape((len(x_test), np.prod(x_test.shape[1:])))\nprint(x_train.shape)\nprint(x_test.shape)\n```", "```py\nautoencoder.fit(x_train, x_train,\n                epochs=5,\n                batch_size=128,\n                shuffle=True,\n                validation_data=(x_test, x_test))\n```", "```py\n# Encode and decode some digits\n# Note that we take them from the *test* set\nencoded_imgs = encoder.predict(x_test)\ndecoded_imgs = decoder.predict(encoded_imgs)\n```", "```py\n# Use Matplotlib (don't ask)\nimport matplotlib.pyplot as plt\n\nn = 10  # How many digits we will display\nplt.figure(figsize=(20, 4))\nfor i in range(n):\n    # Display original\n    ax = plt.subplot(2, n, i + 1)\n    plt.imshow(x_test[i].reshape(28, 28))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n\n    # Display reconstruction\n    ax = plt.subplot(2, n, i + 1 + n)\n    plt.imshow(decoded_imgs[i].reshape(28, 28))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n```"]