["```py\npolicy = botorch.acquisition.analytic.UpperConfidenceBound(\n    model, beta=1\n)\n```", "```py\npolicy = botorch.acquisition.analytic.UpperConfidenceBound(\n    model, beta=2\n)\n```", "```py\ndim = 1                   ❶\nnum_candidates = 1000     ❷\n\nsobol = torch.quasirandom.SobolEngine(dim, scramble=True)\ncandidate_x = sobol.draw(num_candidates)\n```", "```py\nNumericalWarning: A not p.d., added jitter of 1.0e−06 to the diagonal\n  warnings.warn(\n```", "```py\nwith warnings.catch_warnings():\n    warnings.filterwarnings('ignore', category=RuntimeWarning)\n    ...            ❶\n```", "```py\nts = botorch.generation.MaxPosteriorSampling(model, replacement=False)\n```", "```py\nnext_x = ts(candidate_x, num_samples=1)\n```", "```py\nfor i in range(num_queries):\n  print(\"iteration\", i)\n  print(\"incumbent\", train_x[train_y.argmax()], train_y.max())\n\n  sobol = torch.quasirandom.SobolEngine(1, scramble=True)           ❶\n  candidate_x = sobol.draw(num_candidates)                          ❶\n  candidate_x = 10 * candidate_x − 5                                ❷\n\n  model, likelihood = fit_gp_model(train_x, train_y)\n\n  ts = botorch.generation.MaxPosteriorSampling(model,\n  ➥replacement=False)                                              ❸\n  next_x = ts(candidate_x, num_samples=1)                           ❸\n\n  visualize_gp_belief_and_policy(model, likelihood, next_x=next_x)  ❹\n\n  next_y = forrester_1d(next_x)\n\n  train_x = torch.cat([train_x, next_x])\n  train_y = torch.cat([train_y, next_y])\n```"]