- en: Appendix B. Getting started with Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 B. 使用 Docker 入门
- en: If you have ever used public clouds to enable your applications with autoscaling,
    the feature where you can easily add or remove compute nodes for your application
    cluster, you have already used virtual service instances. You may have even used
    programs like ssh to log in to your instances and then managed them remotely via
    this ssh session. At first glance, it may appear that a Docker container instance
    is no different from a virtual server. If you ssh into a Docker container, you
    may not even notice a difference compared to a session in a virtual server hosted
    by a public cloud service like AWS EC2\. However, while traditional virtual servers
    from public cloud services like EC2 are related to Docker, there are important
    features Docker provides that are important to know.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经使用过公共云来启用您的应用程序进行自动缩放，即您可以轻松地添加或删除应用程序集群的计算节点功能，那么您已经使用了虚拟服务实例。您甚至可能使用过类似
    ssh 的程序登录到您的实例，然后通过这个 ssh 会话远程管理它们。乍一看，Docker 容器实例似乎与虚拟服务器没有什么不同。如果您通过 ssh 登录到
    Docker 容器中，与通过 AWS EC2 等公共云服务托管的虚拟服务器的会话相比，您可能甚至感觉不出差别。但是，虽然与 Docker 有关的传统公共云服务虚拟服务器存在相似之处，但
    Docker 提供的重要功能是需要知道的。
- en: 'An approachable way to understanding Docker is in terms of lightweight (compared
    to virtual servers) virtualization. This refers to dimensions like the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个了解 Docker 的可接近方式是将其看作是轻量级（与虚拟服务器相比）的虚拟化。这包括以下维度：
- en: Storage, where Docker image snapshots take up less disk space than traditional
    virtual server/machine images
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储方面，Docker 镜像快照占用的磁盘空间比传统的虚拟服务器/机器镜像更少。
- en: Memory, since Docker container instances consume less memory than guest instances
    (virtual servers)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存方面，由于 Docker 容器实例消耗的内存比客户机实例（虚拟服务器）少。
- en: Latency, as Docker containers start up faster than their virtual server counterparts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动速度方面，Docker 容器比其虚拟服务器等同物启动得更快。
- en: Performance, as programs running in Docker containers have near-zero CPU overhead
    compared to programs running in virtual guest instances
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能方面，由于运行在 Docker 容器中的程序与运行在虚拟客户机实例中的程序相比，几乎没有任何 CPU 开销。
- en: Yet the differences between Docker containers and virtual servers are much more
    fundamental at the core hardware/software level. The traditional virtualization
    technology (e.g., VMWare, Xen) virtualizes the host computer hardware, or creates
    software-based proxies for the underlying hardware components, including central
    processing units, storage, network devices, and more, instantiating guest environments
    with their own copies of the operating system on disk and in memory along with
    device drivers and other supporting software. In contrast, Docker containers virtualize
    the operating system such that each guest container instance shares the same operating
    system but operates as if it has isolated access to the entire operating system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Docker 容器和虚拟服务器之间的差异在核心硬件/软件级别上更加根本。传统的虚拟化技术（例如 VMWare、Xen）将主机计算机硬件进行虚拟化，或者创建基于软件的代理来实现底层硬件组件的虚拟化，包括中央处理单元、存储、网络设备等，通过在硬盘和内存中实例化带有操作系统副本和设备驱动程序及其他支持软件的客户机环境。相比之下，Docker
    容器虚拟化操作系统，以便每个客户机容器实例共享相同的操作系统，但在操作上却像单独拥有对整个操作系统的隔离访问权限一样。
- en: B.1 Getting started with Docker
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B.1 使用 Docker 入门
- en: If you don’t have Docker installed in your environment, you can get access to
    a lab environment with Docker by visiting [https://labs.play-with-docker.com/](https://labs.play-with-docker.com/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的环境中没有安装 Docker，则可以通过访问[https://labs.play-with-docker.com/](https://labs.play-with-docker.com/)，获取一个带有
    Docker 的实验室环境。
- en: Docker is an overloaded term, and it describes a variety of Docker technology
    components (e.g., Docker Engine, Docker Swarm, and so on), the Docker company
    itself, as well as the Docker container image registry maintained on hub.docker.com.
    When you install the Docker engine, you do not have any Docker images installed
    in your environment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是一个多义词，它描述了各种 Docker 技术组件（例如 Docker 引擎、Docker Swarm 等）、Docker 公司本身，以及在
    hub.docker.com 维护的 Docker 容器镜像注册表。安装 Docker 引擎时，您的环境中没有任何 Docker 镜像安装。
- en: 'Assuming that you have your Docker Engine, your Docker host software, configured
    correctly, it is traditional to start using Docker with a variant of the hello-world
    program by running the following command in your shell environment:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经正确配置了 Docker 引擎和 Docker 主机软件，那么您可以通过在 Shell 环境中运行以下命令的变体来使用 Docker，即经典的
    hello-world 程序：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Assuming you do not already have a hello-world Docker image downloaded (pulled),
    this should output the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您尚未下载（pull）hello-world Docker 镜像，这应该输出以下内容：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is important to understand that run is a composite Docker command that performs
    multiple operations behind the scenes. The following breaks down the commands
    performed by run to help you understand what it does.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解 run 是一个组合的 Docker 命令，在幕后执行多个操作。以下将解释 run 执行的命令，以帮助您理解它的作用。
- en: 'Since you have already done the basic hello-world-style example using Docker,
    let’s try a slightly more complex example using the popular nginx webserver. To
    download a Docker image from hub.docker.com (also known as Docker Hub) to your
    local Docker host, you can perform a pull command as shown here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您已经完成了使用 Docker 的基本 hello-world 风格示例，让我们尝试使用流行的 nginx web 服务器来进行一个稍微复杂一些的示例。要从
    hub.docker.com（也称为 Docker Hub）下载 Docker 镜像到本地 Docker 主机，您可以执行如下的 pull 命令：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This should output the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该输出以下内容：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: NOTE Because it’s possible that the nginx image may have changed since the time
    this book was created, your hash codes in the message may not correspond to those
    in the examples, but the concepts in this appendix apply regardless of the specific
    values of the hash codes in the examples.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 由于 nginx 镜像可能在此书创建之时已经发生了变化，因此您在消息中看到的哈希码可能与示例中的不对应，但是本附录中的概念都是适用的，不管示例中的哈希码具体值是什么。
- en: The message produced by the pull command indicates that Docker defaulted to
    using the tag with the value latest for the nginx image. Since it is also possible
    to specify the fully qualified domain name from where Docker can pull an image,
    Docker also defaulted to using the Docker Hub FQN docker.io/library as the prefix
    uniquely identifying the nginx image.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: pull 命令生成的消息表明 Docker 默认使用了 nginx 镜像的标签 latest。由于也可以指定完全限定的域名从而让 Docker 拉取镜像，Docker
    默认也使用 Docker Hub FQN docker.io/library 作为唯一标识 nginx 镜像的前缀。
- en: Notice the mention of the various hash codes in the message returned by the
    pull command, for example
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 pull 命令返回的消息中提到的各种哈希码，例如
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Each of the hash code values preceding the Pull complete message (as well as
    the download progress messages that you observed while running the pull command)
    is a unique identifier or a *fingerprint* of a layer in union, also known as a
    layered filesystem used by Docker container images. In contrast, the hash code
    that follows the Digest: sha256: message is the unique fingerprint for the entire
    nginx Docker image.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '在 pull 命令执行时，您观察到的每个 Pull complete 消息前面的哈希码值（以及您运行 pull 命令时观察到的下载进度消息）都是 Docker
    容器镜像所使用的联合文件系统中的一个层的唯一标识符或*指纹*。相比之下，跟随 Digest: sha256: 消息的哈希码是整个 nginx Docker
    镜像的唯一指纹。'
- en: Once the image is on your Docker host server, you can use it to create an instance
    of a Docker container. The container is the lightweight virtual machine described
    earlier, or a virtual guest operating system environment running in a near isolation
    from the rest of your Docker host server operating system.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像位于您的 Docker 主机服务器上，您就可以使用它来创建 Docker 容器的实例。该容器是前面描述的轻量级虚拟机，或者是运行在与 Docker
    主机服务器操作系统的其余部分近乎隔离的虚拟客户操作系统环境。
- en: To create the container you can execute
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建容器，您可以执行以下命令
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'which should return a unique container ID resembling the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回类似以下的唯一容器 ID：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Instead of using the full, lengthy container ID in your command, Docker allows
    you to specify the first few characters of the container ID, as long as it is
    unambiguous in your Docker host environment. To confirm that the container was
    created in your environment, you can use the docker ls -a | grep <CONTAINER_ID>
    command, where docker ls -a lists all the containers in your environment and the
    piped grep command filters just the containers that you need. For instance, since
    the container I created had an ID starting with cf33, I can execute
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在命令中使用完整且冗长的容器 ID，也可以使用 Docker 允许您指定容器 ID 的前几个字符，只要在您的 Docker 主机环境中是唯一的即可。要确认容器是否已在您的环境中创建，您可以使用
    docker ls -a | grep <CONTAINER_ID> 命令，其中 docker ls -a 列出您环境中的所有容器，并且管道过滤器 grep
    命令筛选出您需要的容器。例如，由于我创建的容器的 ID 以 cf33 开头，我可以执行
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: which in my case outputs
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，输出如下：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice that Docker automatically created a human-readable Docker container ID
    ecstatic_gagarin for the container so that it is easier to remember and specify
    in the command line compared to the hash code. Also, the container has a state
    of Created since the container was just created from the image and never started.
    To start the container you can execute
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Docker 自动为容器创建了一个易于记忆和在命令行中指定的可读的 Docker 容器 ID，名为 ecstatic_gagarin，与哈希码相比更容易记忆和指定。此外，由于容器刚刚从镜像创建而从未启动，因此容器的状态为已创建。要启动容器，您可以执行
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: replacing CONTAINER_ID with you container ID value or prefix. The output simply
    echoes the container ID, but you can confirm that the container changed state
    by rerunning
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 用您的容器 ID 值或前缀替换 CONTAINER_ID。输出只是回显容器 ID，但您可以通过重新运行确认容器已更改状态
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'which should report the uptime for the container, similar to the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会报告容器的正常运行时间，类似于以下内容：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Although you may expect that you should be able to access the NGINX web server
    since you started an nginx container, that’s incorrect. Simply starting the container
    does not include the step of mapping (exposing) the ports opened in the guest
    container environment to the host environment. To resolve this problem, you can
    shut down the running container using
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可能期望您应该能够访问 NGINX Web 服务器，因为您启动了一个 nginx 容器，但这是不正确的。简单地启动容器不包括将在客户容器环境中打开的端口映射（暴露）到主机环境的步骤。要解决此问题，您可以使用
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: which should echo your CONTAINER_ID value.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会回显您的 CONTAINER_ID 值。
- en: Next, rerun the container with the port 80 (the web server HTTP port) exposed
    as port 8080 of your host Docker environment. This can be performed using
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用端口 80（Web 服务器 HTTP 端口）作为主机 Docker 环境的端口 8080 重新运行容器。可以通过以下方式执行：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'which invokes a new instance of a new Docker container, returning the log messages
    from the NGINX service in your terminal. At this point, if you open your web browser
    and navigate to the port 8080 of your Docker host server IP address, for example
    by navigating to 127.0.0.1:8080, you should see the HTML page with the message:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调用一个新的 Docker 容器的新实例，并在终端中返回 NGINX 服务的日志消息。此时，如果您打开 Web 浏览器并导航到您的 Docker 主机服务器
    IP 地址的端口 8080，例如通过导航到 127.0.0.1:8080，您应该会看到带有消息的 HTML 页面：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: At this point, the behavior of the container instance created by Docker is different
    from what you observed earlier when you executed docker start. In this case, if
    you press Ctrl-C in the terminal session, the container instance will terminate,
    which you can easily confirm by rerunning docker ps. This time, docker ps should
    not show any running container instances since you just shut it down by pressing
    Ctrl-C.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，Docker 创建的容器实例的行为与您执行 docker start 时观察到的不同。在这种情况下，如果您在终端会话中按下 Ctrl-C，容器实例将终止，您可以通过重新运行
    docker ps 轻松确认。这次，docker ps 不应显示任何正在运行的容器实例，因为您刚刚通过按下 Ctrl-C 关闭了它。
- en: 'To prevent the Docker container instance from taking over your terminal session,
    you can rerun it in a detached mode by specifying the -d parameter:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止 Docker 容器实例接管您的终端会话，您可以通过指定 -d 参数在分离模式下重新运行它：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This should return the container ID for the instance you just started.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会返回您刚刚启动的实例的容器 ID。
- en: Of course, it is not interesting to have a web server that only shows a Welcome
    to nginx! message. What would it take to change the contents of the HTML file
    used to serve the welcome web page?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，拥有一个只显示“欢迎使用 nginx！”消息的 Web 服务器并不有趣。要更改用于提供欢迎网页的 HTML 文件的内容需要做什么？
- en: You can start by confirming the location of the index.html file with the welcome
    message. The exec command allows you to use the host shell docker CLI to execute
    arbitrary Linux commands in a running guest container instance. For example, to
    output the contents of the /usr/share/nginx/html/index.html file in your nginx
    instance, run
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以先确认包含欢迎消息的 index.html 文件的位置。exec 命令允许您使用主机 shell 的 docker CLI 在运行的客户容器实例中执行任意
    Linux 命令。例如，要输出您的 nginx 实例中 /usr/share/nginx/html/index.html 文件的内容，请运行
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: which, if you use the correct CONTAINER_ID value for your nginx container instance,
    should output
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为您的 nginx 容器实例使用正确的 CONTAINER_ID 值，则应输出
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that in the exec command, you specified that you wish to execute the Bash
    shell using /bin/bash, and the specific shell command is specified as the command-line
    argument to /bin/bash using the -c flag and the head /usr/share/nginx/html/index.html
    as the actual command. Recall that the head command can be used to echo the first
    five lines of a file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在 exec 命令中，您指定要使用 /bin/bash 执行 Bash shell，并使用 -c 标志和 head /usr/share/nginx/html/index.html
    作为实际命令的命令行参数指定 shell 命令。请记住，head 命令可用于输出文件的前五行。
- en: Similarly, you can easily modify the contents of the index.html file by changing
    its contents in the guest container instance. If you execute
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以通过更改客户容器实例中的内容轻松修改 index.html 文件的内容。如果执行
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: and refresh your localhost:8080 page in your browser, you should receive the
    “Hello from my Docker tutorial” message.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新浏览器中的 localhost:8080 页面，你应该收到“Hello from my Docker tutorial”消息。
- en: 'It is critical that you realize the change to the index.html file happened
    in the container instance and *not* in the container image used to start the instance.
    If you are ever unsure about what changes you made to the container image to start
    the container instance, you can find out the details using the diff command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，您意识到 index.html 文件的更改发生在容器实例中，*而不是*在用于启动实例的容器镜像中。如果您对用于启动容器实例的容器镜像所做的更改感到不确定，您可以使用
    diff 命令找出详细信息：
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This should output the following given the changes made to the index.html file
    and files changed (C) or added (A) by the NGINX web server:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将根据对 index.html 文件的更改和 NGINX Web 服务器更改（C）或添加（A）所输出以下内容：
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In section B.2, you will learn about creating your own custom Docker image so
    you can persist your desired changes and re-use them across many Docker container
    instances.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 B.2 节，您将了解如何创建自己的自定义 Docker 镜像，以便可以持久保存所需的更改并在许多 Docker 容器实例之间重复使用它们。
- en: When you frequently start and stop multiple container instances in your Docker
    host environment, it is convenient to manage them as a batch. You can list all
    the container instance IDs using
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当您经常在 Docker 主机环境中启动和停止多个容器实例时，将它们作为一批管理是很方便的。您可以使用以下命令列出所有容器实例 ID
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'which should return a list resembling the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回类似以下的列表：
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: where the ellipsis illustrates that you may have an arbitrary number of container
    IDs returned by the command. To stop all of the container instances in your environment,
    you can use the xargs command
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 省略号表示您可能有任意数量的容器 ID 由命令返回。要停止环境中的所有容器实例，您可以使用 xargs 命令
- en: '[PRE23]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'which stops any and all container instances. Next, you can repeat the process
    to remove any remaining container instances using docker rm combined with xargs:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这会停止所有容器实例。接下来，您可以重复使用 docker rm 结合 xargs 来移除任何剩余的容器实例：
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: After stopping and removing the docker container instance, if you rerun
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在停止并删除 docker 容器实例后，如果重新运行
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: you should see an empty response, meaning that your Docker host environment
    is free of any container instances.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个空的响应，这意味着你的 Docker 主机环境中没有任何容器实例。
- en: B.2 Building a custom image
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B.2 构建自定义镜像
- en: It is remarkably simple to create your own Docker image and then share it with
    the world. It starts with a Dockerfile, a declarative specification for how to
    take an existing (base) container image and extend it (think layer on top) with
    your own changes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自己的 Docker 镜像并与世界分享是非常简单的。它始于一个 Dockerfile，这是一个声明性规范，用于如何获取现有（基础）容器镜像并使用您自己的更改扩展它（考虑在其上添加层）。
- en: 'You should start the process of building your own Docker image by creating
    and navigating to an empty directory, tmp:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该通过创建和导航至一个空目录 tmp 开始构建自己的 Docker 镜像的过程：
- en: '[PRE26]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: It is good practice to have an empty directory ready because Docker makes a
    copy of the contents of the directory (known as the context directory) used during
    the build process, so if you accidentally launch the build process from a directory
    that contains gigabytes’ worth of unrelated content, you are going to end up waiting
    for Docker to unnecessarily copy that unrelated content instead of promptly returning
    with the resulting image.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个空目录是个好习惯，因为 Docker 在构建过程中会复制目录的内容（称为上下文目录），所以如果您意外地从包含大量不相关内容的目录启动构建过程，您将不得不等待
    Docker 不必要地复制这些不相关的内容，而不是立即返回结果镜像。
- en: 'Since every Docker image starts with a base image, the Dockerfile must specify
    a FROM statement with the identifier of the base image to use during the build
    process. This example continues using the NGINX web server:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个 Docker 镜像都以基础镜像开始，因此 Dockerfile 必须在构建过程中使用 FROM 语句指定要使用的基础镜像的标识符。此示例继续使用
    NGINX Web 服务器：
- en: '[PRE27]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here, the echo command does not produce an output but creates a new Dockerfile
    in the current directory with a single line containing the FROM statement specifying
    nginx:latest as the base image. Now you are ready to build your first custom NGINX
    image using the following build command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，echo 命令不会产生输出，而是在当前目录中创建一个新的 Dockerfile，其中包含一个包含 FROM 语句的单行，指定 nginx:latest
    作为基础镜像。现在，您已准备好使用以下构建命令构建您的第一个自定义 NGINX 镜像：
- en: '[PRE28]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: which should output
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 应该输出
- en: '[PRE29]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: At this point, you can confirm that you have a new Docker image in your Docker
    host environment with
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可以确认您在 Docker 主机环境中有一个新的 Docker 镜像
- en: '[PRE30]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: which produces an output that may surprise you with an odd creation date timestamp.
    In my case, for the image ID 4bb46517cac3 the timestamp reported a creation date
    of 3 weeks ago
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生一个输出，可能会让您对奇怪的创建日期时间戳感到惊讶。在我的情况下，对于镜像 ID 4bb46517cac3，时间戳报告了 3 周前的创建日期
- en: '[PRE31]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Recall that Docker relies on hash code—based fingerprints for the image layers
    and the entire container image. Since your Dockerfile did not introduce any changes
    to the image, the hash code stayed the same despite the change to the metadata
    values like the image name (just-nginx).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Docker 依赖于基于哈希代码的指纹来对图像层和整个容器镜像进行识别。由于您的 Dockerfile 没有对图像进行任何更改，所以哈希代码保持不变，尽管元数据值（just-nginx）发生了变化。
- en: What about an example that actually changes the base Docker image? You can start
    by creating your own custom index.html file that you would like to see rendered
    when you access the NGINX web server. Note that this file is created in the tmp
    subdirectory using
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 那么有关实际更改基础 Docker 镜像的示例呢？您可以首先创建自己的自定义 index.html 文件，您希望在访问 NGINX Web 服务器时看到其呈现。请注意，使用以下命令将该文件创建在
    tmp 子目录中
- en: '[PRE32]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: After the index.html file is prepared, you modify the Dockerfile with a command
    to copy the file into the image during the build process,
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好 index.html 文件后，您可以使用命令修改 Dockerfile，在构建过程中将文件复制到镜像中，
- en: '[PRE33]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'so that the entire Dockerfile should consist of the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此整个 Dockerfile 应该包括以下内容：
- en: '[PRE34]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: At this point you are ready to build another image with your customized welcome
    message. Run
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您已经准备好使用自定义欢迎消息构建另一个镜像。运行
- en: '[PRE35]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: which should output
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 应该输出
- en: '[PRE36]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: where the hash codes may not match with yours.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 其中哈希代码可能与您的不匹配。
- en: Notice that the Docker COPY command finished successfully because you used tmp
    as the build context directory and the index.html resided in tmp. In general,
    any file you wish to copy into the Docker image during the build process must
    reside in the build context directory.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Docker COPY 命令完成成功，因为您将 tmp 用作构建上下文目录，并且 index.html 存在于 tmp 中。通常，在构建过程中想要复制到
    Docker 镜像中的任何文件都必须位于构建上下文目录中。
- en: Now you are ready to start the newly built image,
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经准备好启动新构建的镜像，
- en: '[PRE37]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: and confirm that if you visit localhost:8080 NGINX responds with
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 并确认如果您访问 localhost:8080，NGINX 会响应
- en: '[PRE38]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: B.3 Sharing your custom image with the world
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B.3 共享您的自定义镜像给世界
- en: 'Before you can take you Docker image and upload it to the Docker image registry,
    you must create your personal account on hub.docker.com Assuming you have created
    your account and have your username and password for Docker Hub, you can login
    using these credentials from the command line:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以将 Docker 镜像上传到 Docker 镜像注册表之前，您必须在 hub.docker.com 上创建您的个人帐户。假设您已经创建了您的帐户并且拥有
    Docker Hub 的用户名和密码，您可以使用这些凭据从命令行登录：
- en: '[PRE39]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Upon successful login, you should observe output similar to the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，您应该观察到类似以下的输出：
- en: '[PRE40]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: For a Docker image to be ready for an upload, it must be tagged with your Docker
    username as a prefix. To assign this prefix to your custom-nginx image, you can
    use the tag command
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要使 Docker 镜像准备好上传，必须以您的 Docker 用户名作为前缀对其进行标记。要将此前缀分配给您的 custom-nginx 镜像，可以使用
    tag 命令
- en: '[PRE41]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: replacing YOUR_USER_NAME with your Docker Hub username. To upload (push) your
    image to Docker Hub you can execute
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将 YOUR_USER_NAME 替换为您的 Docker Hub 用户名。要上传（推送）您的镜像到 Docker Hub，可以执行
- en: '[PRE42]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'which should produce an output similar to the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会产生类似以下的输出：
- en: '[PRE43]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This indicates that you can log back into your Docker registry dashboard on
    hub.docker.com and confirms that the custom-nginx:latest image is available in
    your registry.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明你可以重新登录到你的 Docker 注册表仪表板，网址为hub.docker.com，并确认`custom-nginx:latest`镜像已经在你的注册表中可用。
